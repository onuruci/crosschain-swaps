{"version":3,"file":"static/js/463.dfb6d1bc.chunk.js","mappings":"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","sources":["../node_modules/ethers/src.ts/abi/bytes32.ts","../node_modules/ethers/src.ts/constants/numbers.ts","../node_modules/ethers/src.ts/constants/strings.ts","../node_modules/ethers/src.ts/contract/factory.ts","../node_modules/ethers/src.ts/crypto/hmac.ts","../node_modules/@noble/hashes/src/ripemd160.ts","../node_modules/ethers/src.ts/crypto/ripemd160.ts","../node_modules/ethers/src.ts/crypto/pbkdf2.ts","../node_modules/ethers/src.ts/crypto/random.ts","../node_modules/@noble/hashes/src/scrypt.ts","../node_modules/ethers/src.ts/crypto/scrypt.ts","../node_modules/ethers/src.ts/crypto/index.ts","../node_modules/ethers/src.ts/hash/authorization.ts","../node_modules/ethers/src.ts/hash/message.ts","../node_modules/ethers/src.ts/hash/solidity.ts","../node_modules/ethers/src.ts/providers/community.ts","../node_modules/ethers/src.ts/providers/provider-ankr.ts","../node_modules/ethers/src.ts/providers/provider-alchemy.ts","../node_modules/ethers/src.ts/providers/provider-chainstack.ts","../node_modules/ethers/src.ts/providers/provider-cloudflare.ts","../node_modules/ethers/src.ts/providers/provider-etherscan.ts","../node_modules/ethers/src.ts/providers/ws-browser.ts","../node_modules/ethers/src.ts/providers/provider-socket.ts","../node_modules/ethers/src.ts/providers/provider-websocket.ts","../node_modules/ethers/src.ts/providers/provider-infura.ts","../node_modules/ethers/src.ts/providers/provider-quicknode.ts","../node_modules/ethers/src.ts/providers/provider-fallback.ts","../node_modules/ethers/src.ts/providers/default-provider.ts","../node_modules/ethers/src.ts/providers/signer-noncemanager.ts","../node_modules/ethers/src.ts/providers/provider-blockscout.ts","../node_modules/ethers/src.ts/providers/provider-pocket.ts","../node_modules/ethers/src.ts/providers/provider-ipcsocket-browser.ts","../node_modules/ethers/src.ts/utils/uuid.ts","../node_modules/ethers/src.ts/wordlists/decode-owl.ts","../node_modules/ethers/src.ts/wordlists/wordlist.ts","../node_modules/ethers/src.ts/wordlists/wordlist-owl.ts","../node_modules/ethers/src.ts/wordlists/lang-en.ts","../node_modules/ethers/src.ts/wallet/mnemonic.ts","../node_modules/ethers/src.ts/wallet/base-wallet.ts","../node_modules/aes-js/src.ts/aes.ts","../node_modules/aes-js/src.ts/mode.ts","../node_modules/aes-js/src.ts/mode-cbc.ts","../node_modules/aes-js/src.ts/mode-ctr.ts","../node_modules/ethers/src.ts/wallet/utils.ts","../node_modules/ethers/src.ts/wallet/json-keystore.ts","../node_modules/ethers/src.ts/wallet/hdwallet.ts","../node_modules/ethers/src.ts/wallet/json-crowdsale.ts","../node_modules/aes-js/src.ts/padding.ts","../node_modules/ethers/src.ts/wallet/wallet.ts","../node_modules/ethers/src.ts/wordlists/wordlist-owla.ts","../node_modules/ethers/src.ts/wordlists/decode-owla.ts","../node_modules/ethers/src.ts/wordlists/bit-reader.ts","../node_modules/ethers/src.ts/wordlists/wordlists-browser.ts"],"sourcesContent":["/**\n *  About bytes32 strings...\n *\n *  @_docloc: api/utils:Bytes32 Strings\n */\n\nimport {\n    getBytes, toUtf8Bytes, toUtf8String, zeroPadBytes\n} from \"../utils/index.js\";\n\nimport type { BytesLike } from \"../utils/index.js\";\n\n/**\n *  Encodes %%text%% as a Bytes32 string.\n */\nexport function encodeBytes32String(text: string): string {\n\n    // Get the bytes\n    const bytes = toUtf8Bytes(text);\n\n    // Check we have room for null-termination\n    if (bytes.length > 31) { throw new Error(\"bytes32 string must be less than 32 bytes\"); }\n\n    // Zero-pad (implicitly null-terminates)\n    return zeroPadBytes(bytes, 32);\n}\n\n/**\n *  Encodes the Bytes32-encoded %%bytes%% into a string.\n */\nexport function decodeBytes32String(_bytes: BytesLike): string {\n    const data = getBytes(_bytes, \"bytes\");\n\n    // Must be 32 bytes with a null-termination\n    if (data.length !== 32) { throw new Error(\"invalid bytes32 - not 32 bytes long\"); }\n    if (data[31] !== 0) { throw new Error(\"invalid bytes32 string - no null terminator\"); }\n\n    // Find the null termination\n    let length = 31;\n    while (data[length - 1] === 0) { length--; }\n\n    // Determine the string value\n    return toUtf8String(data.slice(0, length));\n}\n\n","\n/**\n *  A constant for the order N for the secp256k1 curve.\n *\n *  (**i.e.** ``0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141n``)\n */\nexport const N: bigint = BigInt(\"0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\");\n\n/**\n *  A constant for the number of wei in a single ether.\n *\n *  (**i.e.** ``1000000000000000000n``)\n */\nexport const WeiPerEther: bigint = BigInt(\"1000000000000000000\");\n\n/**\n *  A constant for the maximum value for a ``uint256``.\n *\n *  (**i.e.** ``0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffn``)\n */\nexport const MaxUint256: bigint = BigInt(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n\n/**\n *  A constant for the minimum value for an ``int256``.\n *\n *  (**i.e.** ``-8000000000000000000000000000000000000000000000000000000000000000n``)\n */\nexport const MinInt256: bigint = BigInt(\"0x8000000000000000000000000000000000000000000000000000000000000000\") * BigInt(-1);\n\n/**\n *  A constant for the maximum value for an ``int256``.\n *\n *  (**i.e.** ``0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffn``)\n */\nexport const MaxInt256: bigint = BigInt(\"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n","// NFKC (composed)             // (decomposed)\n\n/**\n *  A constant for the ether symbol (normalized using NFKC).\n *\n *  (**i.e.** ``\"\\\\u039e\"``)\n */\nexport const EtherSymbol: string = \"\\u039e\";  // \"\\uD835\\uDF63\";\n\n\n/**\n *  A constant for the [[link-eip-191]] personal message prefix.\n *\n *  (**i.e.** ``\"\\\\x19Ethereum Signed Message:\\\\n\"``)\n */\nexport const MessagePrefix: string = \"\\x19Ethereum Signed Message:\\n\";\n","\nimport { Interface } from \"../abi/index.js\";\nimport { getCreateAddress } from \"../address/index.js\";\nimport {\n    concat, defineProperties, getBytes, hexlify,\n    assert, assertArgument\n} from \"../utils/index.js\";\n\nimport { BaseContract, copyOverrides, resolveArgs } from \"./contract.js\";\n\nimport type { InterfaceAbi } from \"../abi/index.js\";\nimport type { Addressable } from \"../address/index.js\";\nimport type { ContractRunner } from \"../providers/index.js\";\nimport type { BytesLike } from \"../utils/index.js\";\n\nimport type {\n    ContractInterface, ContractMethodArgs, ContractDeployTransaction,\n} from \"./types.js\";\nimport type { ContractTransactionResponse } from \"./wrappers.js\";\n\n\n// A = Arguments to the constructor\n// I = Interface of deployed contracts\n\n/**\n *  A **ContractFactory** is used to deploy a Contract to the blockchain.\n */\nexport class ContractFactory<A extends Array<any> = Array<any>, I = BaseContract> {\n\n    /**\n     *  The Contract Interface.\n     */\n    readonly interface!: Interface;\n\n    /**\n     *  The Contract deployment bytecode. Often called the initcode.\n     */\n    readonly bytecode!: string;\n\n    /**\n     *  The ContractRunner to deploy the Contract as.\n     */\n    readonly runner!: null | ContractRunner;\n\n    /**\n     *  Create a new **ContractFactory** with %%abi%% and %%bytecode%%,\n     *  optionally connected to %%runner%%.\n     *\n     *  The %%bytecode%% may be the ``bytecode`` property within the\n     *  standard Solidity JSON output.\n     */\n    constructor(abi: Interface | InterfaceAbi, bytecode: BytesLike | { object: string }, runner?: null | ContractRunner) {\n        const iface = Interface.from(abi);\n\n        // Dereference Solidity bytecode objects and allow a missing `0x`-prefix\n        if (bytecode instanceof Uint8Array) {\n            bytecode = hexlify(getBytes(bytecode));\n        } else {\n            if (typeof(bytecode) === \"object\") { bytecode = bytecode.object; }\n            if (!bytecode.startsWith(\"0x\")) { bytecode = \"0x\" + bytecode; }\n            bytecode = hexlify(getBytes(bytecode));\n        }\n\n        defineProperties<ContractFactory>(this, {\n            bytecode, interface: iface, runner: (runner || null)\n        });\n    }\n\n    attach(target: string | Addressable): BaseContract & Omit<I, keyof BaseContract> {\n        return new (<any>BaseContract)(target, this.interface, this.runner);\n    }\n\n    /**\n     *  Resolves to the transaction to deploy the contract, passing %%args%%\n     *  into the constructor.\n     */\n    async getDeployTransaction(...args: ContractMethodArgs<A>): Promise<ContractDeployTransaction> {\n        let overrides: Omit<ContractDeployTransaction, \"data\"> = { };\n\n        const fragment = this.interface.deploy;\n\n        if (fragment.inputs.length + 1 === args.length) {\n            overrides = await copyOverrides(args.pop());\n        }\n\n        if (fragment.inputs.length !== args.length) {\n            throw new Error(\"incorrect number of arguments to constructor\");\n        }\n\n        const resolvedArgs = await resolveArgs(this.runner, fragment.inputs, args);\n\n        const data = concat([ this.bytecode, this.interface.encodeDeploy(resolvedArgs) ]);\n        return Object.assign({ }, overrides, { data });\n    }\n\n    /**\n     *  Resolves to the Contract deployed by passing %%args%% into the\n     *  constructor.\n     *\n     *  This will resolve to the Contract before it has been deployed to the\n     *  network, so the [[BaseContract-waitForDeployment]] should be used before\n     *  sending any transactions to it.\n     */\n    async deploy(...args: ContractMethodArgs<A>): Promise<BaseContract & { deploymentTransaction(): ContractTransactionResponse } & Omit<I, keyof BaseContract>> {\n        const tx = await this.getDeployTransaction(...args);\n\n        assert(this.runner && typeof(this.runner.sendTransaction) === \"function\",\n            \"factory runner does not support sending transactions\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"sendTransaction\" });\n\n        const sentTx = await this.runner.sendTransaction(tx);\n        const address = getCreateAddress(sentTx);\n        return new (<any>BaseContract)(address, this.interface, this.runner, sentTx);\n    }\n\n    /**\n     *  Return a new **ContractFactory** with the same ABI and bytecode,\n     *  but connected to %%runner%%.\n     */\n    connect(runner: null | ContractRunner): ContractFactory<A, I> {\n        return new ContractFactory(this.interface, this.bytecode, runner);\n    }\n\n    /**\n     *  Create a new **ContractFactory** from the standard Solidity JSON output.\n     */\n    static fromSolidity<A extends Array<any> = Array<any>, I = ContractInterface>(output: any, runner?: ContractRunner): ContractFactory<A, I> {\n        assertArgument(output != null, \"bad compiler output\", \"output\", output);\n\n        if (typeof(output) === \"string\") { output = JSON.parse(output); }\n\n        const abi = output.abi;\n\n        let bytecode = \"\";\n        if (output.bytecode) {\n            bytecode = output.bytecode;\n        } else if (output.evm && output.evm.bytecode) {\n            bytecode = output.evm.bytecode;\n        }\n\n        return new this(abi, bytecode, runner);\n    }\n}\n","/**\n *  An **HMAC** enables verification that a given key was used\n *  to authenticate a payload.\n *\n *  See: [[link-wiki-hmac]]\n *\n *  @_subsection: api/crypto:HMAC  [about-hmac]\n */\nimport { createHmac } from \"./crypto.js\";\nimport { getBytes, hexlify } from \"../utils/index.js\";\n\nimport type { BytesLike } from \"../utils/index.js\";\n\n\nlet locked = false;\n\nconst _computeHmac = function(algorithm: \"sha256\" | \"sha512\", key: Uint8Array, data: Uint8Array): BytesLike {\n    return createHmac(algorithm, key).update(data).digest();\n}\n\nlet __computeHmac = _computeHmac;\n\n/**\n *  Return the HMAC for %%data%% using the %%key%% key with the underlying\n *  %%algo%% used for compression.\n *\n *  @example:\n *    key = id(\"some-secret\")\n *\n *    // Compute the HMAC\n *    computeHmac(\"sha256\", key, \"0x1337\")\n *    //_result:\n *\n *    // To compute the HMAC of UTF-8 data, the data must be\n *    // converted to UTF-8 bytes\n *    computeHmac(\"sha256\", key, toUtf8Bytes(\"Hello World\"))\n *    //_result:\n *\n */\nexport function computeHmac(algorithm: \"sha256\" | \"sha512\", _key: BytesLike, _data: BytesLike): string {\n    const key = getBytes(_key, \"key\");\n    const data = getBytes(_data, \"data\");\n    return hexlify(__computeHmac(algorithm, key, data));\n}\ncomputeHmac._ = _computeHmac;\ncomputeHmac.lock =  function() { locked = true; }\ncomputeHmac.register = function(func: (algorithm: \"sha256\" | \"sha512\", key: Uint8Array, data: Uint8Array) => BytesLike) {\n    if (locked) { throw new Error(\"computeHmac is locked\"); }\n    __computeHmac = func;\n}\nObject.freeze(computeHmac);\n","import { SHA2 } from './_sha2.js';\nimport { wrapConstructor } from './utils.js';\n\n// https://homes.esat.kuleuven.be/~bosselae/ripemd160.html\n// https://homes.esat.kuleuven.be/~bosselae/ripemd160/pdf/AB-9601/AB-9601.pdf\nconst Rho = /* @__PURE__ */ new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]);\nconst Id = /* @__PURE__ */ Uint8Array.from({ length: 16 }, (_, i) => i);\nconst Pi = /* @__PURE__ */ Id.map((i) => (9 * i + 5) % 16);\nlet idxL = [Id];\nlet idxR = [Pi];\nfor (let i = 0; i < 4; i++) for (let j of [idxL, idxR]) j.push(j[i].map((k) => Rho[k]));\n\nconst shifts = /* @__PURE__ */ [\n  [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],\n  [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],\n  [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],\n  [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],\n  [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5],\n].map((i) => new Uint8Array(i));\nconst shiftsL = /* @__PURE__ */ idxL.map((idx, i) => idx.map((j) => shifts[i][j]));\nconst shiftsR = /* @__PURE__ */ idxR.map((idx, i) => idx.map((j) => shifts[i][j]));\nconst Kl = /* @__PURE__ */ new Uint32Array([\n  0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e,\n]);\nconst Kr = /* @__PURE__ */ new Uint32Array([\n  0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000,\n]);\n// The rotate left (circular left shift) operation for uint32\nconst rotl = (word: number, shift: number) => (word << shift) | (word >>> (32 - shift));\n// It's called f() in spec.\nfunction f(group: number, x: number, y: number, z: number): number {\n  if (group === 0) return x ^ y ^ z;\n  else if (group === 1) return (x & y) | (~x & z);\n  else if (group === 2) return (x | ~y) ^ z;\n  else if (group === 3) return (x & z) | (y & ~z);\n  else return x ^ (y | ~z);\n}\n// Temporary buffer, not used to store anything between runs\nconst BUF = /* @__PURE__ */ new Uint32Array(16);\nexport class RIPEMD160 extends SHA2<RIPEMD160> {\n  private h0 = 0x67452301 | 0;\n  private h1 = 0xefcdab89 | 0;\n  private h2 = 0x98badcfe | 0;\n  private h3 = 0x10325476 | 0;\n  private h4 = 0xc3d2e1f0 | 0;\n\n  constructor() {\n    super(64, 20, 8, true);\n  }\n  protected get(): [number, number, number, number, number] {\n    const { h0, h1, h2, h3, h4 } = this;\n    return [h0, h1, h2, h3, h4];\n  }\n  protected set(h0: number, h1: number, h2: number, h3: number, h4: number) {\n    this.h0 = h0 | 0;\n    this.h1 = h1 | 0;\n    this.h2 = h2 | 0;\n    this.h3 = h3 | 0;\n    this.h4 = h4 | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    for (let i = 0; i < 16; i++, offset += 4) BUF[i] = view.getUint32(offset, true);\n    // prettier-ignore\n    let al = this.h0 | 0, ar = al,\n        bl = this.h1 | 0, br = bl,\n        cl = this.h2 | 0, cr = cl,\n        dl = this.h3 | 0, dr = dl,\n        el = this.h4 | 0, er = el;\n\n    // Instead of iterating 0 to 80, we split it into 5 groups\n    // And use the groups in constants, functions, etc. Much simpler\n    for (let group = 0; group < 5; group++) {\n      const rGroup = 4 - group;\n      const hbl = Kl[group], hbr = Kr[group]; // prettier-ignore\n      const rl = idxL[group], rr = idxR[group]; // prettier-ignore\n      const sl = shiftsL[group], sr = shiftsR[group]; // prettier-ignore\n      for (let i = 0; i < 16; i++) {\n        const tl = (rotl(al + f(group, bl, cl, dl) + BUF[rl[i]] + hbl, sl[i]) + el) | 0;\n        al = el, el = dl, dl = rotl(cl, 10) | 0, cl = bl, bl = tl; // prettier-ignore\n      }\n      // 2 loops are 10% faster\n      for (let i = 0; i < 16; i++) {\n        const tr = (rotl(ar + f(rGroup, br, cr, dr) + BUF[rr[i]] + hbr, sr[i]) + er) | 0;\n        ar = er, er = dr, dr = rotl(cr, 10) | 0, cr = br, br = tr; // prettier-ignore\n      }\n    }\n    // Add the compressed chunk to the current hash value\n    this.set(\n      (this.h1 + cl + dr) | 0,\n      (this.h2 + dl + er) | 0,\n      (this.h3 + el + ar) | 0,\n      (this.h4 + al + br) | 0,\n      (this.h0 + bl + cr) | 0\n    );\n  }\n  protected roundClean() {\n    BUF.fill(0);\n  }\n  destroy() {\n    this.destroyed = true;\n    this.buffer.fill(0);\n    this.set(0, 0, 0, 0, 0);\n  }\n}\n\n/**\n * RIPEMD-160 - a hash function from 1990s.\n * @param message - msg that would be hashed\n */\nexport const ripemd160 = /* @__PURE__ */ wrapConstructor(() => new RIPEMD160());\n","import { ripemd160 as noble_ripemd160 } from \"@noble/hashes/ripemd160\";\n\nimport { getBytes,  hexlify } from \"../utils/index.js\";\n\nimport type { BytesLike } from \"../utils/index.js\";\n\n\nlet locked = false;\n\nconst _ripemd160 = function(data: Uint8Array): Uint8Array {\n    return noble_ripemd160(data);\n}\n\nlet __ripemd160: (data: Uint8Array) => BytesLike = _ripemd160;\n\n/**\n *  Compute the cryptographic RIPEMD-160 hash of %%data%%.\n *\n *  @_docloc: api/crypto:Hash Functions\n *  @returns DataHexstring\n *\n *  @example:\n *    ripemd160(\"0x\")\n *    //_result:\n *\n *    ripemd160(\"0x1337\")\n *    //_result:\n *\n *    ripemd160(new Uint8Array([ 0x13, 0x37 ]))\n *    //_result:\n *\n */\nexport function ripemd160(_data: BytesLike): string {\n    const data = getBytes(_data, \"data\");\n    return hexlify(__ripemd160(data));\n}\nripemd160._ = _ripemd160;\nripemd160.lock = function(): void { locked = true; }\nripemd160.register = function(func: (data: Uint8Array) => BytesLike) {\n    if (locked) { throw new TypeError(\"ripemd160 is locked\"); }\n    __ripemd160 = func;\n}\nObject.freeze(ripemd160);\n","/**\n *  A **Password-Based Key-Derivation Function** is designed to create\n *  a sequence of bytes suitible as a **key** from a human-rememberable\n *  password.\n *\n *  @_subsection: api/crypto:Passwords  [about-pbkdf]\n */\n\nimport { pbkdf2Sync } from \"./crypto.js\";\n\nimport { getBytes, hexlify } from \"../utils/index.js\";\n\nimport type { BytesLike } from \"../utils/index.js\";\n\n\nlet locked = false;\n\nconst _pbkdf2 = function(password: Uint8Array, salt: Uint8Array, iterations: number, keylen: number, algo: \"sha256\" | \"sha512\"): BytesLike {\n    return pbkdf2Sync(password, salt, iterations, keylen, algo);\n}\n\nlet __pbkdf2 = _pbkdf2;\n\n/**\n *  Return the [[link-pbkdf2]] for %%keylen%% bytes for %%password%% using\n *  the %%salt%% and using %%iterations%% of %%algo%%.\n *\n *  This PBKDF is outdated and should not be used in new projects, but is\n *  required to decrypt older files.\n *\n *  @example:\n *    // The password must be converted to bytes, and it is generally\n *    // best practices to ensure the string has been normalized. Many\n *    // formats explicitly indicate the normalization form to use.\n *    password = \"hello\"\n *    passwordBytes = toUtf8Bytes(password, \"NFKC\")\n *\n *    salt = id(\"some-salt\")\n *\n *    // Compute the PBKDF2\n *    pbkdf2(passwordBytes, salt, 1024, 16, \"sha256\")\n *    //_result:\n */\nexport function pbkdf2(_password: BytesLike, _salt: BytesLike, iterations: number, keylen: number, algo: \"sha256\" | \"sha512\"): string {\n    const password = getBytes(_password, \"password\");\n    const salt = getBytes(_salt, \"salt\");\n    return hexlify(__pbkdf2(password, salt, iterations, keylen, algo));\n}\npbkdf2._ = _pbkdf2;\npbkdf2.lock = function(): void { locked = true; }\npbkdf2.register = function(func: (password: Uint8Array, salt: Uint8Array, iterations: number, keylen: number, algo: \"sha256\" | \"sha512\") => BytesLike) {\n    if (locked) { throw new Error(\"pbkdf2 is locked\"); }\n    __pbkdf2 = func;\n}\nObject.freeze(pbkdf2);\n","/**\n *  A **Cryptographically Secure Random Value** is one that has been\n *  generated with additional care take to prevent side-channels\n *  from allowing others to detect it and prevent others from through\n *  coincidence generate the same values.\n *\n *  @_subsection: api/crypto:Random Values  [about-crypto-random]\n */\nimport { randomBytes as crypto_random } from \"./crypto.js\";\n\nlet locked = false;\n\nconst _randomBytes = function(length: number): Uint8Array {\n    return new Uint8Array(crypto_random(length));\n}\n\nlet __randomBytes = _randomBytes;\n\n/**\n *  Return %%length%% bytes of cryptographically secure random data.\n *\n *  @example:\n *    randomBytes(8)\n *    //_result:\n */\nexport function randomBytes(length: number): Uint8Array {\n    return __randomBytes(length);\n}\n\nrandomBytes._ = _randomBytes;\nrandomBytes.lock = function(): void { locked = true; }\nrandomBytes.register = function(func: (length: number) => Uint8Array) {\n    if (locked) { throw new Error(\"randomBytes is locked\"); }\n    __randomBytes = func;\n}\nObject.freeze(randomBytes);\n","import { number as assertNumber } from './_assert.js';\nimport { sha256 } from './sha256.js';\nimport { pbkdf2 } from './pbkdf2.js';\nimport { asyncLoop, checkOpts, Input, u32 } from './utils.js';\n\n// RFC 7914 Scrypt KDF\n\n// Left rotate for uint32\nconst rotl = (a: number, b: number) => (a << b) | (a >>> (32 - b));\n\n// The main Scrypt loop: uses Salsa extensively.\n// Six versions of the function were tried, this is the fastest one.\n// prettier-ignore\nfunction XorAndSalsa(\n  prev: Uint32Array,\n  pi: number,\n  input: Uint32Array,\n  ii: number,\n  out: Uint32Array,\n  oi: number\n) {\n  // Based on https://cr.yp.to/salsa20.html\n  // Xor blocks\n  let y00 = prev[pi++] ^ input[ii++], y01 = prev[pi++] ^ input[ii++];\n  let y02 = prev[pi++] ^ input[ii++], y03 = prev[pi++] ^ input[ii++];\n  let y04 = prev[pi++] ^ input[ii++], y05 = prev[pi++] ^ input[ii++];\n  let y06 = prev[pi++] ^ input[ii++], y07 = prev[pi++] ^ input[ii++];\n  let y08 = prev[pi++] ^ input[ii++], y09 = prev[pi++] ^ input[ii++];\n  let y10 = prev[pi++] ^ input[ii++], y11 = prev[pi++] ^ input[ii++];\n  let y12 = prev[pi++] ^ input[ii++], y13 = prev[pi++] ^ input[ii++];\n  let y14 = prev[pi++] ^ input[ii++], y15 = prev[pi++] ^ input[ii++];\n  // Save state to temporary variables (salsa)\n  let x00 = y00, x01 = y01, x02 = y02, x03 = y03,\n      x04 = y04, x05 = y05, x06 = y06, x07 = y07,\n      x08 = y08, x09 = y09, x10 = y10, x11 = y11,\n      x12 = y12, x13 = y13, x14 = y14, x15 = y15;\n  // Main loop (salsa)\n  for (let i = 0; i < 8; i += 2) {\n    x04 ^= rotl(x00 + x12 | 0,  7); x08 ^= rotl(x04 + x00 | 0,  9);\n    x12 ^= rotl(x08 + x04 | 0, 13); x00 ^= rotl(x12 + x08 | 0, 18);\n    x09 ^= rotl(x05 + x01 | 0,  7); x13 ^= rotl(x09 + x05 | 0,  9);\n    x01 ^= rotl(x13 + x09 | 0, 13); x05 ^= rotl(x01 + x13 | 0, 18);\n    x14 ^= rotl(x10 + x06 | 0,  7); x02 ^= rotl(x14 + x10 | 0,  9);\n    x06 ^= rotl(x02 + x14 | 0, 13); x10 ^= rotl(x06 + x02 | 0, 18);\n    x03 ^= rotl(x15 + x11 | 0,  7); x07 ^= rotl(x03 + x15 | 0,  9);\n    x11 ^= rotl(x07 + x03 | 0, 13); x15 ^= rotl(x11 + x07 | 0, 18);\n    x01 ^= rotl(x00 + x03 | 0,  7); x02 ^= rotl(x01 + x00 | 0,  9);\n    x03 ^= rotl(x02 + x01 | 0, 13); x00 ^= rotl(x03 + x02 | 0, 18);\n    x06 ^= rotl(x05 + x04 | 0,  7); x07 ^= rotl(x06 + x05 | 0,  9);\n    x04 ^= rotl(x07 + x06 | 0, 13); x05 ^= rotl(x04 + x07 | 0, 18);\n    x11 ^= rotl(x10 + x09 | 0,  7); x08 ^= rotl(x11 + x10 | 0,  9);\n    x09 ^= rotl(x08 + x11 | 0, 13); x10 ^= rotl(x09 + x08 | 0, 18);\n    x12 ^= rotl(x15 + x14 | 0,  7); x13 ^= rotl(x12 + x15 | 0,  9);\n    x14 ^= rotl(x13 + x12 | 0, 13); x15 ^= rotl(x14 + x13 | 0, 18);\n  }\n  // Write output (salsa)\n  out[oi++] = (y00 + x00) | 0; out[oi++] = (y01 + x01) | 0;\n  out[oi++] = (y02 + x02) | 0; out[oi++] = (y03 + x03) | 0;\n  out[oi++] = (y04 + x04) | 0; out[oi++] = (y05 + x05) | 0;\n  out[oi++] = (y06 + x06) | 0; out[oi++] = (y07 + x07) | 0;\n  out[oi++] = (y08 + x08) | 0; out[oi++] = (y09 + x09) | 0;\n  out[oi++] = (y10 + x10) | 0; out[oi++] = (y11 + x11) | 0;\n  out[oi++] = (y12 + x12) | 0; out[oi++] = (y13 + x13) | 0;\n  out[oi++] = (y14 + x14) | 0; out[oi++] = (y15 + x15) | 0;\n}\n\nfunction BlockMix(input: Uint32Array, ii: number, out: Uint32Array, oi: number, r: number) {\n  // The block B is r 128-byte chunks (which is equivalent of 2r 64-byte chunks)\n  let head = oi + 0;\n  let tail = oi + 16 * r;\n  for (let i = 0; i < 16; i++) out[tail + i] = input[ii + (2 * r - 1) * 16 + i]; // X ← B[2r−1]\n  for (let i = 0; i < r; i++, head += 16, ii += 16) {\n    // We write odd & even Yi at same time. Even: 0bXXXXX0 Odd:  0bXXXXX1\n    XorAndSalsa(out, tail, input, ii, out, head); // head[i] = Salsa(blockIn[2*i] ^ tail[i-1])\n    if (i > 0) tail += 16; // First iteration overwrites tmp value in tail\n    XorAndSalsa(out, head, input, (ii += 16), out, tail); // tail[i] = Salsa(blockIn[2*i+1] ^ head[i])\n  }\n}\n\nexport type ScryptOpts = {\n  N: number; // cost factor\n  r: number; // block size\n  p: number; // parallelization\n  dkLen?: number; // key length\n  asyncTick?: number; // block execution max time\n  maxmem?: number;\n  onProgress?: (progress: number) => void;\n};\n\n// Common prologue and epilogue for sync/async functions\nfunction scryptInit(password: Input, salt: Input, _opts?: ScryptOpts) {\n  // Maxmem - 1GB+1KB by default\n  const opts = checkOpts(\n    {\n      dkLen: 32,\n      asyncTick: 10,\n      maxmem: 1024 ** 3 + 1024,\n    },\n    _opts\n  );\n  const { N, r, p, dkLen, asyncTick, maxmem, onProgress } = opts;\n  assertNumber(N);\n  assertNumber(r);\n  assertNumber(p);\n  assertNumber(dkLen);\n  assertNumber(asyncTick);\n  assertNumber(maxmem);\n  if (onProgress !== undefined && typeof onProgress !== 'function')\n    throw new Error('progressCb should be function');\n  const blockSize = 128 * r;\n  const blockSize32 = blockSize / 4;\n  if (N <= 1 || (N & (N - 1)) !== 0 || N >= 2 ** (blockSize / 8) || N > 2 ** 32) {\n    // NOTE: we limit N to be less than 2**32 because of 32 bit variant of Integrify function\n    // There is no JS engines that allows alocate more than 4GB per single Uint8Array for now, but can change in future.\n    throw new Error(\n      'Scrypt: N must be larger than 1, a power of 2, less than 2^(128 * r / 8) and less than 2^32'\n    );\n  }\n  if (p < 0 || p > ((2 ** 32 - 1) * 32) / blockSize) {\n    throw new Error(\n      'Scrypt: p must be a positive integer less than or equal to ((2^32 - 1) * 32) / (128 * r)'\n    );\n  }\n  if (dkLen < 0 || dkLen > (2 ** 32 - 1) * 32) {\n    throw new Error(\n      'Scrypt: dkLen should be positive integer less than or equal to (2^32 - 1) * 32'\n    );\n  }\n  const memUsed = blockSize * (N + p);\n  if (memUsed > maxmem) {\n    throw new Error(\n      `Scrypt: parameters too large, ${memUsed} (128 * r * (N + p)) > ${maxmem} (maxmem)`\n    );\n  }\n  // [B0...Bp−1] ← PBKDF2HMAC-SHA256(Passphrase, Salt, 1, blockSize*ParallelizationFactor)\n  // Since it has only one iteration there is no reason to use async variant\n  const B = pbkdf2(sha256, password, salt, { c: 1, dkLen: blockSize * p });\n  const B32 = u32(B);\n  // Re-used between parallel iterations. Array(iterations) of B\n  const V = u32(new Uint8Array(blockSize * N));\n  const tmp = u32(new Uint8Array(blockSize));\n  let blockMixCb = () => {};\n  if (onProgress) {\n    const totalBlockMix = 2 * N * p;\n    // Invoke callback if progress changes from 10.01 to 10.02\n    // Allows to draw smooth progress bar on up to 8K screen\n    const callbackPer = Math.max(Math.floor(totalBlockMix / 10000), 1);\n    let blockMixCnt = 0;\n    blockMixCb = () => {\n      blockMixCnt++;\n      if (onProgress && (!(blockMixCnt % callbackPer) || blockMixCnt === totalBlockMix))\n        onProgress(blockMixCnt / totalBlockMix);\n    };\n  }\n  return { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick };\n}\n\nfunction scryptOutput(\n  password: Input,\n  dkLen: number,\n  B: Uint8Array,\n  V: Uint32Array,\n  tmp: Uint32Array\n) {\n  const res = pbkdf2(sha256, password, B, { c: 1, dkLen });\n  B.fill(0);\n  V.fill(0);\n  tmp.fill(0);\n  return res;\n}\n\n/**\n * Scrypt KDF from RFC 7914.\n * @param password - pass\n * @param salt - salt\n * @param opts - parameters\n * - `N` is cpu/mem work factor (power of 2 e.g. 2**18)\n * - `r` is block size (8 is common), fine-tunes sequential memory read size and performance\n * - `p` is parallelization factor (1 is common)\n * - `dkLen` is output key length in bytes e.g. 32.\n * - `asyncTick` - (default: 10) max time in ms for which async function can block execution\n * - `maxmem` - (default: `1024 ** 3 + 1024` aka 1GB+1KB). A limit that the app could use for scrypt\n * - `onProgress` - callback function that would be executed for progress report\n * @returns Derived key\n */\nexport function scrypt(password: Input, salt: Input, opts: ScryptOpts) {\n  const { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb } = scryptInit(\n    password,\n    salt,\n    opts\n  );\n  for (let pi = 0; pi < p; pi++) {\n    const Pi = blockSize32 * pi;\n    for (let i = 0; i < blockSize32; i++) V[i] = B32[Pi + i]; // V[0] = B[i]\n    for (let i = 0, pos = 0; i < N - 1; i++) {\n      BlockMix(V, pos, V, (pos += blockSize32), r); // V[i] = BlockMix(V[i-1]);\n      blockMixCb();\n    }\n    BlockMix(V, (N - 1) * blockSize32, B32, Pi, r); // Process last element\n    blockMixCb();\n    for (let i = 0; i < N; i++) {\n      // First u32 of the last 64-byte block (u32 is LE)\n      const j = B32[Pi + blockSize32 - 16] % N; // j = Integrify(X) % iterations\n      for (let k = 0; k < blockSize32; k++) tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k]; // tmp = B ^ V[j]\n      BlockMix(tmp, 0, B32, Pi, r); // B = BlockMix(B ^ V[j])\n      blockMixCb();\n    }\n  }\n  return scryptOutput(password, dkLen, B, V, tmp);\n}\n\n/**\n * Scrypt KDF from RFC 7914.\n */\nexport async function scryptAsync(password: Input, salt: Input, opts: ScryptOpts) {\n  const { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick } = scryptInit(\n    password,\n    salt,\n    opts\n  );\n  for (let pi = 0; pi < p; pi++) {\n    const Pi = blockSize32 * pi;\n    for (let i = 0; i < blockSize32; i++) V[i] = B32[Pi + i]; // V[0] = B[i]\n    let pos = 0;\n    await asyncLoop(N - 1, asyncTick, () => {\n      BlockMix(V, pos, V, (pos += blockSize32), r); // V[i] = BlockMix(V[i-1]);\n      blockMixCb();\n    });\n    BlockMix(V, (N - 1) * blockSize32, B32, Pi, r); // Process last element\n    blockMixCb();\n    await asyncLoop(N, asyncTick, () => {\n      // First u32 of the last 64-byte block (u32 is LE)\n      const j = B32[Pi + blockSize32 - 16] % N; // j = Integrify(X) % iterations\n      for (let k = 0; k < blockSize32; k++) tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k]; // tmp = B ^ V[j]\n      BlockMix(tmp, 0, B32, Pi, r); // B = BlockMix(B ^ V[j])\n      blockMixCb();\n    });\n  }\n  return scryptOutput(password, dkLen, B, V, tmp);\n}\n","import { scrypt as _nobleSync, scryptAsync as _nobleAsync } from \"@noble/hashes/scrypt\";\n\nimport { getBytes, hexlify as H } from \"../utils/index.js\";\n\nimport type { BytesLike } from \"../utils/index.js\";\n\n/**\n *  A callback during long-running operations to update any\n *  UI or provide programatic access to the progress.\n *\n *  The %%percent%% is a value between ``0`` and ``1``.\n *\n *  @_docloc: api/crypto:Passwords\n */\nexport type ProgressCallback = (percent: number) => void;\n\n\nlet lockedSync = false, lockedAsync = false;\n\nconst _scryptAsync = async function(passwd: Uint8Array, salt: Uint8Array, N: number, r: number, p: number, dkLen: number, onProgress?: ProgressCallback) {\n    return await _nobleAsync(passwd, salt, { N, r, p, dkLen, onProgress });\n}\nconst _scryptSync = function(passwd: Uint8Array, salt: Uint8Array, N: number, r: number, p: number, dkLen: number) {\n    return _nobleSync(passwd, salt, { N, r, p, dkLen });\n}\n\nlet __scryptAsync: (passwd: Uint8Array, salt: Uint8Array, N: number, r: number, p: number, dkLen: number, onProgress?: ProgressCallback) => Promise<BytesLike> = _scryptAsync;\nlet __scryptSync: (passwd: Uint8Array, salt: Uint8Array, N: number, r: number, p: number, dkLen: number) => BytesLike = _scryptSync\n\n\n/**\n *  The [[link-wiki-scrypt]] uses a memory and cpu hard method of\n *  derivation to increase the resource cost to brute-force a password\n *  for a given key.\n *\n *  This means this algorithm is intentionally slow, and can be tuned to\n *  become slower. As computation and memory speed improve over time,\n *  increasing the difficulty maintains the cost of an attacker.\n *\n *  For example, if a target time of 5 seconds is used, a legitimate user\n *  which knows their password requires only 5 seconds to unlock their\n *  account. A 6 character password has 68 billion possibilities, which\n *  would require an attacker to invest over 10,000 years of CPU time. This\n *  is of course a crude example (as password generally aren't random),\n *  but demonstrates to value of imposing large costs to decryption.\n *\n *  For this reason, if building a UI which involved decrypting or\n *  encrypting datsa using scrypt, it is recommended to use a\n *  [[ProgressCallback]] (as event short periods can seem lik an eternity\n *  if the UI freezes). Including the phrase //\"decrypting\"// in the UI\n *  can also help, assuring the user their waiting is for a good reason.\n *\n *  @_docloc: api/crypto:Passwords\n *\n *  @example:\n *    // The password must be converted to bytes, and it is generally\n *    // best practices to ensure the string has been normalized. Many\n *    // formats explicitly indicate the normalization form to use.\n *    password = \"hello\"\n *    passwordBytes = toUtf8Bytes(password, \"NFKC\")\n *\n *    salt = id(\"some-salt\")\n *\n *    // Compute the scrypt\n *    scrypt(passwordBytes, salt, 1024, 8, 1, 16)\n *    //_result:\n */\nexport async function scrypt(_passwd: BytesLike, _salt: BytesLike, N: number, r: number, p: number, dkLen: number, progress?: ProgressCallback): Promise<string> {\n    const passwd = getBytes(_passwd, \"passwd\");\n    const salt = getBytes(_salt, \"salt\");\n    return H(await __scryptAsync(passwd, salt, N, r, p, dkLen, progress));\n}\nscrypt._ = _scryptAsync;\nscrypt.lock = function(): void { lockedAsync = true; }\nscrypt.register = function(func: (passwd: Uint8Array, salt: Uint8Array, N: number, r: number, p: number, dkLen: number, progress?: ProgressCallback) => Promise<BytesLike>) {\n    if (lockedAsync) { throw new Error(\"scrypt is locked\"); }\n    __scryptAsync = func;\n}\nObject.freeze(scrypt);\n\n/**\n *  Provides a synchronous variant of [[scrypt]].\n *\n *  This will completely lock up and freeze the UI in a browser and will\n *  prevent any event loop from progressing. For this reason, it is\n *  preferred to use the [async variant](scrypt).\n *\n *  @_docloc: api/crypto:Passwords\n *\n *  @example:\n *    // The password must be converted to bytes, and it is generally\n *    // best practices to ensure the string has been normalized. Many\n *    // formats explicitly indicate the normalization form to use.\n *    password = \"hello\"\n *    passwordBytes = toUtf8Bytes(password, \"NFKC\")\n *\n *    salt = id(\"some-salt\")\n *\n *    // Compute the scrypt\n *    scryptSync(passwordBytes, salt, 1024, 8, 1, 16)\n *    //_result:\n */\nexport function scryptSync(_passwd: BytesLike, _salt: BytesLike, N: number, r: number, p: number, dkLen: number): string {\n    const passwd = getBytes(_passwd, \"passwd\");\n    const salt = getBytes(_salt, \"salt\");\n    return H(__scryptSync(passwd, salt, N, r, p, dkLen));\n}\nscryptSync._ = _scryptSync;\nscryptSync.lock = function(): void { lockedSync = true; }\nscryptSync.register = function(func: (passwd: Uint8Array, salt: Uint8Array, N: number, r: number, p: number, dkLen: number) => BytesLike) {\n    if (lockedSync) { throw new Error(\"scryptSync is locked\"); }\n    __scryptSync = func;\n}\nObject.freeze(scryptSync);\n","/**\n *  A fundamental building block of Ethereum is the underlying\n *  cryptographic primitives.\n *\n *  @_section: api/crypto:Cryptographic Functions   [about-crypto]\n */\n\nnull\n\n// We import all these so we can export lock()\nimport { computeHmac } from \"./hmac.js\";\nimport { keccak256 } from \"./keccak.js\";\nimport { ripemd160 } from \"./ripemd160.js\";\nimport { pbkdf2 } from \"./pbkdf2.js\";\nimport { randomBytes } from \"./random.js\";\nimport { scrypt, scryptSync } from \"./scrypt.js\";\nimport { sha256, sha512 } from \"./sha2.js\";\n\nexport {\n    computeHmac,\n\n    randomBytes,\n\n    keccak256,\n    ripemd160,\n    sha256, sha512,\n\n    pbkdf2,\n    scrypt, scryptSync\n};\n\nexport { SigningKey } from \"./signing-key.js\";\nexport { Signature } from \"./signature.js\";\n\n/**\n *  Once called, prevents any future change to the underlying cryptographic\n *  primitives using the ``.register`` feature for hooks.\n */\nfunction lock(): void {\n    computeHmac.lock();\n    keccak256.lock();\n    pbkdf2.lock();\n    randomBytes.lock();\n    ripemd160.lock();\n    scrypt.lock();\n    scryptSync.lock();\n    sha256.lock();\n    sha512.lock();\n    randomBytes.lock();\n}\n\nexport { lock };\n\n/////////////////////////////\n// Types\n\nexport type { ProgressCallback } from \"./scrypt.js\";\n\nexport type { SignatureLike } from \"./signature.js\";\n","import { getAddress } from \"../address/index.js\";\nimport { keccak256 } from \"../crypto/index.js\";\nimport { recoverAddress } from \"../transaction/index.js\";\nimport {\n    assertArgument, concat, encodeRlp, toBeArray\n} from \"../utils/index.js\";\n\nimport type { Addressable } from \"../address/index.js\";\nimport type { SignatureLike } from \"../crypto/index.js\";\nimport type { BigNumberish, Numeric } from \"../utils/index.js\";\n\nexport interface AuthorizationRequest {\n    address: string | Addressable;\n    nonce?: Numeric;\n    chainId?: BigNumberish;\n}\n\n/**\n *  Computes the [[link-eip-7702]] authorization digest to sign.\n */\nexport function hashAuthorization(auth: AuthorizationRequest): string {\n    assertArgument(typeof(auth.address) === \"string\", \"invalid address for hashAuthorization\", \"auth.address\", auth);\n    return keccak256(concat([\n        \"0x05\", encodeRlp([\n            (auth.chainId != null) ? toBeArray(auth.chainId): \"0x\",\n            getAddress(auth.address),\n            (auth.nonce != null) ? toBeArray(auth.nonce): \"0x\",\n        ])\n    ]));\n}\n\n/**\n *  Return the address of the private key that produced\n *  the signature %%sig%% during signing for %%message%%.\n */\nexport function verifyAuthorization(auth: AuthorizationRequest, sig: SignatureLike): string {\n    return recoverAddress(hashAuthorization(auth), sig);\n}\n","import { keccak256 } from \"../crypto/index.js\";\nimport { MessagePrefix } from \"../constants/index.js\";\nimport { recoverAddress } from \"../transaction/index.js\";\nimport { concat, toUtf8Bytes } from \"../utils/index.js\";\n\nimport type { SignatureLike } from \"../crypto/index.js\";\n/**\n *  Computes the [[link-eip-191]] personal-sign message digest to sign.\n *\n *  This prefixes the message with [[MessagePrefix]] and the decimal length\n *  of %%message%% and computes the [[keccak256]] digest.\n *\n *  If %%message%% is a string, it is converted to its UTF-8 bytes\n *  first. To compute the digest of a [[DataHexString]], it must be converted\n *  to [bytes](getBytes).\n *\n *  @example:\n *    hashMessage(\"Hello World\")\n *    //_result:\n *\n *    // Hashes the SIX (6) string characters, i.e.\n *    // [ \"0\", \"x\", \"4\", \"2\", \"4\", \"3\" ]\n *    hashMessage(\"0x4243\")\n *    //_result:\n *\n *    // Hashes the TWO (2) bytes [ 0x42, 0x43 ]...\n *    hashMessage(getBytes(\"0x4243\"))\n *    //_result:\n *\n *    // ...which is equal to using data\n *    hashMessage(new Uint8Array([ 0x42, 0x43 ]))\n *    //_result:\n *\n */\nexport function hashMessage(message: Uint8Array | string): string {\n    if (typeof(message) === \"string\") { message = toUtf8Bytes(message); }\n    return keccak256(concat([\n        toUtf8Bytes(MessagePrefix),\n        toUtf8Bytes(String(message.length)),\n        message\n    ]));\n}\n\n/**\n *  Return the address of the private key that produced\n *  the signature %%sig%% during signing for %%message%%.\n */\nexport function verifyMessage(message: Uint8Array | string, sig: SignatureLike): string {\n    const digest = hashMessage(message);\n    return recoverAddress(digest, sig);\n}\n","import { getAddress } from \"../address/index.js\";\nimport {\n    keccak256 as _keccak256, sha256 as _sha256\n} from \"../crypto/index.js\";\nimport {\n    concat, dataLength, getBytes, hexlify, toBeArray, toTwos, toUtf8Bytes, zeroPadBytes, zeroPadValue,\n    assertArgument\n} from \"../utils/index.js\";\n\n\nconst regexBytes = new RegExp(\"^bytes([0-9]+)$\");\nconst regexNumber = new RegExp(\"^(u?int)([0-9]*)$\");\nconst regexArray = new RegExp(\"^(.*)\\\\[([0-9]*)\\\\]$\");\n\n\nfunction _pack(type: string, value: any, isArray?: boolean): Uint8Array {\n    switch(type) {\n        case \"address\":\n            if (isArray) { return getBytes(zeroPadValue(value, 32)); }\n            return getBytes(getAddress(value));\n        case \"string\":\n            return toUtf8Bytes(value);\n        case \"bytes\":\n            return getBytes(value);\n        case \"bool\":\n            value = (!!value ? \"0x01\": \"0x00\");\n            if (isArray) { return getBytes(zeroPadValue(value, 32)); }\n            return getBytes(value);\n    }\n\n    let match =  type.match(regexNumber);\n    if (match) {\n        let signed = (match[1] === \"int\");\n        let size = parseInt(match[2] || \"256\")\n\n        assertArgument((!match[2] || match[2] === String(size)) && (size % 8 === 0) && size !== 0 && size <= 256, \"invalid number type\", \"type\", type);\n\n        if (isArray) { size = 256; }\n\n        if (signed) { value = toTwos(value, size); }\n\n        return getBytes(zeroPadValue(toBeArray(value), size / 8));\n    }\n\n    match = type.match(regexBytes);\n    if (match) {\n        const size = parseInt(match[1]);\n\n        assertArgument(String(size) === match[1] && size !== 0 && size <= 32, \"invalid bytes type\", \"type\", type);\n        assertArgument(dataLength(value) === size, `invalid value for ${ type }`, \"value\", value);\n\n        if (isArray) { return getBytes(zeroPadBytes(value, 32)); }\n        return value;\n    }\n\n    match = type.match(regexArray);\n    if (match && Array.isArray(value)) {\n        const baseType = match[1];\n        const count = parseInt(match[2] || String(value.length));\n        assertArgument(count === value.length, `invalid array length for ${ type }`, \"value\", value);\n\n        const result: Array<Uint8Array> = [];\n        value.forEach(function(value) {\n            result.push(_pack(baseType, value, true));\n        });\n        return getBytes(concat(result));\n    }\n\n    assertArgument(false, \"invalid type\", \"type\", type)\n}\n\n// @TODO: Array Enum\n\n/**\n *   Computes the [[link-solc-packed]] representation of %%values%%\n *   respectively to their %%types%%.\n *\n *   @example:\n *       addr = \"0x8ba1f109551bd432803012645ac136ddd64dba72\"\n *       solidityPacked([ \"address\", \"uint\" ], [ addr, 45 ]);\n *       //_result:\n */\nexport function solidityPacked(types: ReadonlyArray<string>, values: ReadonlyArray<any>): string {\n    assertArgument(types.length === values.length, \"wrong number of values; expected ${ types.length }\", \"values\", values);\n\n    const tight: Array<Uint8Array> = [];\n    types.forEach(function(type, index) {\n        tight.push(_pack(type, values[index]));\n    });\n    return hexlify(concat(tight));\n}\n\n/**\n *   Computes the [[link-solc-packed]] [[keccak256]] hash of %%values%%\n *   respectively to their %%types%%.\n *\n *   @example:\n *       addr = \"0x8ba1f109551bd432803012645ac136ddd64dba72\"\n *       solidityPackedKeccak256([ \"address\", \"uint\" ], [ addr, 45 ]);\n *       //_result:\n */\nexport function solidityPackedKeccak256(types: ReadonlyArray<string>, values: ReadonlyArray<any>): string {\n    return _keccak256(solidityPacked(types, values));\n}\n\n/**\n *   Computes the [[link-solc-packed]] [[sha256]] hash of %%values%%\n *   respectively to their %%types%%.\n *\n *   @example:\n *       addr = \"0x8ba1f109551bd432803012645ac136ddd64dba72\"\n *       solidityPackedSha256([ \"address\", \"uint\" ], [ addr, 45 ]);\n *       //_result:\n */\nexport function solidityPackedSha256(types: ReadonlyArray<string>, values: ReadonlyArray<any>): string {\n    return _sha256(solidityPacked(types, values));\n}\n","/**\n *  There are many awesome community services that provide Ethereum\n *  nodes both for developers just starting out and for large-scale\n *  communities.\n *\n *  @_section: api/providers/thirdparty: Community Providers  [thirdparty]\n */\n\n/**\n *  Providers which offer community credentials should extend this\n *  to notify any interested consumers whether community credentials\n *  are in-use.\n */\nexport interface CommunityResourcable {\n    /**\n     *  Returns true if the instance is connected using the community\n     *  credentials.\n     */\n    isCommunityResource(): boolean;\n}\n\n// Show the throttle message only once per service\nconst shown: Set<string> = new Set();\n\n/**\n *  Displays a warning in the console when the community resource is\n *  being used too heavily by the app, recommending the developer\n *  acquire their own credentials instead of using the community\n *  credentials.\n *\n *  The notification will only occur once per service.\n */\nexport function showThrottleMessage(service: string): void {\n    if (shown.has(service)) { return; }\n    shown.add(service);\n\n    console.log(\"========= NOTICE =========\")\n    console.log(`Request-Rate Exceeded for ${ service } (this message will not be repeated)`);\n    console.log(\"\");\n    console.log(\"The default API keys for each service are provided as a highly-throttled,\");\n    console.log(\"community resource for low-traffic projects and early prototyping.\");\n    console.log(\"\");\n    console.log(\"While your application will continue to function, we highly recommended\");\n    console.log(\"signing up for your own API keys to improve performance, increase your\");\n    console.log(\"request rate/limit and enable other perks, such as metrics and advanced APIs.\");\n    console.log(\"\");\n    console.log(\"For more details: https:/\\/docs.ethers.org/api-keys/\");\n    console.log(\"==========================\");\n}\n","/**\n *  [[link-ankr]] provides a third-party service for connecting to\n *  various blockchains over JSON-RPC.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Goerli Testnet (``goerli``)\n *  - Sepolia Testnet (``sepolia``)\n *  - Arbitrum (``arbitrum``)\n *  - Base (``base``)\n *  - Base Goerlia Testnet (``base-goerli``)\n *  - Base Sepolia Testnet (``base-sepolia``)\n *  - BNB (``bnb``)\n *  - BNB Testnet (``bnbt``)\n *  - Optimism (``optimism``)\n *  - Optimism Goerli Testnet (``optimism-goerli``)\n *  - Optimism Sepolia Testnet (``optimism-sepolia``)\n *  - Polygon (``matic``)\n *  - Polygon Mumbai Testnet (``matic-mumbai``)\n *\n *  @_subsection: api/providers/thirdparty:Ankr  [providers-ankr]\n */\nimport {\n    defineProperties, FetchRequest, assertArgument\n} from \"../utils/index.js\";\n\nimport { AbstractProvider } from \"./abstract-provider.js\";\nimport { showThrottleMessage } from \"./community.js\";\nimport { Network } from \"./network.js\";\nimport { JsonRpcProvider } from \"./provider-jsonrpc.js\";\n\nimport type { CommunityResourcable } from \"./community.js\";\nimport type { Networkish } from \"./network.js\";\nimport type { JsonRpcError, JsonRpcPayload } from \"./provider-jsonrpc.js\";\n\n\nconst defaultApiKey = \"9f7d929b018cdffb338517efa06f58359e86ff1ffd350bc889738523659e7972\";\n\nfunction getHost(name: string): string {\n    switch (name) {\n        case \"mainnet\":\n            return \"rpc.ankr.com/eth\";\n        case \"goerli\":\n            return \"rpc.ankr.com/eth_goerli\";\n        case \"sepolia\":\n            return \"rpc.ankr.com/eth_sepolia\";\n\n        case \"arbitrum\":\n            return \"rpc.ankr.com/arbitrum\";\n        case \"base\":\n            return \"rpc.ankr.com/base\";\n        case \"base-goerli\":\n            return \"rpc.ankr.com/base_goerli\";\n        case \"base-sepolia\":\n            return \"rpc.ankr.com/base_sepolia\";\n        case \"bnb\":\n            return \"rpc.ankr.com/bsc\";\n        case \"bnbt\":\n            return \"rpc.ankr.com/bsc_testnet_chapel\";\n        case \"matic\":\n            return \"rpc.ankr.com/polygon\";\n        case \"matic-mumbai\":\n            return \"rpc.ankr.com/polygon_mumbai\";\n        case \"optimism\":\n            return \"rpc.ankr.com/optimism\";\n        case \"optimism-goerli\":\n            return \"rpc.ankr.com/optimism_testnet\";\n        case \"optimism-sepolia\":\n            return \"rpc.ankr.com/optimism_sepolia\";\n    }\n\n    assertArgument(false, \"unsupported network\", \"network\", name);\n}\n\n\n/**\n *  The **AnkrProvider** connects to the [[link-ankr]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-ankr-signup).\n */\nexport class AnkrProvider extends JsonRpcProvider implements CommunityResourcable {\n\n    /**\n     *  The API key for the Ankr connection.\n     */\n    readonly apiKey!: string;\n\n    /**\n     *  Create a new **AnkrProvider**.\n     *\n     *  By default connecting to ``mainnet`` with a highly throttled\n     *  API key.\n     */\n    constructor(_network?: Networkish, apiKey?: null | string) {\n        if (_network == null) { _network = \"mainnet\"; }\n        const network = Network.from(_network);\n        if (apiKey == null) { apiKey = defaultApiKey; }\n\n        // Ankr does not support filterId, so we force polling\n        const options = { polling: true, staticNetwork: network };\n\n        const request = AnkrProvider.getRequest(network, apiKey);\n        super(request, network, options);\n\n        defineProperties<AnkrProvider>(this, { apiKey });\n    }\n\n    _getProvider(chainId: number): AbstractProvider {\n        try {\n            return new AnkrProvider(chainId, this.apiKey);\n        } catch (error) { }\n        return super._getProvider(chainId);\n    }\n\n    /**\n     *  Returns a prepared request for connecting to %%network%% with\n     *  %%apiKey%%.\n     */\n    static getRequest(network: Network, apiKey?: null | string): FetchRequest {\n        if (apiKey == null) { apiKey = defaultApiKey; }\n\n        const request = new FetchRequest(`https:/\\/${ getHost(network.name) }/${ apiKey }`);\n        request.allowGzip = true;\n\n        if (apiKey === defaultApiKey) {\n            request.retryFunc = async (request, response, attempt) => {\n                showThrottleMessage(\"AnkrProvider\");\n                return true;\n            };\n        }\n\n        return request;\n    }\n\n    getRpcError(payload: JsonRpcPayload, error: JsonRpcError): Error {\n        if (payload.method === \"eth_sendRawTransaction\") {\n            if (error && error.error && error.error.message === \"INTERNAL_ERROR: could not replace existing tx\") {\n                error.error.message = \"replacement transaction underpriced\";\n            }\n        }\n\n        return super.getRpcError(payload, error);\n    }\n\n    isCommunityResource(): boolean {\n        return (this.apiKey === defaultApiKey);\n    }\n}\n","/**\n *  [[link-alchemy]] provides a third-party service for connecting to\n *  various blockchains over JSON-RPC.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Goerli Testnet (``goerli``)\n *  - Sepolia Testnet (``sepolia``)\n *  - Arbitrum (``arbitrum``)\n *  - Arbitrum Goerli Testnet (``arbitrum-goerli``)\n *  - Arbitrum Sepolia Testnet (``arbitrum-sepolia``)\n *  - Base (``base``)\n *  - Base Goerlia Testnet (``base-goerli``)\n *  - Base Sepolia Testnet (``base-sepolia``)\n *  - Optimism (``optimism``)\n *  - Optimism Goerli Testnet (``optimism-goerli``)\n *  - Optimism Sepolia Testnet (``optimism-sepolia``)\n *  - Polygon (``matic``)\n *  - Polygon Amoy Testnet (``matic-amoy``)\n *  - Polygon Mumbai Testnet (``matic-mumbai``)\n *\n *  @_subsection: api/providers/thirdparty:Alchemy  [providers-alchemy]\n */\n\nimport {\n    defineProperties, resolveProperties, assert, assertArgument,\n    FetchRequest\n} from \"../utils/index.js\";\n\nimport { showThrottleMessage } from \"./community.js\";\nimport { Network } from \"./network.js\";\nimport { JsonRpcProvider } from \"./provider-jsonrpc.js\";\n\nimport type { AbstractProvider, PerformActionRequest } from \"./abstract-provider.js\";\nimport type { CommunityResourcable } from \"./community.js\";\nimport type { Networkish } from \"./network.js\";\n\n\nconst defaultApiKey = \"_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC\"\n\nfunction getHost(name: string): string {\n    switch(name) {\n        case \"mainnet\":\n            return \"eth-mainnet.alchemyapi.io\";\n        case \"goerli\":\n            return \"eth-goerli.g.alchemy.com\";\n        case \"sepolia\":\n            return \"eth-sepolia.g.alchemy.com\";\n\n        case \"arbitrum\":\n            return \"arb-mainnet.g.alchemy.com\";\n        case \"arbitrum-goerli\":\n            return \"arb-goerli.g.alchemy.com\";\n        case \"arbitrum-sepolia\":\n            return \"arb-sepolia.g.alchemy.com\";\n        case \"base\":\n            return \"base-mainnet.g.alchemy.com\";\n        case \"base-goerli\":\n            return \"base-goerli.g.alchemy.com\";\n        case \"base-sepolia\":\n            return \"base-sepolia.g.alchemy.com\";\n        case \"matic\":\n            return \"polygon-mainnet.g.alchemy.com\";\n        case \"matic-amoy\":\n            return \"polygon-amoy.g.alchemy.com\";\n        case \"matic-mumbai\":\n            return \"polygon-mumbai.g.alchemy.com\";\n        case \"optimism\":\n            return \"opt-mainnet.g.alchemy.com\";\n        case \"optimism-goerli\":\n            return \"opt-goerli.g.alchemy.com\";\n        case \"optimism-sepolia\":\n            return \"opt-sepolia.g.alchemy.com\";\n    }\n\n    assertArgument(false, \"unsupported network\", \"network\", name);\n}\n\n/**\n *  The **AlchemyProvider** connects to the [[link-alchemy]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-alchemy-signup).\n *\n *  @_docloc: api/providers/thirdparty\n */\nexport class AlchemyProvider extends JsonRpcProvider implements CommunityResourcable {\n    readonly apiKey!: string;\n\n    constructor(_network?: Networkish, apiKey?: null | string) {\n        if (_network == null) { _network = \"mainnet\"; }\n        const network = Network.from(_network);\n        if (apiKey == null) { apiKey = defaultApiKey; }\n\n        const request = AlchemyProvider.getRequest(network, apiKey);\n        super(request, network, { staticNetwork: network });\n\n        defineProperties<AlchemyProvider>(this, { apiKey });\n    }\n\n    _getProvider(chainId: number): AbstractProvider {\n        try {\n            return new AlchemyProvider(chainId, this.apiKey);\n        } catch (error) { }\n        return super._getProvider(chainId);\n    }\n\n    async _perform(req: PerformActionRequest): Promise<any> {\n\n        // https://docs.alchemy.com/reference/trace-transaction\n        if (req.method === \"getTransactionResult\") {\n            const { trace, tx } = await resolveProperties({\n                trace: this.send(\"trace_transaction\", [ req.hash ]),\n                tx: this.getTransaction(req.hash)\n            });\n            if (trace == null || tx == null) { return null; }\n\n            let data: undefined | string;\n            let error = false;\n            try {\n                data = trace[0].result.output;\n                error = (trace[0].error === \"Reverted\");\n            } catch (error) { }\n\n            if (data) {\n                assert(!error, \"an error occurred during transaction executions\", \"CALL_EXCEPTION\", {\n                    action: \"getTransactionResult\",\n                    data,\n                    reason: null,\n                    transaction: tx,\n                    invocation: null,\n                    revert: null // @TODO\n                });\n                return data;\n            }\n\n            assert(false, \"could not parse trace result\", \"BAD_DATA\", { value: trace });\n        }\n\n        return await super._perform(req);\n    }\n\n    isCommunityResource(): boolean {\n        return (this.apiKey === defaultApiKey);\n    }\n\n    static getRequest(network: Network, apiKey?: string): FetchRequest {\n        if (apiKey == null) { apiKey = defaultApiKey; }\n\n        const request = new FetchRequest(`https:/\\/${ getHost(network.name) }/v2/${ apiKey }`);\n        request.allowGzip = true;\n\n        if (apiKey === defaultApiKey) {\n            request.retryFunc = async (request, response, attempt) => {\n                showThrottleMessage(\"alchemy\");\n                return true;\n            }\n        }\n\n        return request;\n    }\n}\n","/**\n *  [[link-chainstack]] provides a third-party service for connecting to\n *  various blockchains over JSON-RPC.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Arbitrum (``arbitrum``)\n *  - BNB Smart Chain Mainnet (``bnb``)\n *  - Polygon (``matic``)\n *\n *  @_subsection: api/providers/thirdparty:Chainstack  [providers-chainstack]\n */\nimport {\n    defineProperties, FetchRequest, assertArgument\n} from \"../utils/index.js\";\n\nimport { showThrottleMessage } from \"./community.js\";\nimport { Network } from \"./network.js\";\nimport { JsonRpcProvider } from \"./provider-jsonrpc.js\";\n\nimport type { AbstractProvider } from \"./abstract-provider.js\";\nimport type { CommunityResourcable } from \"./community.js\";\nimport type { Networkish } from \"./network.js\";\n\n\nfunction getApiKey(name: string): string {\n    switch (name) {\n        case \"mainnet\": return \"39f1d67cedf8b7831010a665328c9197\";\n        case \"arbitrum\": return \"0550c209db33c3abf4cc927e1e18cea1\"\n        case \"bnb\": return \"98b5a77e531614387366f6fc5da097f8\";\n        case \"matic\": return \"cd9d4d70377471aa7c142ec4a4205249\";\n    }\n\n    assertArgument(false, \"unsupported network\", \"network\", name);\n}\n\nfunction getHost(name: string): string {\n    switch(name) {\n        case \"mainnet\":\n            return \"ethereum-mainnet.core.chainstack.com\";\n        case \"arbitrum\":\n            return \"arbitrum-mainnet.core.chainstack.com\";\n        case \"bnb\":\n            return \"bsc-mainnet.core.chainstack.com\";\n        case \"matic\":\n            return \"polygon-mainnet.core.chainstack.com\";\n    }\n\n    assertArgument(false, \"unsupported network\", \"network\", name);\n}\n\n/**\n *  The **ChainstackProvider** connects to the [[link-chainstack]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-chainstack).\n */\nexport class ChainstackProvider extends JsonRpcProvider implements CommunityResourcable {\n    /**\n     *  The API key for the Chainstack connection.\n     */\n    readonly apiKey!: string;\n\n    /**\n     *  Creates a new **ChainstackProvider**.\n     */\n    constructor(_network?: Networkish, apiKey?: null | string) {\n        if (_network == null) { _network = \"mainnet\"; }\n        const network = Network.from(_network);\n\n        if (apiKey == null) { apiKey = getApiKey(network.name); }\n\n        const request = ChainstackProvider.getRequest(network, apiKey);\n        super(request, network, { staticNetwork: network });\n\n        defineProperties<ChainstackProvider>(this, { apiKey });\n    }\n\n    _getProvider(chainId: number): AbstractProvider {\n        try {\n            return new ChainstackProvider(chainId, this.apiKey);\n        } catch (error) { }\n        return super._getProvider(chainId);\n    }\n\n    isCommunityResource(): boolean {\n        return (this.apiKey === getApiKey(this._network.name));\n    }\n\n    /**\n     *  Returns a prepared request for connecting to %%network%%\n     *  with %%apiKey%% and %%projectSecret%%.\n     */\n    static getRequest(network: Network, apiKey?: null | string): FetchRequest {\n        if (apiKey == null) { apiKey = getApiKey(network.name); }\n\n        const request = new FetchRequest(`https:/\\/${ getHost(network.name) }/${ apiKey }`);\n        request.allowGzip = true;\n\n        if (apiKey === getApiKey(network.name)) {\n            request.retryFunc = async (request, response, attempt) => {\n                showThrottleMessage(\"ChainstackProvider\");\n                return true;\n            };\n        }\n\n        return request;\n    }\n}\n","/**\n *  About Cloudflare\n *\n *  @_subsection: api/providers/thirdparty:Cloudflare  [providers-cloudflare]\n */\n\nimport { assertArgument } from \"../utils/index.js\";\n\nimport { Network } from \"./network.js\";\nimport { JsonRpcProvider } from \"./provider-jsonrpc.js\";\n\nimport type { Networkish } from \"./network.js\";\n\n/**\n *  About Cloudflare...\n */\nexport class CloudflareProvider extends JsonRpcProvider {\n    constructor(_network?: Networkish) {\n        if (_network == null) { _network = \"mainnet\"; }\n        const network = Network.from(_network);\n        assertArgument(network.name === \"mainnet\", \"unsupported network\", \"network\", _network);\n        super(\"https:/\\/cloudflare-eth.com/\", network, { staticNetwork: network });\n    }\n}\n","/**\n *  [[link-etherscan]] provides a third-party service for connecting to\n *  various blockchains over a combination of JSON-RPC and custom API\n *  endpoints.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Goerli Testnet (``goerli``)\n *  - Sepolia Testnet (``sepolia``)\n *  - Holesky Testnet (``holesky``)\n *  - Arbitrum (``arbitrum``)\n *  - Arbitrum Goerli Testnet (``arbitrum-goerli``)\n *  - Base (``base``)\n *  - Base Sepolia Testnet (``base-sepolia``)\n *  - BNB Smart Chain Mainnet (``bnb``)\n *  - BNB Smart Chain Testnet (``bnbt``)\n *  - Optimism (``optimism``)\n *  - Optimism Goerli Testnet (``optimism-goerli``)\n *  - Polygon (``matic``)\n *  - Polygon Mumbai Testnet (``matic-mumbai``)\n *  - Polygon Amoy Testnet (``matic-amoy``)\n *\n *  @_subsection api/providers/thirdparty:Etherscan  [providers-etherscan]\n */\n\nimport { AbiCoder } from \"../abi/index.js\";\nimport { Contract } from \"../contract/index.js\";\nimport { accessListify, Transaction } from \"../transaction/index.js\";\nimport {\n    defineProperties,\n    hexlify, toQuantity,\n    FetchRequest,\n    assert, assertArgument, isError,\n//    parseUnits,\n    toUtf8String\n } from \"../utils/index.js\";\n\nimport { AbstractProvider } from \"./abstract-provider.js\";\nimport { Network } from \"./network.js\";\nimport { NetworkPlugin } from \"./plugins-network.js\";\nimport { showThrottleMessage } from \"./community.js\";\n\nimport { PerformActionRequest } from \"./abstract-provider.js\";\nimport type { Networkish } from \"./network.js\";\n//import type { } from \"./pagination\";\nimport type { TransactionRequest } from \"./provider.js\";\n\nconst THROTTLE = 2000;\n\nfunction isPromise<T = any>(value: any): value is Promise<T> {\n    return (value && typeof(value.then) === \"function\");\n}\n\n\n/**\n *  When subscribing to the ``\"debug\"`` event on an Etherscan-based\n *  provider, the events receive a **DebugEventEtherscanProvider**\n *  payload.\n *\n *  @_docloc: api/providers/thirdparty:Etherscan\n */\nexport type DebugEventEtherscanProvider = {\n    action: \"sendRequest\",\n    id: number,\n    url: string,\n    payload: Record<string, any>\n} | {\n    action: \"receiveRequest\",\n    id: number,\n    result: any\n} | {\n    action: \"receiveError\",\n    id: number,\n    error: any\n};\n\nconst EtherscanPluginId = \"org.ethers.plugins.provider.Etherscan\";\n\n/**\n *  A Network can include an **EtherscanPlugin** to provide\n *  a custom base URL.\n *\n *  @_docloc: api/providers/thirdparty:Etherscan\n */\nexport class EtherscanPlugin extends NetworkPlugin {\n    /**\n     *  The Etherscan API base URL.\n     */\n    readonly baseUrl!: string;\n\n    /**\n     *  Creates a new **EtherscanProvider** which will use\n     *  %%baseUrl%%.\n     */\n    constructor(baseUrl: string) {\n        super(EtherscanPluginId);\n        defineProperties<EtherscanPlugin>(this, { baseUrl });\n    }\n\n    clone(): EtherscanPlugin {\n        return new EtherscanPlugin(this.baseUrl);\n    }\n}\n\nconst skipKeys = [ \"enableCcipRead\" ];\n\nlet nextId = 1;\n\n/**\n *  The **EtherscanBaseProvider** is the super-class of\n *  [[EtherscanProvider]], which should generally be used instead.\n *\n *  Since the **EtherscanProvider** includes additional code for\n *  [[Contract]] access, in //rare cases// that contracts are not\n *  used, this class can reduce code size.\n *\n *  @_docloc: api/providers/thirdparty:Etherscan\n */\nexport class EtherscanProvider extends AbstractProvider {\n\n    /**\n     *  The connected network.\n     */\n    readonly network!: Network;\n\n    /**\n     *  The API key or null if using the community provided bandwidth.\n     */\n    readonly apiKey!: null | string;\n\n    readonly #plugin: null | EtherscanPlugin;\n\n    /**\n     *  Creates a new **EtherscanBaseProvider**.\n     */\n    constructor(_network?: Networkish, _apiKey?: string) {\n        const apiKey = (_apiKey != null) ? _apiKey: null;\n\n        super();\n\n        const network = Network.from(_network);\n\n        this.#plugin = network.getPlugin<EtherscanPlugin>(EtherscanPluginId);\n\n        defineProperties<EtherscanProvider>(this, { apiKey, network });\n    }\n\n    /**\n     *  Returns the base URL.\n     *\n     *  If an [[EtherscanPlugin]] is configured on the\n     *  [[EtherscanBaseProvider_network]], returns the plugin's\n     *  baseUrl.\n     *\n     *  Deprecated; for Etherscan v2 the base is no longer a simply\n     *  host, but instead a URL including a chainId parameter. Changing\n     *  this to return a URL prefix could break some libraries, so it\n     *  is left intact but will be removed in the future as it is unused.\n     */\n    getBaseUrl(): string {\n        if (this.#plugin) { return this.#plugin.baseUrl; }\n\n        switch(this.network.name) {\n            case \"mainnet\":\n                return \"https:/\\/api.etherscan.io\";\n            case \"goerli\":\n                return \"https:/\\/api-goerli.etherscan.io\";\n            case \"sepolia\":\n                return \"https:/\\/api-sepolia.etherscan.io\";\n            case \"holesky\":\n                return \"https:/\\/api-holesky.etherscan.io\";\n\n            case \"arbitrum\":\n                return \"https:/\\/api.arbiscan.io\";\n            case \"arbitrum-goerli\":\n                return \"https:/\\/api-goerli.arbiscan.io\";\n           case \"base\":\n                return \"https:/\\/api.basescan.org\";\n            case \"base-sepolia\":\n                return \"https:/\\/api-sepolia.basescan.org\";\n            case \"bnb\":\n                return \"https:/\\/api.bscscan.com\";\n            case \"bnbt\":\n                return \"https:/\\/api-testnet.bscscan.com\";\n            case \"matic\":\n                return \"https:/\\/api.polygonscan.com\";\n            case \"matic-amoy\":\n                return \"https:/\\/api-amoy.polygonscan.com\";\n            case \"matic-mumbai\":\n                return \"https:/\\/api-testnet.polygonscan.com\";\n            case \"optimism\":\n                return \"https:/\\/api-optimistic.etherscan.io\";\n            case \"optimism-goerli\":\n                return \"https:/\\/api-goerli-optimistic.etherscan.io\";\n\n            default:\n        }\n\n        assertArgument(false, \"unsupported network\", \"network\", this.network);\n    }\n\n    /**\n     *  Returns the URL for the %%module%% and %%params%%.\n     */\n    getUrl(module: string, params: Record<string, string>): string {\n        let query = Object.keys(params).reduce((accum, key) => {\n            const value = params[key];\n            if (value != null) {\n                accum += `&${ key }=${ value }`\n            }\n            return accum\n        }, \"\");\n        if (this.apiKey) { query += `&apikey=${ this.apiKey }`; }\n        return `https:/\\/api.etherscan.io/v2/api?chainid=${ this.network.chainId }&module=${ module }${ query }`;\n    }\n\n    /**\n     *  Returns the URL for using POST requests.\n     */\n    getPostUrl(): string {\n        return `https:/\\/api.etherscan.io/v2/api?chainid=${ this.network.chainId }`;\n    }\n\n    /**\n     *  Returns the parameters for using POST requests.\n     */\n    getPostData(module: string, params: Record<string, any>): Record<string, any> {\n        params.module = module;\n        params.apikey = this.apiKey;\n        params.chainid = this.network.chainId;\n        return params;\n    }\n\n    async detectNetwork(): Promise<Network> {\n        return this.network;\n    }\n\n    /**\n     *  Resolves to the result of calling %%module%% with %%params%%.\n     *\n     *  If %%post%%, the request is made as a POST request.\n     */\n    async fetch(module: string, params: Record<string, any>, post?: boolean): Promise<any> {\n        const id = nextId++;\n\n        const url = (post ? this.getPostUrl(): this.getUrl(module, params));\n        const payload = (post ? this.getPostData(module, params): null);\n\n        this.emit(\"debug\", { action: \"sendRequest\", id, url, payload: payload });\n\n        const request = new FetchRequest(url);\n        request.setThrottleParams({ slotInterval: 1000 });\n        request.retryFunc = (req, resp, attempt: number) => {\n            if (this.isCommunityResource()) {\n                showThrottleMessage(\"Etherscan\");\n            }\n            return Promise.resolve(true);\n        };\n        request.processFunc = async (request, response) => {\n            const result = response.hasBody() ? JSON.parse(toUtf8String(response.body)): { };\n            const throttle = ((typeof(result.result) === \"string\") ? result.result: \"\").toLowerCase().indexOf(\"rate limit\") >= 0;\n            if (module === \"proxy\") {\n                // This JSON response indicates we are being throttled\n                if (result && result.status == 0 && result.message == \"NOTOK\" && throttle) {\n                    this.emit(\"debug\", { action: \"receiveError\", id, reason: \"proxy-NOTOK\", error: result });\n                    response.throwThrottleError(result.result, THROTTLE);\n                }\n            } else {\n                if (throttle) {\n                    this.emit(\"debug\", { action: \"receiveError\", id, reason: \"null result\", error: result.result });\n                    response.throwThrottleError(result.result, THROTTLE);\n                }\n            }\n            return response;\n        };\n\n        if (payload) {\n            request.setHeader(\"content-type\", \"application/x-www-form-urlencoded; charset=UTF-8\");\n            request.body = Object.keys(payload).map((k) => `${ k }=${ payload[k] }`).join(\"&\");\n        }\n\n        const response = await request.send();\n        try {\n            response.assertOk();\n        } catch (error) {\n            this.emit(\"debug\", { action: \"receiveError\", id, error, reason: \"assertOk\" });\n            assert(false, \"response error\", \"SERVER_ERROR\", { request, response });\n        }\n\n        if (!response.hasBody()) {\n            this.emit(\"debug\", { action: \"receiveError\", id, error: \"missing body\", reason: \"null body\" });\n            assert(false, \"missing response\", \"SERVER_ERROR\", { request, response });\n        }\n\n        const result = JSON.parse(toUtf8String(response.body));\n        if (module === \"proxy\") {\n            if (result.jsonrpc != \"2.0\") {\n                this.emit(\"debug\", { action: \"receiveError\", id, result, reason: \"invalid JSON-RPC\" });\n                assert(false, \"invalid JSON-RPC response (missing jsonrpc='2.0')\", \"SERVER_ERROR\", { request, response, info: { result } });\n            }\n\n            if (result.error) {\n                this.emit(\"debug\", { action: \"receiveError\", id, result, reason: \"JSON-RPC error\" });\n                assert(false, \"error response\", \"SERVER_ERROR\", { request, response, info: { result } });\n            }\n\n            this.emit(\"debug\", { action: \"receiveRequest\", id, result });\n\n            return result.result;\n\n        } else {\n            // getLogs, getHistory have weird success responses\n            if (result.status == 0 && (result.message === \"No records found\" || result.message === \"No transactions found\")) {\n                this.emit(\"debug\", { action: \"receiveRequest\", id, result });\n                return result.result;\n            }\n\n            if (result.status != 1 || (typeof(result.message) === \"string\" && !result.message.match(/^OK/))) {\n                this.emit(\"debug\", { action: \"receiveError\", id, result });\n                assert(false, \"error response\", \"SERVER_ERROR\", { request, response, info: { result } });\n            }\n\n            this.emit(\"debug\", { action: \"receiveRequest\", id, result });\n\n            return result.result;\n        }\n    }\n\n    /**\n     *  Returns %%transaction%% normalized for the Etherscan API.\n     */\n    _getTransactionPostData(transaction: TransactionRequest): Record<string, string> {\n        const result: Record<string, string> = { };\n        for (let key in transaction) {\n            if (skipKeys.indexOf(key) >= 0) { continue; }\n\n            if ((<any>transaction)[key] == null) { continue; }\n            let value = (<any>transaction)[key];\n            if (key === \"type\" && value === 0) { continue; }\n            if (key === \"blockTag\" && value === \"latest\") { continue; }\n\n            // Quantity-types require no leading zero, unless 0\n            if ((<any>{ type: true, gasLimit: true, gasPrice: true, maxFeePerGs: true, maxPriorityFeePerGas: true, nonce: true, value: true })[key]) {\n                value = toQuantity(value);\n\n            } else if (key === \"accessList\") {\n                value = \"[\" + accessListify(value).map((set) => {\n                    return `{address:\"${ set.address }\",storageKeys:[\"${ set.storageKeys.join('\",\"') }\"]}`;\n                }).join(\",\") + \"]\";\n\n            } else if (key === \"blobVersionedHashes\") {\n                if (value.length === 0) { continue; }\n\n                // @TODO: update this once the API supports blobs\n                assert(false, \"Etherscan API does not support blobVersionedHashes\", \"UNSUPPORTED_OPERATION\", {\n                    operation: \"_getTransactionPostData\",\n                    info: { transaction }\n                });\n\n            } else {\n                value = hexlify(value);\n            }\n            result[key] = value;\n        }\n        return result;\n    }\n\n    /**\n     *  Throws the normalized Etherscan error.\n     */\n    _checkError(req: PerformActionRequest, error: Error, transaction: any): never {\n        // Pull any message out if, possible\n        let message = \"\";\n        if (isError(error, \"SERVER_ERROR\")) {\n            // Check for an error emitted by a proxy call\n            try {\n                message = (<any>error).info.result.error.message;\n            } catch (e) { }\n\n            if (!message) {\n                try {\n                    message = (<any>error).info.message;\n                } catch (e) { }\n            }\n        }\n\n        if (req.method === \"estimateGas\") {\n            if (!message.match(/revert/i) && message.match(/insufficient funds/i)) {\n                assert(false, \"insufficient funds\", \"INSUFFICIENT_FUNDS\", {\n                    transaction: req.transaction\n                });\n            }\n        }\n\n        if (req.method === \"call\" || req.method === \"estimateGas\") {\n            if (message.match(/execution reverted/i)) {\n                let data = \"\";\n                try {\n                    data = (<any>error).info.result.error.data;\n                } catch (error) { }\n\n                const e = AbiCoder.getBuiltinCallException(req.method, <any>req.transaction, data);\n                e.info = { request: req, error }\n                throw e;\n            }\n        }\n\n        if (message) {\n            if (req.method === \"broadcastTransaction\") {\n                const transaction = Transaction.from(req.signedTransaction);\n                if (message.match(/replacement/i) && message.match(/underpriced/i)) {\n                    assert(false, \"replacement fee too low\", \"REPLACEMENT_UNDERPRICED\", {\n                        transaction\n                    });\n                }\n\n                if (message.match(/insufficient funds/)) {\n                    assert(false, \"insufficient funds for intrinsic transaction cost\", \"INSUFFICIENT_FUNDS\", {\n                       transaction\n                    });\n                }\n\n                if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {\n                    assert(false, \"nonce has already been used\", \"NONCE_EXPIRED\", {\n                       transaction\n                    });\n                }\n            }\n        }\n\n        // Something we could not process\n        throw error;\n    }\n\n    async _detectNetwork(): Promise<Network> {\n        return this.network;\n    }\n\n    async _perform(req: PerformActionRequest): Promise<any> {\n        switch (req.method) {\n            case \"chainId\":\n                return this.network.chainId;\n\n            case \"getBlockNumber\":\n                return this.fetch(\"proxy\", { action: \"eth_blockNumber\" });\n\n            case \"getGasPrice\":\n                return this.fetch(\"proxy\", { action: \"eth_gasPrice\" });\n\n            case \"getPriorityFee\":\n                // This is temporary until Etherscan completes support\n                if (this.network.name === \"mainnet\") {\n                    return \"1000000000\";\n                } else if (this.network.name === \"optimism\") {\n                    return \"1000000\";\n                } else {\n                    throw new Error(\"fallback onto the AbstractProvider default\");\n                }\n                /* Working with Etherscan to get this added:\n                try {\n                    const test = await this.fetch(\"proxy\", {\n                        action: \"eth_maxPriorityFeePerGas\"\n                    });\n                    console.log(test);\n                    return test;\n                } catch (e) {\n                    console.log(\"DEBUG\", e);\n                    throw e;\n                }\n                */\n                /* This might be safe; but due to rounding neither myself\n                   or Etherscan are necessarily comfortable with this. :)\n                try {\n                    const result = await this.fetch(\"gastracker\", { action: \"gasoracle\" });\n                    console.log(result);\n                    const gasPrice = parseUnits(result.SafeGasPrice, \"gwei\");\n                    const baseFee = parseUnits(result.suggestBaseFee, \"gwei\");\n                    const priorityFee = gasPrice - baseFee;\n                    if (priorityFee < 0) { throw new Error(\"negative priority fee; defer to abstract provider default\"); }\n                    return priorityFee;\n                } catch (error) {\n                    console.log(\"DEBUG\", error);\n                    throw error;\n                }\n                */\n\n            case \"getBalance\":\n                // Returns base-10 result\n                return this.fetch(\"account\", {\n                    action: \"balance\",\n                    address: req.address,\n                    tag: req.blockTag\n                });\n\n           case \"getTransactionCount\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getTransactionCount\",\n                    address: req.address,\n                    tag: req.blockTag\n                });\n\n            case \"getCode\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getCode\",\n                    address: req.address,\n                    tag: req.blockTag\n                });\n\n            case \"getStorage\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getStorageAt\",\n                    address: req.address,\n                    position: req.position,\n                    tag: req.blockTag\n                });\n\n            case \"broadcastTransaction\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_sendRawTransaction\",\n                    hex: req.signedTransaction\n                }, true).catch((error) => {\n                    return this._checkError(req, <Error>error, req.signedTransaction);\n                });\n\n            case \"getBlock\":\n                if (\"blockTag\" in req) {\n                    return this.fetch(\"proxy\", {\n                        action: \"eth_getBlockByNumber\",\n                        tag: req.blockTag,\n                        boolean: (req.includeTransactions ? \"true\": \"false\")\n                    });\n                }\n\n                assert(false, \"getBlock by blockHash not supported by Etherscan\", \"UNSUPPORTED_OPERATION\", {\n                    operation: \"getBlock(blockHash)\"\n                });\n\n            case \"getTransaction\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getTransactionByHash\",\n                    txhash: req.hash\n                });\n\n            case \"getTransactionReceipt\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getTransactionReceipt\",\n                    txhash: req.hash\n                });\n\n            case \"call\": {\n                if (req.blockTag !== \"latest\") {\n                    throw new Error(\"EtherscanProvider does not support blockTag for call\");\n                }\n\n                const postData = this._getTransactionPostData(req.transaction);\n                postData.module = \"proxy\";\n                postData.action = \"eth_call\";\n\n                try {\n                    return await this.fetch(\"proxy\", postData, true);\n                } catch (error) {\n                    return this._checkError(req, <Error>error, req.transaction);\n                }\n            }\n\n            case \"estimateGas\": {\n                const postData = this._getTransactionPostData(req.transaction);\n                postData.module = \"proxy\";\n                postData.action = \"eth_estimateGas\";\n\n                try {\n                    return await this.fetch(\"proxy\", postData, true);\n                } catch (error) {\n                    return this._checkError(req, <Error>error, req.transaction);\n                }\n            }\n/*\n            case \"getLogs\": {\n                // Needs to complain if more than one address is passed in\n                const args: Record<string, any> = { action: \"getLogs\" }\n\n                if (params.filter.fromBlock) {\n                    args.fromBlock = checkLogTag(params.filter.fromBlock);\n                }\n\n                if (params.filter.toBlock) {\n                    args.toBlock = checkLogTag(params.filter.toBlock);\n                }\n\n                if (params.filter.address) {\n                    args.address = params.filter.address;\n                }\n\n                // @TODO: We can handle slightly more complicated logs using the logs API\n                if (params.filter.topics && params.filter.topics.length > 0) {\n                    if (params.filter.topics.length > 1) {\n                        logger.throwError(\"unsupported topic count\", Logger.Errors.UNSUPPORTED_OPERATION, { topics: params.filter.topics });\n                    }\n                    if (params.filter.topics.length === 1) {\n                        const topic0 = params.filter.topics[0];\n                        if (typeof(topic0) !== \"string\" || topic0.length !== 66) {\n                            logger.throwError(\"unsupported topic format\", Logger.Errors.UNSUPPORTED_OPERATION, { topic0: topic0 });\n                        }\n                        args.topic0 = topic0;\n                    }\n                }\n\n                const logs: Array<any> = await this.fetch(\"logs\", args);\n\n                // Cache txHash => blockHash\n                let blocks: { [tag: string]: string } = {};\n\n                // Add any missing blockHash to the logs\n                for (let i = 0; i < logs.length; i++) {\n                    const log = logs[i];\n                    if (log.blockHash != null) { continue; }\n                    if (blocks[log.blockNumber] == null) {\n                        const block = await this.getBlock(log.blockNumber);\n                        if (block) {\n                            blocks[log.blockNumber] = block.hash;\n                        }\n                    }\n\n                    log.blockHash = blocks[log.blockNumber];\n                }\n\n                return logs;\n            }\n*/\n            default:\n                break;\n        }\n\n        return super._perform(req);\n    }\n\n    async getNetwork(): Promise<Network> {\n        return this.network;\n    }\n\n    /**\n     *  Resolves to the current price of ether.\n     *\n     *  This returns ``0`` on any network other than ``mainnet``.\n     */\n    async getEtherPrice(): Promise<number> {\n        if (this.network.name !== \"mainnet\") { return 0.0; }\n        return parseFloat((await this.fetch(\"stats\", { action: \"ethprice\" })).ethusd);\n    }\n\n    /**\n     *  Resolves to a [Contract]] for %%address%%, using the\n     *  Etherscan API to retreive the Contract ABI.\n     */\n    async getContract(_address: string): Promise<null | Contract> {\n        let address = this._getAddress(_address);\n        if (isPromise(address)) { address = await address; }\n\n        try {\n            const resp = await this.fetch(\"contract\", {\n            action: \"getabi\", address });\n            const abi = JSON.parse(resp);\n            return new Contract(address, abi, this);\n        } catch (error) {\n            return null;\n        }\n    }\n\n    isCommunityResource(): boolean {\n        return (this.apiKey == null);\n    }\n}\n","\nfunction getGlobal(): any {\n  if (typeof self !== 'undefined') { return self; }\n  if (typeof window !== 'undefined') { return window; }\n  if (typeof global !== 'undefined') { return global; }\n  throw new Error('unable to locate global object');\n};\n\nconst _WebSocket = getGlobal().WebSocket;\n\nexport { _WebSocket as WebSocket };\n","/**\n *  Generic long-lived socket provider.\n *\n *  Sub-classing notes\n *  - a sub-class MUST call the `_start()` method once connected\n *  - a sub-class MUST override the `_write(string)` method\n *  - a sub-class MUST call `_processMessage(string)` for each message\n *\n *  @_subsection: api/providers/abstract-provider:Socket Providers  [about-socketProvider]\n */\n\nimport { UnmanagedSubscriber } from \"./abstract-provider.js\";\nimport { assert, assertArgument, makeError } from \"../utils/index.js\";\nimport { JsonRpcApiProvider } from \"./provider-jsonrpc.js\";\n\nimport type { Subscriber, Subscription } from \"./abstract-provider.js\";\nimport type { EventFilter } from \"./provider.js\";\nimport type {\n    JsonRpcApiProviderOptions, JsonRpcError, JsonRpcPayload, JsonRpcResult\n} from \"./provider-jsonrpc.js\";\nimport type { Networkish } from \"./network.js\";\n\n\ntype JsonRpcSubscription = {\n    method: string,\n    params: {\n        result: any,\n        subscription: string\n    }\n};\n\n/**\n *  A **SocketSubscriber** uses a socket transport to handle events and\n *  should use [[_emit]] to manage the events.\n */\nexport class SocketSubscriber implements Subscriber {\n    #provider: SocketProvider;\n\n    #filter: string;\n\n    /**\n     *  The filter.\n     */\n    get filter(): Array<any> { return JSON.parse(this.#filter); }\n\n    #filterId: null | Promise<string |number>;\n    #paused: null | boolean;\n\n    #emitPromise: null | Promise<void>;\n\n    /**\n     *  Creates a new **SocketSubscriber** attached to %%provider%% listening\n     *  to %%filter%%.\n     */\n    constructor(provider: SocketProvider, filter: Array<any>) {\n        this.#provider = provider;\n        this.#filter = JSON.stringify(filter);\n        this.#filterId = null;\n        this.#paused = null;\n        this.#emitPromise = null;\n    }\n\n    start(): void {\n        this.#filterId = this.#provider.send(\"eth_subscribe\", this.filter).then((filterId) => {;\n            this.#provider._register(filterId, this);\n            return filterId;\n        });\n    }\n\n    stop(): void {\n        (<Promise<number>>(this.#filterId)).then((filterId) => {\n            if (this.#provider.destroyed) { return; }\n            this.#provider.send(\"eth_unsubscribe\", [ filterId ]);\n        });\n        this.#filterId = null;\n    }\n\n    // @TODO: pause should trap the current blockNumber, unsub, and on resume use getLogs\n    //        and resume\n    pause(dropWhilePaused?: boolean): void {\n        assert(dropWhilePaused, \"preserve logs while paused not supported by SocketSubscriber yet\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"pause(false)\" });\n        this.#paused = !!dropWhilePaused;\n    }\n\n    resume(): void {\n        this.#paused = null;\n    }\n\n    /**\n     *  @_ignore:\n     */\n    _handleMessage(message: any): void {\n        if (this.#filterId == null) { return; }\n        if (this.#paused === null) {\n            let emitPromise: null | Promise<void> = this.#emitPromise;\n            if (emitPromise == null) {\n                emitPromise = this._emit(this.#provider, message);\n            } else {\n                emitPromise = emitPromise.then(async () => {\n                    await this._emit(this.#provider, message);\n                });\n            }\n            this.#emitPromise = emitPromise.then(() => {\n                if (this.#emitPromise === emitPromise) {\n                    this.#emitPromise = null;\n                }\n            });\n        }\n    }\n\n    /**\n     *  Sub-classes **must** override this to emit the events on the\n     *  provider.\n     */\n    async _emit(provider: SocketProvider, message: any): Promise<void> {\n        throw new Error(\"sub-classes must implemente this; _emit\");\n    }\n}\n\n/**\n *  A **SocketBlockSubscriber** listens for ``newHeads`` events and emits\n *  ``\"block\"`` events.\n */\nexport class SocketBlockSubscriber extends SocketSubscriber {\n    /**\n     *  @_ignore:\n     */\n    constructor(provider: SocketProvider) {\n        super(provider, [ \"newHeads\" ]);\n    }\n\n    async _emit(provider: SocketProvider, message: any): Promise<void> {\n        provider.emit(\"block\", parseInt(message.number));\n    }\n}\n\n/**\n *  A **SocketPendingSubscriber** listens for pending transacitons and emits\n *  ``\"pending\"`` events.\n */\nexport class SocketPendingSubscriber extends SocketSubscriber {\n\n    /**\n     *  @_ignore:\n     */\n    constructor(provider: SocketProvider) {\n        super(provider, [ \"newPendingTransactions\" ]);\n    }\n\n    async _emit(provider: SocketProvider, message: any): Promise<void> {\n        provider.emit(\"pending\", message);\n    }\n}\n\n/**\n *  A **SocketEventSubscriber** listens for event logs.\n */\nexport class SocketEventSubscriber extends SocketSubscriber {\n    #logFilter: string;\n\n    /**\n     *  The filter.\n     */\n    get logFilter(): EventFilter { return JSON.parse(this.#logFilter); }\n\n    /**\n     *  @_ignore:\n     */\n    constructor(provider: SocketProvider, filter: EventFilter) {\n        super(provider, [ \"logs\", filter ]);\n        this.#logFilter = JSON.stringify(filter);\n    }\n\n    async _emit(provider: SocketProvider, message: any): Promise<void> {\n        provider.emit(this.logFilter, provider._wrapLog(message, provider._network));\n    }\n}\n\n/**\n *  A **SocketProvider** is backed by a long-lived connection over a\n *  socket, which can subscribe and receive real-time messages over\n *  its communication channel.\n */\nexport class SocketProvider extends JsonRpcApiProvider {\n    #callbacks: Map<number, { payload: JsonRpcPayload, resolve: (r: any) => void, reject: (e: Error) => void }>;\n\n    // Maps each filterId to its subscriber\n    #subs: Map<number | string, SocketSubscriber>;\n\n    // If any events come in before a subscriber has finished\n    // registering, queue them\n    #pending: Map<number | string, Array<any>>;\n\n    /**\n     *  Creates a new **SocketProvider** connected to %%network%%.\n     *\n     *  If unspecified, the network will be discovered.\n     */\n    constructor(network?: Networkish, _options?: JsonRpcApiProviderOptions) {\n        // Copy the options\n        const options = Object.assign({ }, (_options != null) ? _options: { });\n\n        // Support for batches is generally not supported for\n        // connection-base providers; if this changes in the future\n        // the _send should be updated to reflect this\n        assertArgument(options.batchMaxCount == null || options.batchMaxCount === 1,\n            \"sockets-based providers do not support batches\", \"options.batchMaxCount\", _options);\n        options.batchMaxCount = 1;\n\n        // Socket-based Providers (generally) cannot change their network,\n        // since they have a long-lived connection; but let people override\n        // this if they have just cause.\n        if (options.staticNetwork == null) { options.staticNetwork = true; }\n\n        super(network, options);\n        this.#callbacks = new Map();\n        this.#subs = new Map();\n        this.#pending = new Map();\n    }\n\n    // This value is only valid after _start has been called\n    /*\n    get _network(): Network {\n        if (this.#network == null) {\n            throw new Error(\"this shouldn't happen\");\n        }\n        return this.#network.clone();\n    }\n    */\n\n    _getSubscriber(sub: Subscription): Subscriber {\n        switch (sub.type) {\n            case \"close\":\n                return new UnmanagedSubscriber(\"close\");\n            case \"block\":\n                return new SocketBlockSubscriber(this);\n            case \"pending\":\n                return new SocketPendingSubscriber(this);\n            case \"event\":\n                return new SocketEventSubscriber(this, sub.filter);\n            case \"orphan\":\n                // Handled auto-matically within AbstractProvider\n                // when the log.removed = true\n                if (sub.filter.orphan === \"drop-log\") {\n                    return new UnmanagedSubscriber(\"drop-log\");\n                }\n        }\n        return super._getSubscriber(sub);\n    }\n\n    /**\n     *  Register a new subscriber. This is used internalled by Subscribers\n     *  and generally is unecessary unless extending capabilities.\n     */\n    _register(filterId: number | string, subscriber: SocketSubscriber): void {\n        this.#subs.set(filterId, subscriber);\n        const pending = this.#pending.get(filterId);\n        if (pending) {\n            for (const message of pending) {\n                subscriber._handleMessage(message);\n            }\n            this.#pending.delete(filterId);\n        }\n    }\n\n    async _send(payload: JsonRpcPayload | Array<JsonRpcPayload>): Promise<Array<JsonRpcResult | JsonRpcError>> {\n        // WebSocket provider doesn't accept batches\n        assertArgument(!Array.isArray(payload), \"WebSocket does not support batch send\", \"payload\", payload);\n\n        // @TODO: stringify payloads here and store to prevent mutations\n\n        // Prepare a promise to respond to\n        const promise = new Promise((resolve, reject) => {\n            this.#callbacks.set(payload.id, { payload, resolve, reject });\n        });\n\n        // Wait until the socket is connected before writing to it\n        await this._waitUntilReady();\n\n        // Write the request to the socket\n        await this._write(JSON.stringify(payload));\n\n        return <Array<JsonRpcResult | JsonRpcError>>[ await promise ];\n    }\n\n    // Sub-classes must call this once they are connected\n    /*\n    async _start(): Promise<void> {\n        if (this.#ready) { return; }\n\n        for (const { payload } of this.#callbacks.values()) {\n            await this._write(JSON.stringify(payload));\n        }\n\n        this.#ready = (async function() {\n            await super._start();\n        })();\n    }\n    */\n\n    /**\n     *  Sub-classes **must** call this with messages received over their\n     *  transport to be processed and dispatched.\n     */\n    async _processMessage(message: string): Promise<void> {\n        const result = <JsonRpcResult | JsonRpcError | JsonRpcSubscription>(JSON.parse(message));\n\n        if (result && typeof(result) === \"object\" && \"id\" in result) {\n            const callback = this.#callbacks.get(result.id);\n            if (callback == null) {\n                this.emit(\"error\", makeError(\"received result for unknown id\", \"UNKNOWN_ERROR\", {\n                    reasonCode: \"UNKNOWN_ID\",\n                    result\n                }));\n                return;\n            }\n            this.#callbacks.delete(result.id);\n\n            callback.resolve(result);\n\n        } else if (result && result.method === \"eth_subscription\") {\n            const filterId = result.params.subscription;\n            const subscriber = this.#subs.get(filterId);\n            if (subscriber) {\n                subscriber._handleMessage(result.params.result);\n            } else {\n                let pending = this.#pending.get(filterId);\n                if (pending == null) {\n                    pending = [ ];\n                    this.#pending.set(filterId, pending);\n                }\n                pending.push(result.params.result);\n            }\n\n        } else {\n            this.emit(\"error\", makeError(\"received unexpected message\", \"UNKNOWN_ERROR\", {\n                reasonCode: \"UNEXPECTED_MESSAGE\",\n                result\n            }));\n            return;\n        }\n    }\n\n    /**\n     *  Sub-classes **must** override this to send %%message%% over their\n     *  transport.\n     */\n    async _write(message: string): Promise<void> {\n        throw new Error(\"sub-classes must override this\");\n    }\n}\n","\n\nimport { WebSocket as _WebSocket } from \"./ws.js\"; /*-browser*/\n\nimport { SocketProvider } from \"./provider-socket.js\";\n\nimport type { JsonRpcApiProviderOptions} from \"./provider-jsonrpc.js\";\nimport type { Networkish } from \"./network.js\";\n\n/**\n *  A generic interface to a Websocket-like object.\n */\nexport interface WebSocketLike {\n    onopen: null | ((...args: Array<any>) => any);\n    onmessage: null | ((...args: Array<any>) => any);\n    onerror: null | ((...args: Array<any>) => any);\n\n    readyState: number;\n\n    send(payload: any): void;\n    close(code?: number, reason?: string): void;\n}\n\n/**\n *  A function which can be used to re-create a WebSocket connection\n *  on disconnect.\n */\nexport type WebSocketCreator = () => WebSocketLike;\n\n/**\n *  A JSON-RPC provider which is backed by a WebSocket.\n *\n *  WebSockets are often preferred because they retain a live connection\n *  to a server, which permits more instant access to events.\n *\n *  However, this incurs higher server infrasturture costs, so additional\n *  resources may be required to host your own WebSocket nodes and many\n *  third-party services charge additional fees for WebSocket endpoints.\n */\nexport class WebSocketProvider extends SocketProvider {\n    #connect: null | WebSocketCreator;\n\n    #websocket: null | WebSocketLike;\n    get websocket(): WebSocketLike {\n        if (this.#websocket == null) { throw new Error(\"websocket closed\"); }\n        return this.#websocket;\n    }\n\n    constructor(url: string | WebSocketLike | WebSocketCreator, network?: Networkish, options?: JsonRpcApiProviderOptions) {\n        super(network, options);\n        if (typeof(url) === \"string\") {\n            this.#connect = () => { return new _WebSocket(url); };\n            this.#websocket = this.#connect();\n        } else if (typeof(url) === \"function\") {\n            this.#connect = url;\n            this.#websocket = url();\n        } else {\n            this.#connect = null;\n            this.#websocket = url;\n        }\n\n        this.websocket.onopen = async () => {\n            try {\n                await this._start()\n                this.resume();\n            } catch (error) {\n                console.log(\"failed to start WebsocketProvider\", error);\n                // @TODO: now what? Attempt reconnect?\n            }\n        };\n\n        this.websocket.onmessage = (message: { data: string }) => {\n            this._processMessage(message.data);\n        };\n/*\n        this.websocket.onclose = (event) => {\n            // @TODO: What event.code should we reconnect on?\n            const reconnect = false;\n            if (reconnect) {\n                this.pause(true);\n                if (this.#connect) {\n                    this.#websocket = this.#connect();\n                    this.#websocket.onopen = ...\n                    // @TODO: this requires the super class to rebroadcast; move it there\n                }\n                this._reconnect();\n            }\n        };\n*/\n    }\n\n    async _write(message: string): Promise<void> {\n        this.websocket.send(message);\n    }\n\n    async destroy(): Promise<void> {\n        if (this.#websocket != null) {\n            this.#websocket.close();\n            this.#websocket = null;\n        }\n        super.destroy();\n    }\n}\n","/**\n *  [[link-infura]] provides a third-party service for connecting to\n *  various blockchains over JSON-RPC.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Goerli Testnet (``goerli``)\n *  - Sepolia Testnet (``sepolia``)\n *  - Arbitrum (``arbitrum``)\n *  - Arbitrum Goerli Testnet (``arbitrum-goerli``)\n *  - Arbitrum Sepolia Testnet (``arbitrum-sepolia``)\n *  - Base (``base``)\n *  - Base Goerlia Testnet (``base-goerli``)\n *  - Base Sepolia Testnet (``base-sepolia``)\n *  - BNB Smart Chain Mainnet (``bnb``)\n *  - BNB Smart Chain Testnet (``bnbt``)\n *  - Linea (``linea``)\n *  - Linea Goerli Testnet (``linea-goerli``)\n *  - Linea Sepolia Testnet (``linea-sepolia``)\n *  - Optimism (``optimism``)\n *  - Optimism Goerli Testnet (``optimism-goerli``)\n *  - Optimism Sepolia Testnet (``optimism-sepolia``)\n *  - Polygon (``matic``)\n *  - Polygon Amoy Testnet (``matic-amoy``)\n *  - Polygon Mumbai Testnet (``matic-mumbai``)\n *\n *  @_subsection: api/providers/thirdparty:INFURA  [providers-infura]\n */\nimport {\n    defineProperties, FetchRequest, assert, assertArgument\n} from \"../utils/index.js\";\n\nimport { showThrottleMessage } from \"./community.js\";\nimport { Network } from \"./network.js\";\nimport { JsonRpcProvider } from \"./provider-jsonrpc.js\";\nimport { WebSocketProvider } from \"./provider-websocket.js\";\n\nimport type { AbstractProvider } from \"./abstract-provider.js\";\nimport type { CommunityResourcable } from \"./community.js\";\nimport type { Networkish } from \"./network.js\";\n\n\nconst defaultProjectId = \"84842078b09946638c03157f83405213\";\n\nfunction getHost(name: string): string {\n    switch(name) {\n        case \"mainnet\":\n            return \"mainnet.infura.io\";\n        case \"goerli\":\n            return \"goerli.infura.io\";\n        case \"sepolia\":\n            return \"sepolia.infura.io\";\n\n        case \"arbitrum\":\n            return \"arbitrum-mainnet.infura.io\";\n        case \"arbitrum-goerli\":\n            return \"arbitrum-goerli.infura.io\";\n        case \"arbitrum-sepolia\":\n            return \"arbitrum-sepolia.infura.io\";\n        case \"base\":\n            return \"base-mainnet.infura.io\";\n        case \"base-goerlia\": // @TODO: Remove this typo in the future!\n        case \"base-goerli\":\n            return \"base-goerli.infura.io\";\n        case \"base-sepolia\":\n            return \"base-sepolia.infura.io\";\n        case \"bnb\":\n            return \"bsc-mainnet.infura.io\";\n        case \"bnbt\":\n            return \"bsc-testnet.infura.io\";\n        case \"linea\":\n            return \"linea-mainnet.infura.io\";\n        case \"linea-goerli\":\n            return \"linea-goerli.infura.io\";\n        case \"linea-sepolia\":\n            return \"linea-sepolia.infura.io\";\n        case \"matic\":\n            return \"polygon-mainnet.infura.io\";\n        case \"matic-amoy\":\n            return \"polygon-amoy.infura.io\";\n        case \"matic-mumbai\":\n            return \"polygon-mumbai.infura.io\";\n        case \"optimism\":\n            return \"optimism-mainnet.infura.io\";\n        case \"optimism-goerli\":\n            return \"optimism-goerli.infura.io\";\n        case \"optimism-sepolia\":\n            return \"optimism-sepolia.infura.io\";\n    }\n\n    assertArgument(false, \"unsupported network\", \"network\", name);\n}\n\n/**\n *  The **InfuraWebSocketProvider** connects to the [[link-infura]]\n *  WebSocket end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-infura-signup).\n */\nexport class InfuraWebSocketProvider extends WebSocketProvider implements CommunityResourcable {\n\n    /**\n     *  The Project ID for the INFURA connection.\n     */\n    readonly projectId!: string;\n\n    /**\n     *  The Project Secret.\n     *\n     *  If null, no authenticated requests are made. This should not\n     *  be used outside of private contexts.\n     */\n    readonly projectSecret!: null | string;\n\n    /**\n     *  Creates a new **InfuraWebSocketProvider**.\n     */\n    constructor(network?: Networkish, projectId?: string) {\n        const provider = new InfuraProvider(network, projectId);\n\n        const req = provider._getConnection();\n        assert(!req.credentials, \"INFURA WebSocket project secrets unsupported\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"InfuraProvider.getWebSocketProvider()\" });\n\n        const url = req.url.replace(/^http/i, \"ws\").replace(\"/v3/\", \"/ws/v3/\");\n        super(url, provider._network);\n\n        defineProperties<InfuraWebSocketProvider>(this, {\n            projectId: provider.projectId,\n            projectSecret: provider.projectSecret\n        });\n    }\n\n    isCommunityResource(): boolean {\n        return (this.projectId === defaultProjectId);\n    }\n}\n\n/**\n *  The **InfuraProvider** connects to the [[link-infura]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-infura-signup).\n */\nexport class InfuraProvider extends JsonRpcProvider implements CommunityResourcable {\n    /**\n     *  The Project ID for the INFURA connection.\n     */\n    readonly projectId!: string;\n\n    /**\n     *  The Project Secret.\n     *\n     *  If null, no authenticated requests are made. This should not\n     *  be used outside of private contexts.\n     */\n    readonly projectSecret!: null | string;\n\n    /**\n     *  Creates a new **InfuraProvider**.\n     */\n    constructor(_network?: Networkish, projectId?: null | string, projectSecret?: null | string) {\n        if (_network == null) { _network = \"mainnet\"; }\n        const network = Network.from(_network);\n        if (projectId == null) { projectId = defaultProjectId; }\n        if (projectSecret == null) { projectSecret = null; }\n\n        const request = InfuraProvider.getRequest(network, projectId, projectSecret);\n        super(request, network, { staticNetwork: network });\n\n        defineProperties<InfuraProvider>(this, { projectId, projectSecret });\n    }\n\n    _getProvider(chainId: number): AbstractProvider {\n        try {\n            return new InfuraProvider(chainId, this.projectId, this.projectSecret);\n        } catch (error) { }\n        return super._getProvider(chainId);\n    }\n\n    isCommunityResource(): boolean {\n        return (this.projectId === defaultProjectId);\n    }\n\n    /**\n     *  Creates a new **InfuraWebSocketProvider**.\n     */\n    static getWebSocketProvider(network?: Networkish, projectId?: string): InfuraWebSocketProvider {\n        return new InfuraWebSocketProvider(network, projectId);\n    }\n\n    /**\n     *  Returns a prepared request for connecting to %%network%%\n     *  with %%projectId%% and %%projectSecret%%.\n     */\n    static getRequest(network: Network, projectId?: null | string, projectSecret?: null | string): FetchRequest {\n        if (projectId == null) { projectId = defaultProjectId; }\n        if (projectSecret == null) { projectSecret = null; }\n\n        const request = new FetchRequest(`https:/\\/${ getHost(network.name) }/v3/${ projectId }`);\n        request.allowGzip = true;\n        if (projectSecret) { request.setCredentials(\"\", projectSecret); }\n\n        if (projectId === defaultProjectId) {\n            request.retryFunc = async (request, response, attempt) => {\n                showThrottleMessage(\"InfuraProvider\");\n                return true;\n            };\n        }\n\n        return request;\n    }\n}\n","/**\n *  [[link-quicknode]] provides a third-party service for connecting to\n *  various blockchains over JSON-RPC.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Goerli Testnet (``goerli``)\n *  - Sepolia Testnet (``sepolia``)\n *  - Holesky Testnet (``holesky``)\n *  - Arbitrum (``arbitrum``)\n *  - Arbitrum Goerli Testnet (``arbitrum-goerli``)\n *  - Arbitrum Sepolia Testnet (``arbitrum-sepolia``)\n *  - Base Mainnet (``base``);\n *  - Base Goerli Testnet (``base-goerli``);\n *  - Base Sepolia Testnet (``base-sepolia``);\n *  - BNB Smart Chain Mainnet (``bnb``)\n *  - BNB Smart Chain Testnet (``bnbt``)\n *  - Optimism (``optimism``)\n *  - Optimism Goerli Testnet (``optimism-goerli``)\n *  - Optimism Sepolia Testnet (``optimism-sepolia``)\n *  - Polygon (``matic``)\n *  - Polygon Mumbai Testnet (``matic-mumbai``)\n *\n *  @_subsection: api/providers/thirdparty:QuickNode  [providers-quicknode]\n */\n\nimport {\n    defineProperties, FetchRequest, assertArgument\n} from \"../utils/index.js\";\n\nimport { showThrottleMessage } from \"./community.js\";\nimport { Network } from \"./network.js\";\nimport { JsonRpcProvider } from \"./provider-jsonrpc.js\";\n\nimport type { AbstractProvider } from \"./abstract-provider.js\";\nimport type { CommunityResourcable } from \"./community.js\";\nimport type { Networkish } from \"./network.js\";\n\n\nconst defaultToken = \"919b412a057b5e9c9b6dce193c5a60242d6efadb\";\n\nfunction getHost(name: string): string {\n    switch(name) {\n        case \"mainnet\":\n            return \"ethers.quiknode.pro\";\n        case \"goerli\":\n            return \"ethers.ethereum-goerli.quiknode.pro\";\n        case \"sepolia\":\n            return \"ethers.ethereum-sepolia.quiknode.pro\";\n        case \"holesky\":\n            return \"ethers.ethereum-holesky.quiknode.pro\";\n\n        case \"arbitrum\":\n            return \"ethers.arbitrum-mainnet.quiknode.pro\";\n        case \"arbitrum-goerli\":\n            return \"ethers.arbitrum-goerli.quiknode.pro\";\n        case \"arbitrum-sepolia\":\n            return \"ethers.arbitrum-sepolia.quiknode.pro\";\n        case \"base\":\n            return \"ethers.base-mainnet.quiknode.pro\";\n        case \"base-goerli\":\n            return \"ethers.base-goerli.quiknode.pro\";\n        case \"base-spolia\":\n            return \"ethers.base-sepolia.quiknode.pro\";\n        case \"bnb\":\n            return \"ethers.bsc.quiknode.pro\";\n        case \"bnbt\":\n            return \"ethers.bsc-testnet.quiknode.pro\";\n        case \"matic\":\n            return \"ethers.matic.quiknode.pro\";\n        case \"matic-mumbai\":\n            return \"ethers.matic-testnet.quiknode.pro\";\n        case \"optimism\":\n            return \"ethers.optimism.quiknode.pro\";\n        case \"optimism-goerli\":\n            return \"ethers.optimism-goerli.quiknode.pro\";\n        case \"optimism-sepolia\":\n            return \"ethers.optimism-sepolia.quiknode.pro\";\n        case \"xdai\":\n            return \"ethers.xdai.quiknode.pro\";\n    }\n\n    assertArgument(false, \"unsupported network\", \"network\", name);\n}\n\n/*\n@TODO:\n  These networks are not currently present in the Network\n  default included networks. Research them and ensure they\n  are EVM compatible and work with ethers\n\n  http://ethers.matic-amoy.quiknode.pro\n\n  http://ethers.avalanche-mainnet.quiknode.pro\n  http://ethers.avalanche-testnet.quiknode.pro\n  http://ethers.blast-sepolia.quiknode.pro\n  http://ethers.celo-mainnet.quiknode.pro\n  http://ethers.fantom.quiknode.pro\n  http://ethers.imx-demo.quiknode.pro\n  http://ethers.imx-mainnet.quiknode.pro\n  http://ethers.imx-testnet.quiknode.pro\n  http://ethers.near-mainnet.quiknode.pro\n  http://ethers.near-testnet.quiknode.pro\n  http://ethers.nova-mainnet.quiknode.pro\n  http://ethers.scroll-mainnet.quiknode.pro\n  http://ethers.scroll-testnet.quiknode.pro\n  http://ethers.tron-mainnet.quiknode.pro\n  http://ethers.zkevm-mainnet.quiknode.pro\n  http://ethers.zkevm-testnet.quiknode.pro\n  http://ethers.zksync-mainnet.quiknode.pro\n  http://ethers.zksync-testnet.quiknode.pro\n*/\n\n\n\n/**\n *  The **QuickNodeProvider** connects to the [[link-quicknode]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API token is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-quicknode).\n */\nexport class QuickNodeProvider extends JsonRpcProvider implements CommunityResourcable {\n    /**\n     *  The API token.\n     */\n    readonly token!: string;\n\n    /**\n     *  Creates a new **QuickNodeProvider**.\n     */\n    constructor(_network?: Networkish, token?: null | string) {\n        if (_network == null) { _network = \"mainnet\"; }\n        const network = Network.from(_network);\n        if (token == null) { token = defaultToken; }\n\n        const request = QuickNodeProvider.getRequest(network, token);\n        super(request, network, { staticNetwork: network });\n\n        defineProperties<QuickNodeProvider>(this, { token });\n    }\n\n    _getProvider(chainId: number): AbstractProvider {\n        try {\n            return new QuickNodeProvider(chainId, this.token);\n        } catch (error) { }\n        return super._getProvider(chainId);\n    }\n\n    isCommunityResource(): boolean {\n        return (this.token === defaultToken);\n    }\n\n    /**\n     *  Returns a new request prepared for %%network%% and the\n     *  %%token%%.\n     */\n    static getRequest(network: Network, token?: null | string): FetchRequest {\n        if (token == null) { token = defaultToken; }\n\n        const request = new FetchRequest(`https:/\\/${ getHost(network.name) }/${ token }`);\n        request.allowGzip = true;\n        //if (projectSecret) { request.setCredentials(\"\", projectSecret); }\n\n        if (token === defaultToken) {\n            request.retryFunc = async (request, response, attempt) => {\n                showThrottleMessage(\"QuickNodeProvider\");\n                return true;\n            };\n        }\n\n        return request;\n    }\n}\n","/**\n *  A **FallbackProvider** provides resilience, security and performance\n *  in a way that is customizable and configurable.\n *\n *  @_section: api/providers/fallback-provider:Fallback Provider [about-fallback-provider]\n */\nimport {\n    assert, assertArgument, getBigInt, getNumber, isError\n} from \"../utils/index.js\";\n\nimport { AbstractProvider } from \"./abstract-provider.js\";\nimport { Network } from \"./network.js\"\n\nimport type { PerformActionRequest } from \"./abstract-provider.js\";\nimport type { Networkish } from \"./network.js\"\n\nconst BN_1 = BigInt(\"1\");\nconst BN_2 = BigInt(\"2\");\n\nfunction shuffle<T = any>(array: Array<T>): void {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        const tmp = array[i];\n        array[i] = array[j];\n        array[j] = tmp;\n    }\n}\n\nfunction stall(duration: number): Promise<void> {\n    return new Promise((resolve) => { setTimeout(resolve, duration); });\n}\n\nfunction getTime(): number { return (new Date()).getTime(); }\n\nfunction stringify(value: any): string {\n    return JSON.stringify(value, (key, value) => {\n        if (typeof(value) === \"bigint\") {\n            return { type: \"bigint\", value: value.toString() };\n        }\n        return value;\n    });\n}\n\n/**\n *  A configuration entry for how to use a [[Provider]].\n */\nexport interface FallbackProviderConfig {\n\n    /**\n     *  The provider.\n     */\n    provider: AbstractProvider;\n\n    /**\n     *  The amount of time to wait before kicking off the next provider.\n     *\n     *  Any providers that have not responded can still respond and be\n     *  counted, but this ensures new providers start.\n     */\n    stallTimeout?: number;\n\n    /**\n     *  The priority. Lower priority providers are dispatched first.\n     */\n    priority?: number;\n\n    /**\n     *  The amount of weight a provider is given against the quorum.\n     */\n    weight?: number;\n};\n\nconst defaultConfig = { stallTimeout: 400, priority: 1, weight: 1 };\n\n// We track a bunch of extra stuff that might help debug problems or\n// optimize infrastructure later on.\n/**\n *  The statistics and state maintained for a [[Provider]].\n */\nexport interface FallbackProviderState extends Required<FallbackProviderConfig> {\n\n    /**\n     *  The most recent blockNumber this provider has reported (-2 if none).\n     */\n    blockNumber: number;\n\n    /**\n     *  The number of total requests ever sent to this provider.\n     */\n    requests: number;\n\n    /**\n     *  The number of responses that errored.\n     */\n    errorResponses: number;\n\n    /**\n     *  The number of responses that occured after the result resolved.\n     */\n    lateResponses: number;\n\n    /**\n     *  How many times syncing was required to catch up the expected block.\n     */\n    outOfSync: number;\n\n    /**\n     *  The number of requests which reported unsupported operation.\n     */\n    unsupportedEvents: number;\n\n    /**\n     *  A rolling average (5% current duration) for response time.\n     */\n    rollingDuration: number;\n\n    /**\n     *  The ratio of quorum-agreed results to total.\n     */\n    score: number;\n}\n\ninterface Config extends FallbackProviderState {\n    _updateNumber: null | Promise<any>;\n    _network: null | Network;\n    _totalTime: number;\n    _lastFatalError: null | Error;\n    _lastFatalErrorTimestamp: number;\n}\n\nconst defaultState = {\n    blockNumber: -2, requests: 0, lateResponses: 0, errorResponses: 0,\n    outOfSync: -1, unsupportedEvents: 0, rollingDuration: 0, score: 0,\n    _network: null, _updateNumber: null, _totalTime: 0,\n    _lastFatalError: null, _lastFatalErrorTimestamp: 0\n};\n\n\nasync function waitForSync(config: Config, blockNumber: number): Promise<void> {\n    while (config.blockNumber < 0 || config.blockNumber < blockNumber) {\n        if (!config._updateNumber) {\n            config._updateNumber = (async () => {\n                try {\n                    const blockNumber = await config.provider.getBlockNumber();\n                    if (blockNumber > config.blockNumber) {\n                        config.blockNumber = blockNumber;\n                    }\n                } catch (error: any) {\n                    config.blockNumber = -2;\n                    config._lastFatalError = error;\n                    config._lastFatalErrorTimestamp = getTime();\n                }\n                config._updateNumber = null;\n            })();\n        }\n        await config._updateNumber;\n        config.outOfSync++;\n        if (config._lastFatalError) { break; }\n    }\n}\n\n/**\n *  Additional options to configure a [[FallbackProvider]].\n */\nexport type FallbackProviderOptions = {\n    // How many providers must agree on a value before reporting\n    // back the response\n    quorum?: number;\n\n    // How many providers must have reported the same event\n    // for it to be emitted (currently unimplmented)\n    eventQuorum?: number;\n\n    // How many providers to dispatch each event to simultaneously.\n    // Set this to 0 to use getLog polling, which implies eventQuorum\n    // is equal to quorum. (currently unimplemented)\n    eventWorkers?: number;\n\n    cacheTimeout?: number;\n\n    pollingInterval?: number;\n};\n\ntype RunnerResult = { result: any } | { error: Error };\n\ntype RunnerState = {\n    config: Config;\n    staller: null | Promise<void>;\n    didBump: boolean;\n    perform: null | Promise<any>;\n    result: null | RunnerResult;\n}\n\nfunction _normalize(value: any): string {\n    if (value == null) { return \"null\"; }\n\n    if (Array.isArray(value)) {\n        return \"[\" + (value.map(_normalize)).join(\",\") + \"]\";\n    }\n\n    if (typeof(value) === \"object\" && typeof(value.toJSON) === \"function\") {\n        return _normalize(value.toJSON());\n    }\n\n    switch (typeof(value)) {\n        case \"boolean\": case \"symbol\":\n            return value.toString();\n        case \"bigint\": case \"number\":\n            return BigInt(value).toString();\n        case \"string\":\n            return JSON.stringify(value);\n        case \"object\": {\n            const keys = Object.keys(value);\n            keys.sort();\n            return \"{\" + keys.map((k) => `${ JSON.stringify(k) }:${ _normalize(value[k]) }`).join(\",\") + \"}\";\n        }\n    }\n\n    console.log(\"Could not serialize\", value);\n    throw new Error(\"Hmm...\");\n}\n\nfunction normalizeResult(method: string, value: RunnerResult): { tag: string, value: any } {\n\n    if (\"error\" in value) {\n        const error = value.error;\n\n        let tag: string;\n        if (isError(error, \"CALL_EXCEPTION\")) {\n            tag = _normalize(Object.assign({ }, error, {\n                shortMessage: undefined, reason: undefined, info: undefined\n            }));\n        } else {\n            tag = _normalize(error)\n        }\n\n        return { tag, value: error };\n    }\n\n    const result = value.result;\n    return { tag: _normalize(result), value: result };\n}\n\ntype TallyResult = {\n    tag: string;\n    value: any;\n    weight: number;\n};\n\n// This strategy picks the highest weight result, as long as the weight is\n// equal to or greater than quorum\nfunction checkQuorum(quorum: number, results: Array<TallyResult>): any | Error {\n    const tally: Map<string, { value: any, weight: number }> = new Map();\n    for (const { value, tag, weight } of results) {\n        const t = tally.get(tag) || { value, weight: 0 };\n        t.weight += weight;\n        tally.set(tag, t);\n    }\n\n    let best: null | { value: any, weight: number } = null;\n    for (const r of tally.values()) {\n        if (r.weight >= quorum && (!best || r.weight > best.weight)) {\n            best = r;\n        }\n    }\n\n    if (best) { return best.value; }\n\n    return undefined;\n}\n\nfunction getMedian(quorum: number, results: Array<TallyResult>): undefined | bigint | Error {\n    let resultWeight = 0;\n\n    const errorMap: Map<string, { weight: number, value: Error }> = new Map();\n    let bestError: null | { weight: number, value: Error } = null;\n\n    const values: Array<bigint> = [ ];\n    for (const { value, tag, weight } of results) {\n        if (value instanceof Error) {\n            const e = errorMap.get(tag) || { value, weight: 0 };\n            e.weight += weight;\n            errorMap.set(tag, e);\n\n            if (bestError == null || e.weight > bestError.weight) { bestError = e; }\n        } else {\n            values.push(BigInt(value));\n            resultWeight += weight;\n        }\n    }\n\n    if (resultWeight < quorum) {\n        // We have quorum for an error\n        if (bestError && bestError.weight >= quorum) { return bestError.value; }\n\n        // We do not have quorum for a result\n        return undefined;\n    }\n\n    // Get the sorted values\n    values.sort((a, b) => ((a < b) ? -1: (b > a) ? 1: 0));\n\n    const mid = Math.floor(values.length / 2);\n\n    // Odd-length; take the middle value\n    if (values.length % 2) { return values[mid]; }\n\n    // Even length; take the ceiling of the mean of the center two values\n    return (values[mid - 1] + values[mid] + BN_1) / BN_2;\n}\n\nfunction getAnyResult(quorum: number, results: Array<TallyResult>): undefined | any | Error {\n    // If any value or error meets quorum, that is our preferred result\n    const result = checkQuorum(quorum, results);\n    if (result !== undefined) { return result; }\n\n    // Otherwise, do we have any result?\n    for (const r of results) {\n        if (r.value) { return r.value; }\n    }\n\n    // Nope!\n    return undefined;\n}\n\nfunction getFuzzyMode(quorum: number, results: Array<TallyResult>): undefined | number {\n    if (quorum === 1) { return getNumber(<bigint>getMedian(quorum, results), \"%internal\"); }\n\n    const tally: Map<number, { result: number, weight: number }> = new Map();\n    const add = (result: number, weight: number) => {\n        const t = tally.get(result) || { result, weight: 0 };\n        t.weight += weight;\n        tally.set(result, t);\n    };\n\n    for (const { weight, value } of results) {\n        const r = getNumber(value);\n        add(r - 1, weight);\n        add(r, weight);\n        add(r + 1, weight);\n    }\n\n    let bestWeight = 0;\n    let bestResult: undefined | number = undefined;\n\n    for (const { weight, result } of tally.values()) {\n        // Use this result, if this result meets quorum and has either:\n        // - a better weight\n        // - or equal weight, but the result is larger\n        if (weight >= quorum && (weight > bestWeight || (bestResult != null && weight === bestWeight && result > bestResult))) {\n            bestWeight = weight;\n            bestResult = result;\n        }\n    }\n\n    return bestResult;\n}\n\n/**\n *  A **FallbackProvider** manages several [[Providers]] providing\n *  resilience by switching between slow or misbehaving nodes, security\n *  by requiring multiple backends to aggree and performance by allowing\n *  faster backends to respond earlier.\n *\n */\nexport class FallbackProvider extends AbstractProvider {\n\n    /**\n     *  The number of backends that must agree on a value before it is\n     *  accpeted.\n     */\n    readonly quorum: number;\n\n    /**\n     *  @_ignore:\n     */\n    readonly eventQuorum: number;\n\n    /**\n     *  @_ignore:\n     */\n    readonly eventWorkers: number;\n\n    readonly #configs: Array<Config>;\n\n    #height: number;\n    #initialSyncPromise: null | Promise<void>;\n\n    /**\n     *  Creates a new **FallbackProvider** with %%providers%% connected to\n     *  %%network%%.\n     *\n     *  If a [[Provider]] is included in %%providers%%, defaults are used\n     *  for the configuration.\n     */\n    constructor(providers: Array<AbstractProvider | FallbackProviderConfig>, network?: Networkish, options?: FallbackProviderOptions) {\n        super(network, options);\n\n        this.#configs = providers.map((p) => {\n            if (p instanceof AbstractProvider) {\n                return Object.assign({ provider: p }, defaultConfig, defaultState );\n            } else {\n                return Object.assign({ }, defaultConfig, p, defaultState );\n            }\n        });\n\n        this.#height = -2;\n        this.#initialSyncPromise = null;\n\n        if (options && options.quorum != null) {\n            this.quorum = options.quorum;\n        } else {\n            this.quorum = Math.ceil(this.#configs.reduce((accum, config) => {\n                accum += config.weight;\n                return accum;\n            }, 0) / 2);\n        }\n\n        this.eventQuorum = 1;\n        this.eventWorkers = 1;\n\n        assertArgument(this.quorum <= this.#configs.reduce((a, c) => (a + c.weight), 0),\n            \"quorum exceed provider weight\", \"quorum\", this.quorum);\n    }\n\n    get providerConfigs(): Array<FallbackProviderState> {\n        return this.#configs.map((c) => {\n            const result: any = Object.assign({ }, c);\n            for (const key in result) {\n                if (key[0] === \"_\") { delete result[key]; }\n            }\n            return result;\n        });\n    }\n\n    async _detectNetwork(): Promise<Network> {\n        return Network.from(getBigInt(await this._perform({ method: \"chainId\" })));\n    }\n\n    // @TODO: Add support to select providers to be the event subscriber\n    //_getSubscriber(sub: Subscription): Subscriber {\n    //    throw new Error(\"@TODO\");\n    //}\n\n    /**\n     *  Transforms a %%req%% into the correct method call on %%provider%%.\n     */\n    async _translatePerform(provider: AbstractProvider, req: PerformActionRequest): Promise<any> {\n        switch (req.method) {\n            case \"broadcastTransaction\":\n                return await provider.broadcastTransaction(req.signedTransaction);\n            case \"call\":\n                return await provider.call(Object.assign({ }, req.transaction, { blockTag: req.blockTag }));\n            case \"chainId\":\n                return (await provider.getNetwork()).chainId;\n            case \"estimateGas\":\n                return await provider.estimateGas(req.transaction);\n            case \"getBalance\":\n                return await provider.getBalance(req.address, req.blockTag);\n            case \"getBlock\": {\n                const block = (\"blockHash\" in req) ? req.blockHash: req.blockTag;\n                return await provider.getBlock(block, req.includeTransactions);\n            }\n            case \"getBlockNumber\":\n                return await provider.getBlockNumber();\n            case \"getCode\":\n                return await provider.getCode(req.address, req.blockTag);\n            case \"getGasPrice\":\n                return (await provider.getFeeData()).gasPrice;\n            case \"getPriorityFee\":\n                return (await provider.getFeeData()).maxPriorityFeePerGas;\n            case \"getLogs\":\n                return await provider.getLogs(req.filter);\n            case \"getStorage\":\n                return await provider.getStorage(req.address, req.position, req.blockTag);\n            case \"getTransaction\":\n                return await provider.getTransaction(req.hash);\n            case \"getTransactionCount\":\n                return await provider.getTransactionCount(req.address, req.blockTag);\n            case \"getTransactionReceipt\":\n                return await provider.getTransactionReceipt(req.hash);\n            case \"getTransactionResult\":\n                return await provider.getTransactionResult(req.hash);\n        }\n    }\n\n    // Grab the next (random) config that is not already part of\n    // the running set\n    #getNextConfig(running: Set<RunnerState>): null | Config {\n        // @TODO: Maybe do a check here to favour (heavily) providers that\n        //        do not require waitForSync and disfavour providers that\n        //        seem down-ish or are behaving slowly\n\n        const configs = Array.from(running).map((r) => r.config)\n\n        // Shuffle the states, sorted by priority\n        const allConfigs = this.#configs.slice();\n        shuffle(allConfigs);\n        allConfigs.sort((a, b) => (a.priority - b.priority));\n\n        for (const config of allConfigs) {\n            if (config._lastFatalError) { continue; }\n            if (configs.indexOf(config) === -1) { return config; }\n        }\n\n        return null;\n    }\n\n    // Adds a new runner (if available) to running.\n    #addRunner(running: Set<RunnerState>, req: PerformActionRequest): null | RunnerState {\n        const config = this.#getNextConfig(running);\n\n        // No runners available\n        if (config == null) { return null; }\n\n        // Create a new runner\n        const runner: RunnerState = {\n            config, result: null, didBump: false,\n            perform: null, staller: null\n        };\n\n        const now = getTime();\n\n        // Start performing this operation\n        runner.perform = (async () => {\n            try {\n                config.requests++;\n                const result = await this._translatePerform(config.provider, req);\n                runner.result = { result };\n            } catch (error: any) {\n                config.errorResponses++;\n                runner.result = { error };\n            }\n\n            const dt = (getTime() - now);\n            config._totalTime += dt;\n\n            config.rollingDuration = 0.95 * config.rollingDuration + 0.05 * dt;\n\n            runner.perform = null;\n        })();\n\n        // Start a staller; when this times out, it's time to force\n        // kicking off another runner because we are taking too long\n        runner.staller = (async () => {\n            await stall(config.stallTimeout);\n            runner.staller = null;\n        })();\n\n        running.add(runner);\n        return runner;\n    }\n\n    // Initializes the blockNumber and network for each runner and\n    // blocks until initialized\n    async #initialSync(): Promise<void> {\n        let initialSync = this.#initialSyncPromise;\n        if (!initialSync) {\n            const promises: Array<Promise<any>> = [ ];\n            this.#configs.forEach((config) => {\n                promises.push((async () => {\n                    await waitForSync(config, 0);\n                    if (!config._lastFatalError) {\n                        config._network = await config.provider.getNetwork();\n                    }\n                })());\n            });\n\n            this.#initialSyncPromise = initialSync = (async () => {\n                // Wait for all providers to have a block number and network\n                await Promise.all(promises);\n\n                // Check all the networks match\n                let chainId: null | bigint = null;\n                for (const config of this.#configs) {\n                    if (config._lastFatalError) { continue; }\n                    const network = <Network>(config._network);\n                    if (chainId == null) {\n                        chainId = network.chainId;\n                    } else if (network.chainId !== chainId) {\n                        assert(false, \"cannot mix providers on different networks\", \"UNSUPPORTED_OPERATION\", {\n                            operation: \"new FallbackProvider\"\n                        });\n                    }\n                }\n            })();\n        }\n\n        await initialSync\n    }\n\n\n    async #checkQuorum(running: Set<RunnerState>, req: PerformActionRequest): Promise<any> {\n        // Get all the result objects\n        const results: Array<TallyResult> = [ ];\n        for (const runner of running) {\n            if (runner.result != null) {\n                const { tag, value } = normalizeResult(req.method, runner.result);\n                results.push({ tag, value, weight: runner.config.weight });\n            }\n        }\n\n        // Are there enough results to event meet quorum?\n        if (results.reduce((a, r) => (a + r.weight), 0) < this.quorum) {\n            return undefined;\n        }\n\n        switch (req.method) {\n            case \"getBlockNumber\": {\n                // We need to get the bootstrap block height\n                if (this.#height === -2) {\n                    this.#height = Math.ceil(getNumber(<bigint>getMedian(this.quorum, this.#configs.filter((c) => (!c._lastFatalError)).map((c) => ({\n                        value: c.blockNumber,\n                        tag: getNumber(c.blockNumber).toString(),\n                        weight: c.weight\n                    })))));\n                }\n\n                // Find the mode across all the providers, allowing for\n                // a little drift between block heights\n                const mode = getFuzzyMode(this.quorum, results);\n                if (mode === undefined) { return undefined; }\n                if (mode > this.#height) { this.#height = mode; }\n                return this.#height;\n            }\n\n            case \"getGasPrice\":\n            case \"getPriorityFee\":\n            case \"estimateGas\":\n                return getMedian(this.quorum, results);\n\n            case \"getBlock\":\n                // Pending blocks are in the mempool and already\n                // quite untrustworthy; just grab anything\n                if (\"blockTag\" in req && req.blockTag === \"pending\") {\n                    return getAnyResult(this.quorum, results);\n                }\n                return checkQuorum(this.quorum, results);\n\n            case \"call\":\n            case \"chainId\":\n            case \"getBalance\":\n            case \"getTransactionCount\":\n            case \"getCode\":\n            case \"getStorage\":\n            case \"getTransaction\":\n            case \"getTransactionReceipt\":\n            case \"getLogs\":\n                return checkQuorum(this.quorum, results);\n\n            case \"broadcastTransaction\":\n                return getAnyResult(this.quorum, results);\n        }\n\n        assert(false, \"unsupported method\", \"UNSUPPORTED_OPERATION\", {\n            operation: `_perform(${ stringify((<any>req).method) })`\n        });\n    }\n\n    async #waitForQuorum(running: Set<RunnerState>, req: PerformActionRequest): Promise<any> {\n        if (running.size === 0) { throw new Error(\"no runners?!\"); }\n\n        // Any promises that are interesting to watch for; an expired stall\n        // or a successful perform\n        const interesting: Array<Promise<void>> = [ ];\n\n        let newRunners = 0;\n        for (const runner of running) {\n\n            // No responses, yet; keep an eye on it\n            if (runner.perform) {\n                interesting.push(runner.perform);\n            }\n\n            // Still stalling...\n            if (runner.staller) {\n                interesting.push(runner.staller);\n                continue;\n            }\n\n            // This runner has already triggered another runner\n            if (runner.didBump) { continue; }\n\n            // Got a response (result or error) or stalled; kick off another runner\n            runner.didBump = true;\n            newRunners++;\n        }\n\n        // Check if we have reached quorum on a result (or error)\n        const value = await this.#checkQuorum(running, req);\n        if (value !== undefined) {\n            if (value instanceof Error) { throw value; }\n            return value;\n        }\n\n        // Add any new runners, because a staller timed out or a result\n        // or error response came in.\n        for (let i = 0; i < newRunners; i++) {\n            this.#addRunner(running, req);\n        }\n\n        // All providers have returned, and we have no result\n\n        assert(interesting.length > 0, \"quorum not met\", \"SERVER_ERROR\", {\n            request: \"%sub-requests\",\n            info: { request: req, results: Array.from(running).map((r) => stringify(r.result)) }\n        });\n\n        // Wait for someone to either complete its perform or stall out\n        await Promise.race(interesting);\n\n        // This is recursive, but at worst case the depth is 2x the\n        // number of providers (each has a perform and a staller)\n        return await this.#waitForQuorum(running, req);\n    }\n\n    async _perform<T = any>(req: PerformActionRequest): Promise<T> {\n        // Broadcasting a transaction is rare (ish) and already incurs\n        // a cost on the user, so spamming is safe-ish. Just send it to\n        // every backend.\n        if (req.method === \"broadcastTransaction\") {\n            // Once any broadcast provides a positive result, use it. No\n            // need to wait for anyone else\n            const results: Array<null | TallyResult> = this.#configs.map((c) => null);\n            const broadcasts = this.#configs.map(async ({ provider, weight }, index) => {\n                try {\n                    const result = await provider._perform(req);\n                    results[index] = Object.assign(normalizeResult(req.method, { result }), { weight });\n                } catch (error: any) {\n                    results[index] = Object.assign(normalizeResult(req.method, { error }), { weight });\n                }\n            });\n\n            // As each promise finishes...\n            while (true) {\n                // Check for a valid broadcast result\n                const done = <Array<any>>results.filter((r) => (r != null));\n                for (const { value } of done) {\n                    if (!(value instanceof Error)) { return value; }\n                }\n\n                // Check for a legit broadcast error (one which we cannot\n                // recover from; some nodes may return the following red\n                // herring events:\n                // - alredy seend (UNKNOWN_ERROR)\n                // - NONCE_EXPIRED\n                // - REPLACEMENT_UNDERPRICED\n                const result = checkQuorum(this.quorum, <Array<any>>results.filter((r) => (r != null)));\n                if (isError(result, \"INSUFFICIENT_FUNDS\")) {\n                    throw result;\n                }\n\n                // Kick off the next provider (if any)\n                const waiting = broadcasts.filter((b, i) => (results[i] == null));\n                if (waiting.length === 0) { break; }\n                await Promise.race(waiting);\n            }\n\n            // Use standard quorum results; any result was returned above,\n            // so this will find any error that met quorum if any\n            const result = getAnyResult(this.quorum, <Array<any>>results);\n            assert(result !== undefined, \"problem multi-broadcasting\", \"SERVER_ERROR\", {\n                request: \"%sub-requests\",\n                info: { request: req, results: results.map(stringify) }\n            })\n            if (result instanceof Error) { throw result; }\n            return result;\n        }\n\n        await this.#initialSync();\n\n        // Bootstrap enough runners to meet quorum\n        const running: Set<RunnerState> = new Set();\n        let inflightQuorum = 0;\n        while (true) {\n            const runner = this.#addRunner(running, req);\n            if (runner == null) { break; }\n            inflightQuorum += runner.config.weight;\n            if (inflightQuorum >= this.quorum) { break; }\n        }\n\n        const result = await this.#waitForQuorum(running, req);\n\n        // Track requests sent to a provider that are still\n        // outstanding after quorum has been otherwise found\n        for (const runner of running) {\n            if (runner.perform && runner.result == null) {\n                runner.config.lateResponses++;\n            }\n        }\n\n        return result;\n    }\n\n    async destroy(): Promise<void> {\n        for (const { provider } of this.#configs) {\n            provider.destroy();\n        }\n        super.destroy();\n    }\n}\n","\nimport { assert } from \"../utils/index.js\";\n\nimport { AnkrProvider } from \"./provider-ankr.js\";\nimport { AlchemyProvider } from \"./provider-alchemy.js\";\n//import { BlockscoutProvider } from \"./provider-blockscout.js\";\nimport { ChainstackProvider } from \"./provider-chainstack.js\";\nimport { CloudflareProvider } from \"./provider-cloudflare.js\";\nimport { EtherscanProvider } from \"./provider-etherscan.js\";\nimport { InfuraProvider } from \"./provider-infura.js\";\n//import { PocketProvider } from \"./provider-pocket.js\";\nimport { QuickNodeProvider } from \"./provider-quicknode.js\";\n\nimport { FallbackProvider } from \"./provider-fallback.js\";\nimport { JsonRpcProvider } from \"./provider-jsonrpc.js\";\nimport { Network } from \"./network.js\";\nimport { WebSocketProvider } from \"./provider-websocket.js\";\n\nimport type { AbstractProvider } from \"./abstract-provider.js\";\nimport type { Networkish } from \"./network.js\";\nimport { WebSocketLike } from \"./provider-websocket.js\";\n\nfunction isWebSocketLike(value: any): value is WebSocketLike {\n    return (value && typeof(value.send) === \"function\" &&\n        typeof(value.close) === \"function\");\n}\n\nconst Testnets = \"goerli kovan sepolia classicKotti optimism-goerli arbitrum-goerli matic-mumbai bnbt\".split(\" \");\n\n/**\n *  Returns a default provider for %%network%%.\n *\n *  If %%network%% is a [[WebSocketLike]] or string that begins with\n *  ``\"ws:\"`` or ``\"wss:\"``, a [[WebSocketProvider]] is returned backed\n *  by that WebSocket or URL.\n *\n *  If %%network%% is a string that begins with ``\"HTTP:\"`` or ``\"HTTPS:\"``,\n *  a [[JsonRpcProvider]] is returned connected to that URL.\n *\n *  Otherwise, a default provider is created backed by well-known public\n *  Web3 backends (such as [[link-infura]]) using community-provided API\n *  keys.\n *\n *  The %%options%% allows specifying custom API keys per backend (setting\n *  an API key to ``\"-\"`` will omit that provider) and ``options.exclusive``\n *  can be set to either a backend name or and array of backend names, which\n *  will whitelist **only** those backends.\n *\n *  Current backend strings supported are:\n *  - ``\"alchemy\"``\n *  - ``\"ankr\"``\n *  - ``\"cloudflare\"``\n *  - ``\"chainstack\"``\n *  - ``\"etherscan\"``\n *  - ``\"infura\"``\n *  - ``\"publicPolygon\"``\n *  - ``\"quicknode\"``\n *\n *  @example:\n *    // Connect to a local Geth node\n *    provider = getDefaultProvider(\"http://localhost:8545/\");\n *\n *    // Connect to Ethereum mainnet with any current and future\n *    // third-party services available\n *    provider = getDefaultProvider(\"mainnet\");\n *\n *    // Connect to Polygon, but only allow Etherscan and\n *    // INFURA and use \"MY_API_KEY\" in calls to Etherscan.\n *    provider = getDefaultProvider(\"matic\", {\n *      etherscan: \"MY_API_KEY\",\n *      exclusive: [ \"etherscan\", \"infura\" ]\n *    });\n */\nexport function getDefaultProvider(network?: string | Networkish | WebSocketLike, options?: any): AbstractProvider {\n    if (options == null) { options = { }; }\n\n    const allowService = (name: string) => {\n        if (options[name] === \"-\") { return false; }\n        if (typeof(options.exclusive) === \"string\") {\n            return (name === options.exclusive);\n        }\n        if (Array.isArray(options.exclusive)) {\n            return (options.exclusive.indexOf(name) !== -1);\n        }\n        return true;\n    };\n\n    if (typeof(network) === \"string\" && network.match(/^https?:/)) {\n        return new JsonRpcProvider(network);\n    }\n\n    if (typeof(network) === \"string\" && network.match(/^wss?:/) || isWebSocketLike(network)) {\n        return new WebSocketProvider(network);\n    }\n\n    // Get the network and name, if possible\n    let staticNetwork: null | Network = null;\n    try {\n        staticNetwork = Network.from(network);\n    } catch (error) { }\n\n\n    const providers: Array<AbstractProvider> = [ ];\n\n    if (allowService(\"publicPolygon\") && staticNetwork) {\n        if (staticNetwork.name === \"matic\") {\n            providers.push(new JsonRpcProvider(\"https:/\\/polygon-rpc.com/\", staticNetwork, { staticNetwork }));\n        } else if (staticNetwork.name === \"matic-amoy\") {\n            providers.push(new JsonRpcProvider(\"https:/\\/rpc-amoy.polygon.technology/\", staticNetwork, { staticNetwork }));\n        }\n    }\n\n    if (allowService(\"alchemy\")) {\n        try {\n            providers.push(new AlchemyProvider(network, options.alchemy));\n        } catch (error) { }\n    }\n\n    if (allowService(\"ankr\") && options.ankr != null) {\n        try {\n            providers.push(new AnkrProvider(network, options.ankr));\n        } catch (error) { }\n    }\n/* Temporarily remove until custom error issue is fixed\n    if (allowService(\"blockscout\")) {\n        try {\n            providers.push(new BlockscoutProvider(network, options.blockscout));\n        } catch (error) { }\n    }\n*/\n    if (allowService(\"chainstack\")) {\n        try {\n            providers.push(new ChainstackProvider(network, options.chainstack));\n        } catch (error) { }\n    }\n\n    if (allowService(\"cloudflare\")) {\n        try {\n            providers.push(new CloudflareProvider(network));\n        } catch (error) { }\n    }\n\n    if (allowService(\"etherscan\")) {\n        try {\n            providers.push(new EtherscanProvider(network, options.etherscan));\n        } catch (error) { }\n    }\n\n    if (allowService(\"infura\")) {\n        try {\n            let projectId = options.infura;\n            let projectSecret: undefined | string = undefined;\n            if (typeof(projectId) === \"object\") {\n                projectSecret = projectId.projectSecret;\n                projectId = projectId.projectId;\n            }\n            providers.push(new InfuraProvider(network, projectId, projectSecret));\n        } catch (error) { }\n    }\n/*\n    if (options.pocket !== \"-\") {\n        try {\n            let appId = options.pocket;\n            let secretKey: undefined | string = undefined;\n            let loadBalancer: undefined | boolean = undefined;\n            if (typeof(appId) === \"object\") {\n                loadBalancer = !!appId.loadBalancer;\n                secretKey = appId.secretKey;\n                appId = appId.appId;\n            }\n            providers.push(new PocketProvider(network, appId, secretKey, loadBalancer));\n        } catch (error) { console.log(error); }\n    }\n*/\n    if (allowService(\"quicknode\")) {\n        try {\n            let token = options.quicknode;\n            providers.push(new QuickNodeProvider(network, token));\n        } catch (error) { }\n    }\n\n    assert(providers.length, \"unsupported default network\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"getDefaultProvider\"\n    });\n\n    // No need for a FallbackProvider\n    if (providers.length === 1) { return providers[0]; }\n\n    // We use the floor because public third-party providers can be unreliable,\n    // so a low number of providers with a large quorum will fail too often\n    let quorum = Math.floor(providers.length / 2);\n    if (quorum > 2) { quorum = 2; }\n\n    // Testnets don't need as strong a security gaurantee and speed is\n    // more useful during testing\n    if (staticNetwork && Testnets.indexOf(staticNetwork.name) !== -1) { quorum = 1; }\n\n    // Provided override qorum takes priority\n    if (options && options.quorum) { quorum = options.quorum; }\n\n    return new FallbackProvider(providers, undefined, { quorum });\n}\n","import { defineProperties } from \"../utils/index.js\";\nimport { AbstractSigner } from \"./abstract-signer.js\";\n\nimport type { TypedDataDomain, TypedDataField } from \"../hash/index.js\";\n\nimport type {\n    BlockTag, Provider, TransactionRequest, TransactionResponse\n} from \"./provider.js\";\nimport type { Signer } from \"./signer.js\";\n\n\n/**\n *  A **NonceManager** wraps another [[Signer]] and automatically manages\n *  the nonce, ensuring serialized and sequential nonces are used during\n *  transaction.\n */\nexport class NonceManager extends AbstractSigner {\n    /**\n     *  The Signer being managed.\n     */\n    signer!: Signer;\n\n    #noncePromise: null | Promise<number>;\n    #delta: number;\n\n    /**\n     *  Creates a new **NonceManager** to manage %%signer%%.\n     */\n    constructor(signer: Signer) {\n        super(signer.provider);\n        defineProperties<NonceManager>(this, { signer });\n\n        this.#noncePromise = null;\n        this.#delta = 0;\n    }\n\n    async getAddress(): Promise<string> {\n        return this.signer.getAddress();\n    }\n\n    connect(provider: null | Provider): NonceManager {\n        return new NonceManager(this.signer.connect(provider));\n    }\n\n    async getNonce(blockTag?: BlockTag): Promise<number> {\n        if (blockTag === \"pending\") {\n            if (this.#noncePromise == null) {\n                this.#noncePromise = super.getNonce(\"pending\");\n            }\n\n            const delta = this.#delta;\n            return (await this.#noncePromise) + delta;\n        }\n\n        return super.getNonce(blockTag);\n    }\n\n    /**\n     *  Manually increment the nonce. This may be useful when managng\n     *  offline transactions.\n     */\n    increment(): void {\n        this.#delta++;\n    }\n\n    /**\n     *  Resets the nonce, causing the **NonceManager** to reload the current\n     *  nonce from the blockchain on the next transaction.\n     */\n    reset(): void {\n        this.#delta = 0;\n        this.#noncePromise = null;\n    }\n\n    async sendTransaction(tx: TransactionRequest): Promise<TransactionResponse> {\n        const noncePromise = this.getNonce(\"pending\");\n        this.increment();\n\n        tx = await this.signer.populateTransaction(tx);\n        tx.nonce = await noncePromise;\n\n        // @TODO: Maybe handle interesting/recoverable errors?\n        // Like don't increment if the tx was certainly not sent\n        return await this.signer.sendTransaction(tx);\n    }\n\n    signTransaction(tx: TransactionRequest): Promise<string> {\n        return this.signer.signTransaction(tx);\n    }\n\n    signMessage(message: string | Uint8Array): Promise<string> {\n        return this.signer.signMessage(message);\n    }\n\n    signTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): Promise<string> {\n        return this.signer.signTypedData(domain, types, value);\n    }\n}\n","\n/**\n *  [[link-blockscout]] provides a third-party service for connecting to\n *  various blockchains over JSON-RPC.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Sepolia Testnet (``sepolia``)\n *  - Holesky Testnet (``holesky``)\n *  - Ethereum Classic (``classic``)\n *  - Arbitrum (``arbitrum``)\n *  - Base (``base``)\n *  - Base Sepolia Testnet (``base-sepolia``)\n *  - Gnosis (``xdai``)\n *  - Optimism (``optimism``)\n *  - Optimism Sepolia Testnet (``optimism-sepolia``)\n *  - Polygon (``matic``)\n *\n *  @_subsection: api/providers/thirdparty:Blockscout  [providers-blockscout]\n */\nimport {\n    assertArgument, defineProperties, FetchRequest, isHexString\n} from \"../utils/index.js\";\n\nimport { Network } from \"./network.js\";\nimport { JsonRpcProvider } from \"./provider-jsonrpc.js\";\n\nimport type { AbstractProvider, PerformActionRequest } from \"./abstract-provider.js\";\nimport type { CommunityResourcable } from \"./community.js\";\nimport type { Networkish } from \"./network.js\";\nimport type { JsonRpcPayload, JsonRpcError } from \"./provider-jsonrpc.js\";\n\n\nfunction getUrl(name: string): string {\n    switch(name) {\n        case \"mainnet\":\n            return \"https:/\\/eth.blockscout.com/api/eth-rpc\";\n        case \"sepolia\":\n            return \"https:/\\/eth-sepolia.blockscout.com/api/eth-rpc\";\n        case \"holesky\":\n            return \"https:/\\/eth-holesky.blockscout.com/api/eth-rpc\";\n\n        case \"classic\":\n            return \"https:/\\/etc.blockscout.com/api/eth-rpc\";\n\n        case \"arbitrum\":\n            return \"https:/\\/arbitrum.blockscout.com/api/eth-rpc\";\n\n        case \"base\":\n            return \"https:/\\/base.blockscout.com/api/eth-rpc\";\n        case \"base-sepolia\":\n            return \"https:/\\/base-sepolia.blockscout.com/api/eth-rpc\";\n\n        case \"matic\":\n            return \"https:/\\/polygon.blockscout.com/api/eth-rpc\";\n\n        case \"optimism\":\n            return \"https:/\\/optimism.blockscout.com/api/eth-rpc\";\n        case \"optimism-sepolia\":\n            return \"https:/\\/optimism-sepolia.blockscout.com/api/eth-rpc\";\n\n        case \"xdai\":\n            return \"https:/\\/gnosis.blockscout.com/api/eth-rpc\";\n    }\n\n    assertArgument(false, \"unsupported network\", \"network\", name);\n}\n\n\n/**\n *  The **BlockscoutProvider** connects to the [[link-blockscout]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-blockscout).\n */\nexport class BlockscoutProvider extends JsonRpcProvider implements CommunityResourcable {\n    /**\n     *  The API key.\n     */\n    readonly apiKey!: null | string;\n\n    /**\n     *  Creates a new **BlockscoutProvider**.\n     */\n    constructor(_network?: Networkish, apiKey?: null | string) {\n        if (_network == null) { _network = \"mainnet\"; }\n        const network = Network.from(_network);\n\n        if (apiKey == null) { apiKey = null; }\n\n        const request = BlockscoutProvider.getRequest(network);\n        super(request, network, { staticNetwork: network });\n\n        defineProperties<BlockscoutProvider>(this, { apiKey });\n    }\n\n    _getProvider(chainId: number): AbstractProvider {\n        try {\n            return new BlockscoutProvider(chainId, this.apiKey);\n        } catch (error) { }\n        return super._getProvider(chainId);\n    }\n\n    isCommunityResource(): boolean {\n        return (this.apiKey === null);\n    }\n\n    getRpcRequest(req: PerformActionRequest): null | { method: string, args: Array<any> } {\n        // Blockscout enforces the TAG argument for estimateGas\n        const resp = super.getRpcRequest(req);\n        if (resp && resp.method === \"eth_estimateGas\" && resp.args.length == 1) {\n            resp.args = resp.args.slice();\n            resp.args.push(\"latest\");\n        }\n        return resp;\n    }\n\n    getRpcError(payload: JsonRpcPayload, _error: JsonRpcError): Error {\n        const error = _error ? _error.error: null;\n\n        // Blockscout currently drops the VM result and replaces it with a\n        // human-readable string, so we need to make it machine-readable.\n        if (error && error.code === -32015 && !isHexString(error.data || \"\", true)) {\n            const panicCodes = <Record<string, string>>{\n                \"assert(false)\": \"01\",\n                \"arithmetic underflow or overflow\": \"11\",\n                \"division or modulo by zero\": \"12\",\n                \"out-of-bounds array access; popping on an empty array\": \"31\",\n                \"out-of-bounds access of an array or bytesN\": \"32\"\n            };\n\n            let panicCode = \"\";\n            if (error.message === \"VM execution error.\") {\n                // eth_call passes this message\n                panicCode = panicCodes[error.data] || \"\";\n            } else if (panicCodes[error.message || \"\"]) {\n                panicCode = panicCodes[error.message || \"\"];\n            }\n\n            if (panicCode) {\n                error.message += ` (reverted: ${ error.data })`;\n                error.data = \"0x4e487b7100000000000000000000000000000000000000000000000000000000000000\" + panicCode;\n            }\n\n        } else if (error && error.code === -32000) {\n            if (error.message === \"wrong transaction nonce\") {\n                error.message += \" (nonce too low)\";\n            }\n        }\n\n        return super.getRpcError(payload, _error);\n    }\n\n    /**\n     *  Returns a prepared request for connecting to %%network%%\n     *  with %%apiKey%%.\n     */\n    static getRequest(network: Network): FetchRequest {\n        const request = new FetchRequest(getUrl(network.name));\n        request.allowGzip = true;\n        return request;\n    }\n}\n","/**\n *  [[link-pocket]] provides a third-party service for connecting to\n *  various blockchains over JSON-RPC.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Goerli Testnet (``goerli``)\n *  - Polygon (``matic``)\n *  - Arbitrum (``arbitrum``)\n *\n *  @_subsection: api/providers/thirdparty:Pocket  [providers-pocket]\n */\nimport {\n    defineProperties, FetchRequest, assertArgument\n} from \"../utils/index.js\";\n\nimport { AbstractProvider } from \"./abstract-provider.js\";\nimport { showThrottleMessage } from \"./community.js\";\nimport { Network } from \"./network.js\";\nimport { JsonRpcProvider } from \"./provider-jsonrpc.js\";\n\nimport type { CommunityResourcable } from \"./community.js\";\nimport type { Networkish } from \"./network.js\";\n\nconst defaultApplicationId = \"62e1ad51b37b8e00394bda3b\";\n\nfunction getHost(name: string): string {\n    switch (name) {\n        case \"mainnet\":\n            return  \"eth-mainnet.gateway.pokt.network\";\n        case \"goerli\":\n            return \"eth-goerli.gateway.pokt.network\";\n\n        case \"matic\":\n            return \"poly-mainnet.gateway.pokt.network\";\n        case \"matic-mumbai\":\n            return \"polygon-mumbai-rpc.gateway.pokt.network\";\n    }\n\n    assertArgument(false, \"unsupported network\", \"network\", name);\n}\n\n\n/**\n *  The **PocketProvider** connects to the [[link-pocket]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-pocket-signup).\n */\nexport class PocketProvider extends JsonRpcProvider implements CommunityResourcable {\n\n    /**\n     *  The Application ID for the Pocket connection.\n     */\n    readonly applicationId!: string;\n\n    /**\n     *  The Application Secret for making authenticated requests\n     *  to the Pocket connection.\n     */\n    readonly applicationSecret!: null | string;\n\n    /**\n     *  Create a new **PocketProvider**.\n     *\n     *  By default connecting to ``mainnet`` with a highly throttled\n     *  API key.\n     */\n    constructor(_network?: Networkish, applicationId?: null | string, applicationSecret?: null | string) {\n        if (_network == null) { _network = \"mainnet\"; }\n        const network = Network.from(_network);\n        if (applicationId == null) { applicationId = defaultApplicationId; }\n        if (applicationSecret == null) { applicationSecret = null; }\n\n        const options = { staticNetwork: network };\n\n        const request = PocketProvider.getRequest(network, applicationId, applicationSecret);\n        super(request, network, options);\n\n        defineProperties<PocketProvider>(this, { applicationId, applicationSecret });\n    }\n\n    _getProvider(chainId: number): AbstractProvider {\n        try {\n            return new PocketProvider(chainId, this.applicationId, this.applicationSecret);\n        } catch (error) { }\n        return super._getProvider(chainId);\n    }\n\n    /**\n     *  Returns a prepared request for connecting to %%network%% with\n     *  %%applicationId%%.\n     */\n    static getRequest(network: Network, applicationId?: null | string, applicationSecret?: null | string): FetchRequest {\n        if (applicationId == null) { applicationId = defaultApplicationId; }\n\n        const request = new FetchRequest(`https:/\\/${ getHost(network.name) }/v1/lb/${ applicationId }`);\n        request.allowGzip = true;\n\n        if (applicationSecret) {\n            request.setCredentials(\"\", applicationSecret);\n        }\n\n        if (applicationId === defaultApplicationId) {\n            request.retryFunc = async (request, response, attempt) => {\n                showThrottleMessage(\"PocketProvider\");\n                return true;\n            };\n        }\n\n        return request;\n    }\n\n    isCommunityResource(): boolean {\n        return (this.applicationId === defaultApplicationId);\n    }\n}\n","const IpcSocketProvider = undefined;\n\nexport { IpcSocketProvider };\n","/**\n *  Explain UUID and link to RFC here.\n *\n *  @_subsection: api/utils:UUID  [about-uuid]\n */\nimport { getBytes, hexlify } from \"./data.js\";\n\nimport type { BytesLike } from \"./index.js\";\n\n/**\n *  Returns the version 4 [[link-uuid]] for the %%randomBytes%%.\n *\n *  @see: https://www.ietf.org/rfc/rfc4122.txt (Section 4.4)\n */\nexport function uuidV4(randomBytes: BytesLike): string {\n    const bytes = getBytes(randomBytes, \"randomBytes\");\n\n    // Section: 4.1.3:\n    // - time_hi_and_version[12:16] = 0b0100\n    bytes[6] = (bytes[6] & 0x0f) | 0x40;\n\n    // Section 4.4\n    // - clock_seq_hi_and_reserved[6] = 0b0\n    // - clock_seq_hi_and_reserved[7] = 0b1\n    bytes[8] = (bytes[8] & 0x3f) | 0x80;\n\n    const value = hexlify(bytes);\n\n    return [\n       value.substring(2, 10),\n       value.substring(10, 14),\n       value.substring(14, 18),\n       value.substring(18, 22),\n       value.substring(22, 34),\n    ].join(\"-\");\n}\n","import { assertArgument } from \"../utils/index.js\";\n\n\nconst subsChrs = \" !#$%&'()*+,-./<=>?@[]^_`{|}~\";\nconst Word = /^[a-z]*$/i;\n\nfunction unfold(words: Array<string>, sep: string): Array<string> {\n    let initial = 97;\n    return words.reduce((accum, word) => {\n        if (word === sep) {\n            initial++;\n        } else if (word.match(Word)) {\n            accum.push(String.fromCharCode(initial) + word);\n        } else {\n            initial = 97;\n            accum.push(word);\n        }\n        return accum;\n    }, <Array<string>>[]);\n}\n\n/**\n *  @_ignore\n */\nexport function decode(data: string, subs: string): Array<string> {\n\n    // Replace all the substitutions with their expanded form\n    for (let i = subsChrs.length - 1; i >= 0; i--) {\n        data = data.split(subsChrs[i]).join(subs.substring(2 * i, 2 * i + 2));\n    }\n\n    // Get all tle clumps; each suffix, first-increment and second-increment\n    const clumps: Array<string> = [ ];\n    const leftover = data.replace(/(:|([0-9])|([A-Z][a-z]*))/g, (all, item, semi, word) => {\n        if (semi) {\n            for (let i = parseInt(semi); i >= 0; i--) { clumps.push(\";\"); }\n        } else {\n            clumps.push(item.toLowerCase());\n        }\n        return \"\";\n    });\n    /* c8 ignore start */\n    if (leftover) { throw new Error(`leftovers: ${ JSON.stringify(leftover) }`); }\n    /* c8 ignore stop */\n\n    return unfold(unfold(clumps, \";\"), \":\");\n}\n\n/**\n *  @_ignore\n */\nexport function decodeOwl(data: string): Array<string> {\n    assertArgument(data[0] === \"0\", \"unsupported auwl data\", \"data\", data);\n\n    return decode(\n        data.substring(1 + 2 * subsChrs.length),\n        data.substring(1, 1 + 2 * subsChrs.length));\n}\n","import { defineProperties } from \"../utils/index.js\";\n\n/**\n *  A Wordlist represents a collection of language-specific\n *  words used to encode and devoce [[link-bip-39]] encoded data\n *  by mapping words to 11-bit values and vice versa.\n */\nexport abstract class Wordlist {\n    locale!: string;\n\n    /**\n     *  Creates a new Wordlist instance.\n     *\n     *  Sub-classes MUST call this if they provide their own constructor,\n     *  passing in the locale string of the language.\n     *\n     *  Generally there is no need to create instances of a Wordlist,\n     *  since each language-specific Wordlist creates an instance and\n     *  there is no state kept internally, so they are safe to share.\n     */\n    constructor(locale: string) {\n        defineProperties<Wordlist>(this, { locale });\n    }\n\n    /**\n     *  Sub-classes may override this to provide a language-specific\n     *  method for spliting %%phrase%% into individual words.\n     *\n     *  By default, %%phrase%% is split using any sequences of\n     *  white-space as defined by regular expressions (i.e. ``/\\s+/``).\n     */\n    split(phrase: string): Array<string> {\n        return phrase.toLowerCase().split(/\\s+/g)\n    }\n\n    /**\n     *  Sub-classes may override this to provider a language-specific\n     *  method for joining %%words%% into a phrase.\n     *\n     *  By default, %%words%% are joined by a single space.\n     */\n    join(words: Array<string>): string {\n        return words.join(\" \");\n    }\n\n    /**\n     *  Maps an 11-bit value into its coresponding word in the list.\n     *\n     *  Sub-classes MUST override this.\n     */\n    abstract getWord(index: number): string;\n\n    /**\n     *  Maps a word to its corresponding 11-bit value.\n     *\n     *  Sub-classes MUST override this.\n     */\n    abstract getWordIndex(word: string): number;\n}\n","\n// Use the encode-latin.js script to create the necessary\n// data files to be consumed by this class\n\nimport { id } from \"../hash/index.js\";\nimport { assertArgument } from \"../utils/index.js\";\n\nimport { decodeOwl } from \"./decode-owl.js\";\nimport { Wordlist } from \"./wordlist.js\";\n\n/**\n *  An OWL format Wordlist is an encoding method that exploits\n *  the general locality of alphabetically sorted words to\n *  achieve a simple but effective means of compression.\n *\n *  This class is generally not useful to most developers as\n *  it is used mainly internally to keep Wordlists for languages\n *  based on ASCII-7 small.\n *\n *  If necessary, there are tools within the ``generation/`` folder\n *  to create the necessary data.\n */\nexport class WordlistOwl extends Wordlist {\n    #data: string;\n    #checksum: string;\n\n    /**\n     *  Creates a new Wordlist for %%locale%% using the OWL %%data%%\n     *  and validated against the %%checksum%%.\n     */\n    constructor(locale: string, data: string, checksum: string) {\n        super(locale);\n        this.#data = data;\n        this.#checksum = checksum;\n        this.#words = null;\n    }\n\n    /**\n     *  The OWL-encoded data.\n     */\n    get _data(): string { return this.#data; }\n\n    /**\n     *  Decode all the words for the wordlist.\n     */\n    _decodeWords(): Array<string> {\n        return decodeOwl(this.#data);\n    }\n\n    #words: null | Array<string>;\n    #loadWords(): Array<string> {\n        if (this.#words == null) {\n            const words = this._decodeWords();\n\n            // Verify the computed list matches the official list\n            const checksum = id(words.join(\"\\n\") + \"\\n\");\n            /* c8 ignore start */\n            if (checksum !== this.#checksum) {\n                throw new Error(`BIP39 Wordlist for ${ this.locale } FAILED`);\n            }\n            /* c8 ignore stop */\n\n            this.#words = words;\n        }\n        return this.#words;\n    }\n\n    getWord(index: number): string {\n        const words = this.#loadWords();\n        assertArgument(index >= 0 && index < words.length, `invalid word index: ${ index }`, \"index\", index);\n        return words[index];\n    }\n\n    getWordIndex(word: string): number {\n        return this.#loadWords().indexOf(word);\n    }\n}\n","import { WordlistOwl } from \"./wordlist-owl.js\";\n\nconst words = \"0erleonalorenseinceregesticitStanvetearctssi#ch2Athck&tneLl0And#Il.yLeOutO=S|S%b/ra@SurdU'0Ce[Cid|CountCu'Hie=IdOu,-Qui*Ro[TT]T%T*[Tu$0AptDD-tD*[Ju,M.UltV<)Vi)0Rob-0FairF%dRaid0A(EEntRee0Ead0MRRp%tS!_rmBumCoholErtI&LLeyLowMo,O}PhaReadySoT Ways0A>urAz(gOngOuntU'd0Aly,Ch%Ci|G G!GryIm$K!Noun)Nu$O` Sw T&naTiqueXietyY1ArtOlogyPe?P!Pro=Ril1ChCt-EaEnaGueMMedM%MyOundR<+Re,Ri=RowTTefa@Ti,Tw%k0KPe@SaultSetSi,SumeThma0H!>OmTa{T&dT.udeTra@0Ct]D.Gu,NtTh%ToTumn0Era+OcadoOid0AkeA*AyEsomeFulKw?d0Is:ByChel%C#D+GL<)Lc#y~MbooN<aNn RRelyRga(R*lSeS-SketTt!3A^AnAutyCau'ComeEfF%eG(Ha=H(dLie=LowLtN^Nef./TrayTt Twe&Y#d3Cyc!DKeNdOlogyRdR`Tt _{AdeAmeAnketA,EakE[IndOodO[omOu'UeUrUsh_rdAtDyIlMbNeNusOkO,Rd R(gRrowSsTtomUn)XY_{etA(AndA[A=EadEezeI{Id+IefIghtIngIskOccoliOk&OnzeOomO` OwnUsh2Bb!DdyD+tFf$oIldLbLkL!tNd!Nk Rd&Rg R,SS(e[SyTt Y Zz:Bba+B(B!CtusGeKe~LmM aMpNN$N)lNdyNn#NoeNvasNy#Pab!P.$Pta(RRb#RdRgoRpetRryRtSeShS(o/!Su$TT$ogT^Teg%yTt!UghtU'Ut]Ve3Il(gL yM|NsusNturyRe$Rta(_irAlkAmp]An+AosApt Ar+A'AtEapE{Ee'EfErryE,I{&IefIldIm}yOi)Oo'R#-U{!UnkUrn0G?Nnam#Rc!Tiz&TyVil_imApArifyAwAyE<ErkEv I{I|IffImbIn-IpO{OgO'O`OudOwnUbUmpU, Ut^_^A,C#utDeFfeeIlInL!@L%LumnMb(eMeMf%tM-Mm#Mp<yNc tNdu@NfirmNg*[N}@Nsid NtrolNv()OkOlPp PyR$ReRnR*@/Tt#U^UntryUp!Ur'Us(V Yo>_{Ad!AftAmA}AshAt AwlAzyEamEd.EekEwI{etImeIspIt-OpO[Ou^OwdUci$UelUi'Umb!Un^UshYY,$2BeLtu*PPbo?dRiousRr|Rta(R=Sh]/omTe3C!:DMa+MpN)Ng R(gShUght WnY3AlBa>BrisCadeCemb CideCl(eC%a>C*a'ErF&'F(eFyG*eLayLiv M<dMi'Ni$Nti,NyP?tP&dPos.P`PutyRi=ScribeS tSignSkSpair/royTailTe@VelopVi)Vo>3AgramAlAm#dAryCeE'lEtFf G.$Gn.yLemmaNn NosaurRe@RtSag*eScov Sea'ShSmi[S%d Splay/<)V tVideV%)Zzy5Ct%Cum|G~Lph(Ma(Na>NkeyN%OrSeUb!Ve_ftAg#AmaA,-AwEamE[IftIllInkIpI=OpUmY2CkMbNeR(g/T^Ty1Arf1Nam-:G G!RlyRnR`Sily/Sy1HoOlogyOnomy0GeItUca>1F%t0G1GhtTh 2BowD E@r-Eg<tEm|Eph<tEvat%I>Se0B?kBodyBra)Er+Ot]PloyPow Pty0Ab!A@DD![D%'EmyErgyF%)Ga+G(eH<)JoyLi,OughR-hRollSu*T Ti*TryVelope1Isode0U$Uip0AA'OdeOs]R%Upt0CapeSayS&)Ta>0Ern$H-s1Id&)IlOkeOl=1A@Amp!Ce[Ch<+C.eCludeCu'Ecu>Erci'Hau,Hib.I!I,ItOt-P<dPe@Pi*Pla(Po'P*[T&dTra0EEbrow:Br-CeCultyDeIntI`~L'MeMilyMousNNcyNtasyRmSh]TT$Th TigueUltV%.e3Atu*Bru?yD $EEdElMa!N)/iv$T^V W3B Ct]EldGu*LeLmLt N$NdNeNg NishReRmR,Sc$ShTT}[X_gAmeAshAtAv%EeIghtIpOatO{O%Ow UidUshY_mCusGIlLd~owOdOtR)Re,R+tRkRtu}RumRw?dSsil/ UndX_gi!AmeEqu|EshI&dIn+OgOntO,OwnOz&U.2ElNNnyRna)RyTu*:D+tInLaxy~ yMePRa+Rba+Rd&Rl-Rm|SSpTeTh U+Ze3N $NiusN*Nt!Nu(e/u*2O,0AntFtGg!Ng RaffeRlVe_dAn)A*A[IdeImp'ObeOomOryO=OwUe_tDde[LdOdO'RillaSpelSsipV nWn_bA)A(AntApeA[Av.yEatE&IdIefItOc yOupOwUnt_rdE[IdeIltIt?N3M:B.IrLfMm M, NdPpyRb%RdRshR=,TVeWkZ?d3AdAl`ArtAvyD+hogIght~oLmetLpNRo3Dd&Gh~NtPRe/%y5BbyCkeyLdLeLiday~owMeNeyOdPeRnRr%R'Sp.$/TelUrV 5BGeM<Mb!M%Nd*dNgryNtRd!RryRtSb<d3Brid:1EOn0EaEntifyLe2N%e4LLeg$L}[0A+Ita>M&'Mu}Pa@Po'Pro=Pul'0ChCludeComeC*a'DexD-a>Do%Du,ryF<tFl-tF%mHa!H .Iti$Je@JuryMa>N Noc|PutQuiryS<eSe@SideSpi*/$lTa@T e,ToVe,V.eVol=3On0L<dOla>Sue0Em1Ory:CketGu?RZz3AlousAns~yWel9BInKeUr}yY5D+I)MpNg!Ni%Nk/:Ng?oo3EnEpT^upY3CkDD}yNdNgdomSsTT^&TeTt&Wi4EeIfeO{Ow:BBelB%Dd DyKeMpNgua+PtopR+T T(UghUndryVaWWnWsu.Y Zy3Ad AfArnA=Ctu*FtGG$G&dIsu*M#NdNg`NsOp?dSs#Tt Vel3ArB tyBr?yC&'FeFtGhtKeMbM.NkOnQuid/Tt!VeZ?d5AdAnB, C$CkG-NelyNgOpTt yUdUn+VeY$5CkyGga+Mb N?N^Xury3R-s:Ch(eDG-G}tIdIlInJ%KeMm$NNa+Nda>NgoNs]Nu$P!Rb!R^Rg(R(eRketRria+SkSs/ T^T i$ThTrixTt XimumZe3AdowAnAsu*AtCh<-D$DiaLodyLtMb M%yNt]NuRcyR+R.RryShSsa+T$Thod3Dd!DnightLk~]M-NdNimumN%Nu>Rac!Rr%S ySs/akeXXedXtu*5Bi!DelDifyMM|N.%NkeyN, N`OnR$ReRn(gSqu.oTh T]T%Unta(U'VeVie5ChFf(LeLtiplySc!SeumShroomS-/Tu$3Self/ yTh:I=MePk(Rrow/yT]Tu*3ArCkEdGati=G!@I` PhewR=/TTw%kUtr$V WsXt3CeGht5B!I'M(eeOd!Rm$R`SeTab!TeTh(gTi)VelW5C!?Mb R'T:K0EyJe@Li+Scu*S =Ta(Vious0CurE<Tob 0Or1FF Fi)T&2L1Ay0DI=Ymp-0It0CeEI#L(eLy1EnEraIn]Po'T]1An+B.Ch?dD D(?yG<I|Ig($Ph<0Tr-h0H 0Tdo%T TputTside0AlEnEr0NN 0Yg&0/ 0O}:CtDd!GeIrLa)LmNdaNelN-N` P RadeR|RkRrotRtySsT^ThTi|TrolTt nU'VeYm|3A)AnutArAs<tL-<NN$tyNcilOp!Pp Rfe@Rm.Rs#T2O}OtoRa'Ys-$0AnoCn-Ctu*E)GGe#~LotNkO} Pe/olT^Zza_)A}tA,-A>AyEa'Ed+U{UgUn+2EmEtIntL?LeLi)NdNyOlPul?Rt]S.]Ssib!/TatoTt yV tyWd W _@i)Ai'Ed-tEf Epa*Es|EttyEv|I)IdeIm?yIntI%.yIs#Iva>IzeOb!mO)[Odu)Of.OgramOje@Omo>OofOp tyOsp O>@OudOvide2Bl-Dd(g~LpL'Mpk(N^PilPpyR^a'R.yRpo'R'ShTZz!3Ramid:99Al.yAntumArt E,]I{ItIzO>:Bb.Cco#CeCkD?DioIlInI'~yMpN^NdomN+PidReTeTh V&WZ%3AdyAlAs#BelBuildC$lCei=CipeC%dCyc!Du)F!@F%mFu'G]G*tGul?Je@LaxLea'LiefLyMa(Memb M(dMo=Nd NewNtOp&PairPeatPla)P%tQui*ScueSemb!Si,Sour)Sp#'SultTi*T*atTurnUn]Ve$ViewW?d2Y`m0BBb#CeChDeD+F!GhtGidNgOtPp!SkTu$V$V 5AdA,BotBu,CketM<)OfOkieOmSeTa>UghUndU>Y$5Bb DeGLeNNwayR$:DDd!D}[FeIlLadLm#L#LtLu>MeMp!NdTisfyToshiU)Usa+VeY1A!AnA*Att E}HemeHoolI&)I[%sOrp]OutRapRe&RiptRub1AAr^As#AtC#dC*tCt]Cur.yEdEkGm|Le@~M(?Ni%N'Nt&)RiesRvi)Ss]Tt!TupV&_dowAftAllowA*EdEllEriffIeldIftI}IpIv O{OeOotOpOrtOuld O=RimpRugUff!Y0Bl(gCkDeE+GhtGnL|Lk~yLv Mil?Mp!N)NgR&/ Tua>XZe1A>Et^IIllInIrtUll0AbAmEepEnd I)IdeIghtImOg<OtOwUsh0AllArtI!OkeOo`0A{AkeApIffOw0ApCc Ci$CkDaFtL?Ldi LidLut]L=Me#eNgOnRryRtUlUndUpUr)U`0A)A*Ati$AwnEakEci$EedEllEndH eI)Id IkeInIr.L.OilOns%O#OrtOtRayReadR(gY0Ua*UeezeUir*l_b!AdiumAffA+AirsAmpAndArtA>AyEakEelEmEpE*oI{IllIngO{Oma^O}OolOryO=Ra>gyReetRikeR#gRugg!Ud|UffUmb!Y!0Bje@Bm.BwayC)[ChDd&Ff G?G+,ItMm NNnyN'tP PplyP*meReRfa)R+Rpri'RroundR=ySpe@/a(1AllowAmpApArmE?EetIftImIngIt^Ord1MbolMptomRup/em:B!Ck!GIlL|LkNkPeR+tSk/eTtooXi3A^Am~NN<tNnisNtRm/Xt_nkAtEmeEnE%yE*EyIngIsOughtReeRi=RowUmbUnd 0CketDeG LtMb MeNyPRedSsueT!5A,BaccoDayDdl EGe` I!tK&MatoM%rowNeNgueNightOlO`PP-Pp!R^RnadoRtoi'SsT$Uri,W?dW WnY_{AdeAff-Ag-A(Ansf ApAshA=lAyEatEeEndI$IbeI{Igg ImIpOphyOub!U{UeUlyUmpetU,U`Y2BeIt]Mb!NaN}lRkeyRnRt!1El=EntyI)InI,O1PeP-$:5Ly5B*lla0Ab!Awa*C!Cov D DoFairFoldHappyIf%mIqueItIv 'KnownLo{TilUsu$Veil1Da>GradeHoldOnP Set1B<Ge0A+EEdEfulE![U$0Il.y:C<tCuumGueLidL!yL=NNishP%Rious/Ult3H-!L=tNd%Ntu*NueRbRifyRs]RyS'lT <3Ab!Br<tCiousCt%yDeoEw~a+Nta+Ol(Rtu$RusSaS.Su$T$Vid5C$I)IdLc<oLumeTeYa+:GeG#ItLk~LnutNtRfa*RmRri%ShSp/eT VeY3Al`Ap#ArA'lA` BDd(gEk&dIrdLcome/T_!AtEatEelEnE*IpIsp 0DeD`FeLd~NNdowNeNgNkNn Nt ReSdomSeShT}[5LfM<Nd OdOlRdRkRldRryR`_pE{E,!I,I>Ong::Rd3Ar~ow9UUngU`:3BraRo9NeO\";\nconst checksum = \"0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60\";\n\nlet wordlist: null | LangEn = null;\n\n/**\n *  The [[link-bip39-en]] for [mnemonic phrases](link-bip-39).\n *\n *  @_docloc: api/wordlists\n */\nexport class LangEn extends WordlistOwl {\n\n    /**\n     *  Creates a new instance of the English language Wordlist.\n     *\n     *  This should be unnecessary most of the time as the exported\n     *  [[langEn]] should suffice.\n     *\n     *  @_ignore:\n     */\n    constructor() { super(\"en\", words, checksum); }\n\n    /**\n     *  Returns a singleton instance of a ``LangEn``, creating it\n     *  if this is the first time being called.\n     */\n    static wordlist(): LangEn {\n        if (wordlist == null) { wordlist = new LangEn(); }\n        return wordlist;\n    }\n}\n","import { pbkdf2, sha256 } from \"../crypto/index.js\";\nimport {\n    defineProperties, getBytes, hexlify, assertNormalize, assertPrivate, assertArgument, toUtf8Bytes\n} from \"../utils/index.js\";\nimport { LangEn } from \"../wordlists/lang-en.js\";\n\nimport type { BytesLike } from \"../utils/index.js\";\nimport type { Wordlist } from \"../wordlists/index.js\";\n\n\n// Returns a byte with the MSB bits set\nfunction getUpperMask(bits: number): number {\n   return ((1 << bits) - 1) << (8 - bits) & 0xff;\n}\n\n// Returns a byte with the LSB bits set\nfunction getLowerMask(bits: number): number {\n   return ((1 << bits) - 1) & 0xff;\n}\n\n\nfunction mnemonicToEntropy(mnemonic: string, wordlist?: null | Wordlist): string {\n    assertNormalize(\"NFKD\");\n\n    if (wordlist == null) { wordlist = LangEn.wordlist(); }\n\n    const words = wordlist.split(mnemonic);\n    assertArgument((words.length % 3) === 0 && words.length >= 12 && words.length <= 24,\n        \"invalid mnemonic length\", \"mnemonic\", \"[ REDACTED ]\");\n\n    const entropy = new Uint8Array(Math.ceil(11 * words.length / 8));\n\n    let offset = 0;\n    for (let i = 0; i < words.length; i++) {\n        let index = wordlist.getWordIndex(words[i].normalize(\"NFKD\"));\n        assertArgument(index >= 0, `invalid mnemonic word at index ${ i }`, \"mnemonic\", \"[ REDACTED ]\");\n\n        for (let bit = 0; bit < 11; bit++) {\n            if (index & (1 << (10 - bit))) {\n                entropy[offset >> 3] |= (1 << (7 - (offset % 8)));\n            }\n            offset++;\n        }\n    }\n\n    const entropyBits = 32 * words.length / 3;\n\n\n    const checksumBits = words.length / 3;\n    const checksumMask = getUpperMask(checksumBits);\n\n    const checksum = getBytes(sha256(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;\n\n    assertArgument(checksum === (entropy[entropy.length - 1] & checksumMask),\n        \"invalid mnemonic checksum\", \"mnemonic\", \"[ REDACTED ]\");\n\n    return hexlify(entropy.slice(0, entropyBits / 8));\n}\n\nfunction entropyToMnemonic(entropy: Uint8Array, wordlist?: null | Wordlist): string {\n\n    assertArgument((entropy.length % 4) === 0 && entropy.length >= 16 && entropy.length <= 32,\n        \"invalid entropy size\", \"entropy\", \"[ REDACTED ]\");\n\n    if (wordlist == null) { wordlist = LangEn.wordlist(); }\n\n    const indices: Array<number> = [ 0 ];\n\n    let remainingBits = 11;\n    for (let i = 0; i < entropy.length; i++) {\n\n        // Consume the whole byte (with still more to go)\n        if (remainingBits > 8) {\n            indices[indices.length - 1] <<= 8;\n            indices[indices.length - 1] |= entropy[i];\n\n            remainingBits -= 8;\n\n        // This byte will complete an 11-bit index\n        } else {\n            indices[indices.length - 1] <<= remainingBits;\n            indices[indices.length - 1] |= entropy[i] >> (8 - remainingBits);\n\n            // Start the next word\n            indices.push(entropy[i] & getLowerMask(8 - remainingBits));\n\n            remainingBits += 3;\n        }\n    }\n\n    // Compute the checksum bits\n    const checksumBits = entropy.length / 4;\n    const checksum = parseInt(sha256(entropy).substring(2, 4), 16) & getUpperMask(checksumBits);\n\n    // Shift the checksum into the word indices\n    indices[indices.length - 1] <<= checksumBits;\n    indices[indices.length - 1] |= (checksum >> (8 - checksumBits));\n\n    return wordlist.join(indices.map((index) => (<Wordlist>wordlist).getWord(index)));\n}\n\nconst _guard = { };\n\n/**\n *  A **Mnemonic** wraps all properties required to compute [[link-bip-39]]\n *  seeds and convert between phrases and entropy.\n */\nexport class Mnemonic {\n    /**\n     *  The mnemonic phrase of 12, 15, 18, 21 or 24 words.\n     *\n     *  Use the [[wordlist]] ``split`` method to get the individual words.\n     */\n    readonly phrase!: string;\n\n    /**\n     *  The password used for this mnemonic. If no password is used this\n     *  is the empty string (i.e. ``\"\"``) as per the specification.\n     */\n    readonly password!: string;\n\n    /**\n     *  The wordlist for this mnemonic.\n     */\n    readonly wordlist!: Wordlist;\n\n    /**\n     *  The underlying entropy which the mnemonic encodes.\n     */\n    readonly entropy!: string;\n\n    /**\n     *  @private\n     */\n    constructor(guard: any, entropy: string, phrase: string, password?: null | string, wordlist?: null | Wordlist) {\n        if (password == null) { password = \"\"; }\n        if (wordlist == null) { wordlist = LangEn.wordlist(); }\n        assertPrivate(guard, _guard, \"Mnemonic\");\n        defineProperties<Mnemonic>(this, { phrase, password, wordlist, entropy });\n    }\n\n    /**\n     *  Returns the seed for the mnemonic.\n     */\n    computeSeed(): string {\n        const salt = toUtf8Bytes(\"mnemonic\" + this.password, \"NFKD\");\n        return pbkdf2(toUtf8Bytes(this.phrase, \"NFKD\"), salt, 2048, 64, \"sha512\");\n    }\n\n    /**\n     *  Creates a new Mnemonic for the %%phrase%%.\n     *\n     *  The default %%password%% is the empty string and the default\n     *  wordlist is the [English wordlists](LangEn).\n     */\n    static fromPhrase(phrase: string, password?: null | string, wordlist?: null | Wordlist): Mnemonic {\n        // Normalize the case and space; throws if invalid\n        const entropy = mnemonicToEntropy(phrase, wordlist);\n        phrase = entropyToMnemonic(getBytes(entropy), wordlist);\n        return new Mnemonic(_guard, entropy, phrase, password, wordlist);\n    }\n\n    /**\n     *  Create a new **Mnemonic** from the %%entropy%%.\n     *\n     *  The default %%password%% is the empty string and the default\n     *  wordlist is the [English wordlists](LangEn).\n     */\n    static fromEntropy(_entropy: BytesLike, password?: null | string, wordlist?: null | Wordlist): Mnemonic {\n        const entropy = getBytes(_entropy, \"entropy\");\n        const phrase = entropyToMnemonic(entropy, wordlist);\n        return new Mnemonic(_guard, hexlify(entropy), phrase, password, wordlist);\n    }\n\n    /**\n     *  Returns the phrase for %%mnemonic%%.\n     */\n    static entropyToPhrase(_entropy: BytesLike, wordlist?: null | Wordlist): string {\n        const entropy = getBytes(_entropy, \"entropy\");\n        return entropyToMnemonic(entropy, wordlist);\n    }\n\n    /**\n     *  Returns the entropy for %%phrase%%.\n     */\n    static phraseToEntropy(phrase: string, wordlist?: null | Wordlist): string {\n        return mnemonicToEntropy(phrase, wordlist);\n    }\n\n    /**\n     *  Returns true if %%phrase%% is a valid [[link-bip-39]] phrase.\n     *\n     *  This checks all the provided words belong to the %%wordlist%%,\n     *  that the length is valid and the checksum is correct.\n     */\n    static isValidMnemonic(phrase: string, wordlist?: null | Wordlist): boolean {\n        try {\n            mnemonicToEntropy(phrase, wordlist);\n            return true;\n        } catch (error) { }\n        return false;\n    }\n}\n","import { getAddress, resolveAddress } from \"../address/index.js\";\nimport {\n    hashAuthorization, hashMessage, TypedDataEncoder\n} from \"../hash/index.js\";\nimport { AbstractSigner, copyRequest } from \"../providers/index.js\";\nimport { computeAddress, Transaction } from \"../transaction/index.js\";\nimport {\n    defineProperties, getBigInt, resolveProperties, assert, assertArgument\n} from \"../utils/index.js\";\n\nimport type { SigningKey } from \"../crypto/index.js\";\nimport type {\n    AuthorizationRequest, TypedDataDomain, TypedDataField\n} from \"../hash/index.js\";\nimport type { Provider, TransactionRequest } from \"../providers/index.js\";\nimport type { Authorization, TransactionLike } from \"../transaction/index.js\";\n\n\n/**\n *  The **BaseWallet** is a stream-lined implementation of a\n *  [[Signer]] that operates with a private key.\n *\n *  It is preferred to use the [[Wallet]] class, as it offers\n *  additional functionality and simplifies loading a variety\n *  of JSON formats, Mnemonic Phrases, etc.\n *\n *  This class may be of use for those attempting to implement\n *  a minimal Signer.\n */\nexport class BaseWallet extends AbstractSigner {\n    /**\n     *  The wallet address.\n     */\n    readonly address!: string;\n\n    readonly #signingKey: SigningKey;\n\n    /**\n     *  Creates a new BaseWallet for %%privateKey%%, optionally\n     *  connected to %%provider%%.\n     *\n     *  If %%provider%% is not specified, only offline methods can\n     *  be used.\n     */\n    constructor(privateKey: SigningKey, provider?: null | Provider) {\n        super(provider);\n\n        assertArgument(privateKey && typeof(privateKey.sign) === \"function\", \"invalid private key\", \"privateKey\", \"[ REDACTED ]\");\n\n        this.#signingKey = privateKey;\n\n        const address = computeAddress(this.signingKey.publicKey);\n        defineProperties<BaseWallet>(this, { address });\n    }\n\n    // Store private values behind getters to reduce visibility\n    // in console.log\n\n    /**\n     *  The [[SigningKey]] used for signing payloads.\n     */\n    get signingKey(): SigningKey { return this.#signingKey; }\n\n    /**\n     *  The private key for this wallet.\n     */\n    get privateKey(): string { return this.signingKey.privateKey; }\n\n    async getAddress(): Promise<string> { return this.address; }\n\n    connect(provider: null | Provider): BaseWallet {\n        return new BaseWallet(this.#signingKey, provider);\n    }\n\n    async signTransaction(tx: TransactionRequest): Promise<string> {\n        tx = copyRequest(tx);\n\n        // Replace any Addressable or ENS name with an address\n        const { to, from } = await resolveProperties({\n            to: (tx.to ? resolveAddress(tx.to, this): undefined),\n            from: (tx.from ? resolveAddress(tx.from, this): undefined)\n        });\n\n        if (to != null) { tx.to = to; }\n        if (from != null) { tx.from = from; }\n\n        if (tx.from != null) {\n            assertArgument(getAddress(<string>(tx.from)) === this.address,\n                \"transaction from address mismatch\", \"tx.from\", tx.from);\n            delete tx.from;\n        }\n\n        // Build the transaction\n        const btx = Transaction.from(<TransactionLike<string>>tx);\n        btx.signature = this.signingKey.sign(btx.unsignedHash);\n\n        return btx.serialized;\n    }\n\n    async signMessage(message: string | Uint8Array): Promise<string> {\n        return this.signMessageSync(message);\n    }\n\n    // @TODO: Add a secialized signTx and signTyped sync that enforces\n    // all parameters are known?\n    /**\n     *  Returns the signature for %%message%% signed with this wallet.\n     */\n    signMessageSync(message: string | Uint8Array): string {\n        return this.signingKey.sign(hashMessage(message)).serialized;\n    }\n\n    /**\n     *  Returns the Authorization for %%auth%%.\n     */\n    authorizeSync(auth: AuthorizationRequest): Authorization {\n        assertArgument(typeof(auth.address) === \"string\",\n          \"invalid address for authorizeSync\", \"auth.address\", auth);\n\n        const signature = this.signingKey.sign(hashAuthorization(auth));\n        return Object.assign({ }, {\n            address: getAddress(auth.address),\n            nonce: getBigInt(auth.nonce || 0),\n            chainId: getBigInt(auth.chainId || 0),\n        }, { signature });\n    }\n\n    /**\n     *  Resolves to the Authorization for %%auth%%.\n     */\n    async authorize(auth: AuthorizationRequest): Promise<Authorization> {\n        auth = Object.assign({ }, auth, {\n            address: await resolveAddress(auth.address, this)\n        });\n        return this.authorizeSync(await this.populateAuthorization(auth));\n    }\n\n    async signTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): Promise<string> {\n\n        // Populate any ENS names\n        const populated = await TypedDataEncoder.resolveNames(domain, types, value, async (name: string) => {\n            // @TODO: this should use resolveName; addresses don't\n            //        need a provider\n\n            assert(this.provider != null, \"cannot resolve ENS names without a provider\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"resolveName\",\n                info: { name }\n            });\n\n            const address = await this.provider.resolveName(name);\n            assert(address != null, \"unconfigured ENS name\", \"UNCONFIGURED_NAME\", {\n                value: name\n            });\n\n            return address;\n        });\n\n        return this.signingKey.sign(TypedDataEncoder.hash(populated.domain, types, populated.value)).serialized;\n    }\n}\n","/*! MIT License. Copyright 2015-2022 Richard Moore <me@ricmoo.com>. See LICENSE.txt. */\n\n// Number of rounds by keysize\nconst numberOfRounds: Record<number, number> = { 16: 10, 24: 12, 32: 14 };\n\n// Round constant words\nconst rcon = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91];\n\n// S-box and Inverse S-box (S is for Substitution)\nconst S = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16];\nconst Si =[0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d];\n\n// Transformations for encryption\nconst T1 = [0xc66363a5, 0xf87c7c84, 0xee777799, 0xf67b7b8d, 0xfff2f20d, 0xd66b6bbd, 0xde6f6fb1, 0x91c5c554, 0x60303050, 0x02010103, 0xce6767a9, 0x562b2b7d, 0xe7fefe19, 0xb5d7d762, 0x4dababe6, 0xec76769a, 0x8fcaca45, 0x1f82829d, 0x89c9c940, 0xfa7d7d87, 0xeffafa15, 0xb25959eb, 0x8e4747c9, 0xfbf0f00b, 0x41adadec, 0xb3d4d467, 0x5fa2a2fd, 0x45afafea, 0x239c9cbf, 0x53a4a4f7, 0xe4727296, 0x9bc0c05b, 0x75b7b7c2, 0xe1fdfd1c, 0x3d9393ae, 0x4c26266a, 0x6c36365a, 0x7e3f3f41, 0xf5f7f702, 0x83cccc4f, 0x6834345c, 0x51a5a5f4, 0xd1e5e534, 0xf9f1f108, 0xe2717193, 0xabd8d873, 0x62313153, 0x2a15153f, 0x0804040c, 0x95c7c752, 0x46232365, 0x9dc3c35e, 0x30181828, 0x379696a1, 0x0a05050f, 0x2f9a9ab5, 0x0e070709, 0x24121236, 0x1b80809b, 0xdfe2e23d, 0xcdebeb26, 0x4e272769, 0x7fb2b2cd, 0xea75759f, 0x1209091b, 0x1d83839e, 0x582c2c74, 0x341a1a2e, 0x361b1b2d, 0xdc6e6eb2, 0xb45a5aee, 0x5ba0a0fb, 0xa45252f6, 0x763b3b4d, 0xb7d6d661, 0x7db3b3ce, 0x5229297b, 0xdde3e33e, 0x5e2f2f71, 0x13848497, 0xa65353f5, 0xb9d1d168, 0x00000000, 0xc1eded2c, 0x40202060, 0xe3fcfc1f, 0x79b1b1c8, 0xb65b5bed, 0xd46a6abe, 0x8dcbcb46, 0x67bebed9, 0x7239394b, 0x944a4ade, 0x984c4cd4, 0xb05858e8, 0x85cfcf4a, 0xbbd0d06b, 0xc5efef2a, 0x4faaaae5, 0xedfbfb16, 0x864343c5, 0x9a4d4dd7, 0x66333355, 0x11858594, 0x8a4545cf, 0xe9f9f910, 0x04020206, 0xfe7f7f81, 0xa05050f0, 0x783c3c44, 0x259f9fba, 0x4ba8a8e3, 0xa25151f3, 0x5da3a3fe, 0x804040c0, 0x058f8f8a, 0x3f9292ad, 0x219d9dbc, 0x70383848, 0xf1f5f504, 0x63bcbcdf, 0x77b6b6c1, 0xafdada75, 0x42212163, 0x20101030, 0xe5ffff1a, 0xfdf3f30e, 0xbfd2d26d, 0x81cdcd4c, 0x180c0c14, 0x26131335, 0xc3ecec2f, 0xbe5f5fe1, 0x359797a2, 0x884444cc, 0x2e171739, 0x93c4c457, 0x55a7a7f2, 0xfc7e7e82, 0x7a3d3d47, 0xc86464ac, 0xba5d5de7, 0x3219192b, 0xe6737395, 0xc06060a0, 0x19818198, 0x9e4f4fd1, 0xa3dcdc7f, 0x44222266, 0x542a2a7e, 0x3b9090ab, 0x0b888883, 0x8c4646ca, 0xc7eeee29, 0x6bb8b8d3, 0x2814143c, 0xa7dede79, 0xbc5e5ee2, 0x160b0b1d, 0xaddbdb76, 0xdbe0e03b, 0x64323256, 0x743a3a4e, 0x140a0a1e, 0x924949db, 0x0c06060a, 0x4824246c, 0xb85c5ce4, 0x9fc2c25d, 0xbdd3d36e, 0x43acacef, 0xc46262a6, 0x399191a8, 0x319595a4, 0xd3e4e437, 0xf279798b, 0xd5e7e732, 0x8bc8c843, 0x6e373759, 0xda6d6db7, 0x018d8d8c, 0xb1d5d564, 0x9c4e4ed2, 0x49a9a9e0, 0xd86c6cb4, 0xac5656fa, 0xf3f4f407, 0xcfeaea25, 0xca6565af, 0xf47a7a8e, 0x47aeaee9, 0x10080818, 0x6fbabad5, 0xf0787888, 0x4a25256f, 0x5c2e2e72, 0x381c1c24, 0x57a6a6f1, 0x73b4b4c7, 0x97c6c651, 0xcbe8e823, 0xa1dddd7c, 0xe874749c, 0x3e1f1f21, 0x964b4bdd, 0x61bdbddc, 0x0d8b8b86, 0x0f8a8a85, 0xe0707090, 0x7c3e3e42, 0x71b5b5c4, 0xcc6666aa, 0x904848d8, 0x06030305, 0xf7f6f601, 0x1c0e0e12, 0xc26161a3, 0x6a35355f, 0xae5757f9, 0x69b9b9d0, 0x17868691, 0x99c1c158, 0x3a1d1d27, 0x279e9eb9, 0xd9e1e138, 0xebf8f813, 0x2b9898b3, 0x22111133, 0xd26969bb, 0xa9d9d970, 0x078e8e89, 0x339494a7, 0x2d9b9bb6, 0x3c1e1e22, 0x15878792, 0xc9e9e920, 0x87cece49, 0xaa5555ff, 0x50282878, 0xa5dfdf7a, 0x038c8c8f, 0x59a1a1f8, 0x09898980, 0x1a0d0d17, 0x65bfbfda, 0xd7e6e631, 0x844242c6, 0xd06868b8, 0x824141c3, 0x299999b0, 0x5a2d2d77, 0x1e0f0f11, 0x7bb0b0cb, 0xa85454fc, 0x6dbbbbd6, 0x2c16163a];\nconst T2 = [0xa5c66363, 0x84f87c7c, 0x99ee7777, 0x8df67b7b, 0x0dfff2f2, 0xbdd66b6b, 0xb1de6f6f, 0x5491c5c5, 0x50603030, 0x03020101, 0xa9ce6767, 0x7d562b2b, 0x19e7fefe, 0x62b5d7d7, 0xe64dabab, 0x9aec7676, 0x458fcaca, 0x9d1f8282, 0x4089c9c9, 0x87fa7d7d, 0x15effafa, 0xebb25959, 0xc98e4747, 0x0bfbf0f0, 0xec41adad, 0x67b3d4d4, 0xfd5fa2a2, 0xea45afaf, 0xbf239c9c, 0xf753a4a4, 0x96e47272, 0x5b9bc0c0, 0xc275b7b7, 0x1ce1fdfd, 0xae3d9393, 0x6a4c2626, 0x5a6c3636, 0x417e3f3f, 0x02f5f7f7, 0x4f83cccc, 0x5c683434, 0xf451a5a5, 0x34d1e5e5, 0x08f9f1f1, 0x93e27171, 0x73abd8d8, 0x53623131, 0x3f2a1515, 0x0c080404, 0x5295c7c7, 0x65462323, 0x5e9dc3c3, 0x28301818, 0xa1379696, 0x0f0a0505, 0xb52f9a9a, 0x090e0707, 0x36241212, 0x9b1b8080, 0x3ddfe2e2, 0x26cdebeb, 0x694e2727, 0xcd7fb2b2, 0x9fea7575, 0x1b120909, 0x9e1d8383, 0x74582c2c, 0x2e341a1a, 0x2d361b1b, 0xb2dc6e6e, 0xeeb45a5a, 0xfb5ba0a0, 0xf6a45252, 0x4d763b3b, 0x61b7d6d6, 0xce7db3b3, 0x7b522929, 0x3edde3e3, 0x715e2f2f, 0x97138484, 0xf5a65353, 0x68b9d1d1, 0x00000000, 0x2cc1eded, 0x60402020, 0x1fe3fcfc, 0xc879b1b1, 0xedb65b5b, 0xbed46a6a, 0x468dcbcb, 0xd967bebe, 0x4b723939, 0xde944a4a, 0xd4984c4c, 0xe8b05858, 0x4a85cfcf, 0x6bbbd0d0, 0x2ac5efef, 0xe54faaaa, 0x16edfbfb, 0xc5864343, 0xd79a4d4d, 0x55663333, 0x94118585, 0xcf8a4545, 0x10e9f9f9, 0x06040202, 0x81fe7f7f, 0xf0a05050, 0x44783c3c, 0xba259f9f, 0xe34ba8a8, 0xf3a25151, 0xfe5da3a3, 0xc0804040, 0x8a058f8f, 0xad3f9292, 0xbc219d9d, 0x48703838, 0x04f1f5f5, 0xdf63bcbc, 0xc177b6b6, 0x75afdada, 0x63422121, 0x30201010, 0x1ae5ffff, 0x0efdf3f3, 0x6dbfd2d2, 0x4c81cdcd, 0x14180c0c, 0x35261313, 0x2fc3ecec, 0xe1be5f5f, 0xa2359797, 0xcc884444, 0x392e1717, 0x5793c4c4, 0xf255a7a7, 0x82fc7e7e, 0x477a3d3d, 0xacc86464, 0xe7ba5d5d, 0x2b321919, 0x95e67373, 0xa0c06060, 0x98198181, 0xd19e4f4f, 0x7fa3dcdc, 0x66442222, 0x7e542a2a, 0xab3b9090, 0x830b8888, 0xca8c4646, 0x29c7eeee, 0xd36bb8b8, 0x3c281414, 0x79a7dede, 0xe2bc5e5e, 0x1d160b0b, 0x76addbdb, 0x3bdbe0e0, 0x56643232, 0x4e743a3a, 0x1e140a0a, 0xdb924949, 0x0a0c0606, 0x6c482424, 0xe4b85c5c, 0x5d9fc2c2, 0x6ebdd3d3, 0xef43acac, 0xa6c46262, 0xa8399191, 0xa4319595, 0x37d3e4e4, 0x8bf27979, 0x32d5e7e7, 0x438bc8c8, 0x596e3737, 0xb7da6d6d, 0x8c018d8d, 0x64b1d5d5, 0xd29c4e4e, 0xe049a9a9, 0xb4d86c6c, 0xfaac5656, 0x07f3f4f4, 0x25cfeaea, 0xafca6565, 0x8ef47a7a, 0xe947aeae, 0x18100808, 0xd56fbaba, 0x88f07878, 0x6f4a2525, 0x725c2e2e, 0x24381c1c, 0xf157a6a6, 0xc773b4b4, 0x5197c6c6, 0x23cbe8e8, 0x7ca1dddd, 0x9ce87474, 0x213e1f1f, 0xdd964b4b, 0xdc61bdbd, 0x860d8b8b, 0x850f8a8a, 0x90e07070, 0x427c3e3e, 0xc471b5b5, 0xaacc6666, 0xd8904848, 0x05060303, 0x01f7f6f6, 0x121c0e0e, 0xa3c26161, 0x5f6a3535, 0xf9ae5757, 0xd069b9b9, 0x91178686, 0x5899c1c1, 0x273a1d1d, 0xb9279e9e, 0x38d9e1e1, 0x13ebf8f8, 0xb32b9898, 0x33221111, 0xbbd26969, 0x70a9d9d9, 0x89078e8e, 0xa7339494, 0xb62d9b9b, 0x223c1e1e, 0x92158787, 0x20c9e9e9, 0x4987cece, 0xffaa5555, 0x78502828, 0x7aa5dfdf, 0x8f038c8c, 0xf859a1a1, 0x80098989, 0x171a0d0d, 0xda65bfbf, 0x31d7e6e6, 0xc6844242, 0xb8d06868, 0xc3824141, 0xb0299999, 0x775a2d2d, 0x111e0f0f, 0xcb7bb0b0, 0xfca85454, 0xd66dbbbb, 0x3a2c1616];\nconst T3 = [0x63a5c663, 0x7c84f87c, 0x7799ee77, 0x7b8df67b, 0xf20dfff2, 0x6bbdd66b, 0x6fb1de6f, 0xc55491c5, 0x30506030, 0x01030201, 0x67a9ce67, 0x2b7d562b, 0xfe19e7fe, 0xd762b5d7, 0xabe64dab, 0x769aec76, 0xca458fca, 0x829d1f82, 0xc94089c9, 0x7d87fa7d, 0xfa15effa, 0x59ebb259, 0x47c98e47, 0xf00bfbf0, 0xadec41ad, 0xd467b3d4, 0xa2fd5fa2, 0xafea45af, 0x9cbf239c, 0xa4f753a4, 0x7296e472, 0xc05b9bc0, 0xb7c275b7, 0xfd1ce1fd, 0x93ae3d93, 0x266a4c26, 0x365a6c36, 0x3f417e3f, 0xf702f5f7, 0xcc4f83cc, 0x345c6834, 0xa5f451a5, 0xe534d1e5, 0xf108f9f1, 0x7193e271, 0xd873abd8, 0x31536231, 0x153f2a15, 0x040c0804, 0xc75295c7, 0x23654623, 0xc35e9dc3, 0x18283018, 0x96a13796, 0x050f0a05, 0x9ab52f9a, 0x07090e07, 0x12362412, 0x809b1b80, 0xe23ddfe2, 0xeb26cdeb, 0x27694e27, 0xb2cd7fb2, 0x759fea75, 0x091b1209, 0x839e1d83, 0x2c74582c, 0x1a2e341a, 0x1b2d361b, 0x6eb2dc6e, 0x5aeeb45a, 0xa0fb5ba0, 0x52f6a452, 0x3b4d763b, 0xd661b7d6, 0xb3ce7db3, 0x297b5229, 0xe33edde3, 0x2f715e2f, 0x84971384, 0x53f5a653, 0xd168b9d1, 0x00000000, 0xed2cc1ed, 0x20604020, 0xfc1fe3fc, 0xb1c879b1, 0x5bedb65b, 0x6abed46a, 0xcb468dcb, 0xbed967be, 0x394b7239, 0x4ade944a, 0x4cd4984c, 0x58e8b058, 0xcf4a85cf, 0xd06bbbd0, 0xef2ac5ef, 0xaae54faa, 0xfb16edfb, 0x43c58643, 0x4dd79a4d, 0x33556633, 0x85941185, 0x45cf8a45, 0xf910e9f9, 0x02060402, 0x7f81fe7f, 0x50f0a050, 0x3c44783c, 0x9fba259f, 0xa8e34ba8, 0x51f3a251, 0xa3fe5da3, 0x40c08040, 0x8f8a058f, 0x92ad3f92, 0x9dbc219d, 0x38487038, 0xf504f1f5, 0xbcdf63bc, 0xb6c177b6, 0xda75afda, 0x21634221, 0x10302010, 0xff1ae5ff, 0xf30efdf3, 0xd26dbfd2, 0xcd4c81cd, 0x0c14180c, 0x13352613, 0xec2fc3ec, 0x5fe1be5f, 0x97a23597, 0x44cc8844, 0x17392e17, 0xc45793c4, 0xa7f255a7, 0x7e82fc7e, 0x3d477a3d, 0x64acc864, 0x5de7ba5d, 0x192b3219, 0x7395e673, 0x60a0c060, 0x81981981, 0x4fd19e4f, 0xdc7fa3dc, 0x22664422, 0x2a7e542a, 0x90ab3b90, 0x88830b88, 0x46ca8c46, 0xee29c7ee, 0xb8d36bb8, 0x143c2814, 0xde79a7de, 0x5ee2bc5e, 0x0b1d160b, 0xdb76addb, 0xe03bdbe0, 0x32566432, 0x3a4e743a, 0x0a1e140a, 0x49db9249, 0x060a0c06, 0x246c4824, 0x5ce4b85c, 0xc25d9fc2, 0xd36ebdd3, 0xacef43ac, 0x62a6c462, 0x91a83991, 0x95a43195, 0xe437d3e4, 0x798bf279, 0xe732d5e7, 0xc8438bc8, 0x37596e37, 0x6db7da6d, 0x8d8c018d, 0xd564b1d5, 0x4ed29c4e, 0xa9e049a9, 0x6cb4d86c, 0x56faac56, 0xf407f3f4, 0xea25cfea, 0x65afca65, 0x7a8ef47a, 0xaee947ae, 0x08181008, 0xbad56fba, 0x7888f078, 0x256f4a25, 0x2e725c2e, 0x1c24381c, 0xa6f157a6, 0xb4c773b4, 0xc65197c6, 0xe823cbe8, 0xdd7ca1dd, 0x749ce874, 0x1f213e1f, 0x4bdd964b, 0xbddc61bd, 0x8b860d8b, 0x8a850f8a, 0x7090e070, 0x3e427c3e, 0xb5c471b5, 0x66aacc66, 0x48d89048, 0x03050603, 0xf601f7f6, 0x0e121c0e, 0x61a3c261, 0x355f6a35, 0x57f9ae57, 0xb9d069b9, 0x86911786, 0xc15899c1, 0x1d273a1d, 0x9eb9279e, 0xe138d9e1, 0xf813ebf8, 0x98b32b98, 0x11332211, 0x69bbd269, 0xd970a9d9, 0x8e89078e, 0x94a73394, 0x9bb62d9b, 0x1e223c1e, 0x87921587, 0xe920c9e9, 0xce4987ce, 0x55ffaa55, 0x28785028, 0xdf7aa5df, 0x8c8f038c, 0xa1f859a1, 0x89800989, 0x0d171a0d, 0xbfda65bf, 0xe631d7e6, 0x42c68442, 0x68b8d068, 0x41c38241, 0x99b02999, 0x2d775a2d, 0x0f111e0f, 0xb0cb7bb0, 0x54fca854, 0xbbd66dbb, 0x163a2c16];\nconst T4 = [0x6363a5c6, 0x7c7c84f8, 0x777799ee, 0x7b7b8df6, 0xf2f20dff, 0x6b6bbdd6, 0x6f6fb1de, 0xc5c55491, 0x30305060, 0x01010302, 0x6767a9ce, 0x2b2b7d56, 0xfefe19e7, 0xd7d762b5, 0xababe64d, 0x76769aec, 0xcaca458f, 0x82829d1f, 0xc9c94089, 0x7d7d87fa, 0xfafa15ef, 0x5959ebb2, 0x4747c98e, 0xf0f00bfb, 0xadadec41, 0xd4d467b3, 0xa2a2fd5f, 0xafafea45, 0x9c9cbf23, 0xa4a4f753, 0x727296e4, 0xc0c05b9b, 0xb7b7c275, 0xfdfd1ce1, 0x9393ae3d, 0x26266a4c, 0x36365a6c, 0x3f3f417e, 0xf7f702f5, 0xcccc4f83, 0x34345c68, 0xa5a5f451, 0xe5e534d1, 0xf1f108f9, 0x717193e2, 0xd8d873ab, 0x31315362, 0x15153f2a, 0x04040c08, 0xc7c75295, 0x23236546, 0xc3c35e9d, 0x18182830, 0x9696a137, 0x05050f0a, 0x9a9ab52f, 0x0707090e, 0x12123624, 0x80809b1b, 0xe2e23ddf, 0xebeb26cd, 0x2727694e, 0xb2b2cd7f, 0x75759fea, 0x09091b12, 0x83839e1d, 0x2c2c7458, 0x1a1a2e34, 0x1b1b2d36, 0x6e6eb2dc, 0x5a5aeeb4, 0xa0a0fb5b, 0x5252f6a4, 0x3b3b4d76, 0xd6d661b7, 0xb3b3ce7d, 0x29297b52, 0xe3e33edd, 0x2f2f715e, 0x84849713, 0x5353f5a6, 0xd1d168b9, 0x00000000, 0xeded2cc1, 0x20206040, 0xfcfc1fe3, 0xb1b1c879, 0x5b5bedb6, 0x6a6abed4, 0xcbcb468d, 0xbebed967, 0x39394b72, 0x4a4ade94, 0x4c4cd498, 0x5858e8b0, 0xcfcf4a85, 0xd0d06bbb, 0xefef2ac5, 0xaaaae54f, 0xfbfb16ed, 0x4343c586, 0x4d4dd79a, 0x33335566, 0x85859411, 0x4545cf8a, 0xf9f910e9, 0x02020604, 0x7f7f81fe, 0x5050f0a0, 0x3c3c4478, 0x9f9fba25, 0xa8a8e34b, 0x5151f3a2, 0xa3a3fe5d, 0x4040c080, 0x8f8f8a05, 0x9292ad3f, 0x9d9dbc21, 0x38384870, 0xf5f504f1, 0xbcbcdf63, 0xb6b6c177, 0xdada75af, 0x21216342, 0x10103020, 0xffff1ae5, 0xf3f30efd, 0xd2d26dbf, 0xcdcd4c81, 0x0c0c1418, 0x13133526, 0xecec2fc3, 0x5f5fe1be, 0x9797a235, 0x4444cc88, 0x1717392e, 0xc4c45793, 0xa7a7f255, 0x7e7e82fc, 0x3d3d477a, 0x6464acc8, 0x5d5de7ba, 0x19192b32, 0x737395e6, 0x6060a0c0, 0x81819819, 0x4f4fd19e, 0xdcdc7fa3, 0x22226644, 0x2a2a7e54, 0x9090ab3b, 0x8888830b, 0x4646ca8c, 0xeeee29c7, 0xb8b8d36b, 0x14143c28, 0xdede79a7, 0x5e5ee2bc, 0x0b0b1d16, 0xdbdb76ad, 0xe0e03bdb, 0x32325664, 0x3a3a4e74, 0x0a0a1e14, 0x4949db92, 0x06060a0c, 0x24246c48, 0x5c5ce4b8, 0xc2c25d9f, 0xd3d36ebd, 0xacacef43, 0x6262a6c4, 0x9191a839, 0x9595a431, 0xe4e437d3, 0x79798bf2, 0xe7e732d5, 0xc8c8438b, 0x3737596e, 0x6d6db7da, 0x8d8d8c01, 0xd5d564b1, 0x4e4ed29c, 0xa9a9e049, 0x6c6cb4d8, 0x5656faac, 0xf4f407f3, 0xeaea25cf, 0x6565afca, 0x7a7a8ef4, 0xaeaee947, 0x08081810, 0xbabad56f, 0x787888f0, 0x25256f4a, 0x2e2e725c, 0x1c1c2438, 0xa6a6f157, 0xb4b4c773, 0xc6c65197, 0xe8e823cb, 0xdddd7ca1, 0x74749ce8, 0x1f1f213e, 0x4b4bdd96, 0xbdbddc61, 0x8b8b860d, 0x8a8a850f, 0x707090e0, 0x3e3e427c, 0xb5b5c471, 0x6666aacc, 0x4848d890, 0x03030506, 0xf6f601f7, 0x0e0e121c, 0x6161a3c2, 0x35355f6a, 0x5757f9ae, 0xb9b9d069, 0x86869117, 0xc1c15899, 0x1d1d273a, 0x9e9eb927, 0xe1e138d9, 0xf8f813eb, 0x9898b32b, 0x11113322, 0x6969bbd2, 0xd9d970a9, 0x8e8e8907, 0x9494a733, 0x9b9bb62d, 0x1e1e223c, 0x87879215, 0xe9e920c9, 0xcece4987, 0x5555ffaa, 0x28287850, 0xdfdf7aa5, 0x8c8c8f03, 0xa1a1f859, 0x89898009, 0x0d0d171a, 0xbfbfda65, 0xe6e631d7, 0x4242c684, 0x6868b8d0, 0x4141c382, 0x9999b029, 0x2d2d775a, 0x0f0f111e, 0xb0b0cb7b, 0x5454fca8, 0xbbbbd66d, 0x16163a2c];\n\n// Transformations for decryption\nconst T5 = [0x51f4a750, 0x7e416553, 0x1a17a4c3, 0x3a275e96, 0x3bab6bcb, 0x1f9d45f1, 0xacfa58ab, 0x4be30393, 0x2030fa55, 0xad766df6, 0x88cc7691, 0xf5024c25, 0x4fe5d7fc, 0xc52acbd7, 0x26354480, 0xb562a38f, 0xdeb15a49, 0x25ba1b67, 0x45ea0e98, 0x5dfec0e1, 0xc32f7502, 0x814cf012, 0x8d4697a3, 0x6bd3f9c6, 0x038f5fe7, 0x15929c95, 0xbf6d7aeb, 0x955259da, 0xd4be832d, 0x587421d3, 0x49e06929, 0x8ec9c844, 0x75c2896a, 0xf48e7978, 0x99583e6b, 0x27b971dd, 0xbee14fb6, 0xf088ad17, 0xc920ac66, 0x7dce3ab4, 0x63df4a18, 0xe51a3182, 0x97513360, 0x62537f45, 0xb16477e0, 0xbb6bae84, 0xfe81a01c, 0xf9082b94, 0x70486858, 0x8f45fd19, 0x94de6c87, 0x527bf8b7, 0xab73d323, 0x724b02e2, 0xe31f8f57, 0x6655ab2a, 0xb2eb2807, 0x2fb5c203, 0x86c57b9a, 0xd33708a5, 0x302887f2, 0x23bfa5b2, 0x02036aba, 0xed16825c, 0x8acf1c2b, 0xa779b492, 0xf307f2f0, 0x4e69e2a1, 0x65daf4cd, 0x0605bed5, 0xd134621f, 0xc4a6fe8a, 0x342e539d, 0xa2f355a0, 0x058ae132, 0xa4f6eb75, 0x0b83ec39, 0x4060efaa, 0x5e719f06, 0xbd6e1051, 0x3e218af9, 0x96dd063d, 0xdd3e05ae, 0x4de6bd46, 0x91548db5, 0x71c45d05, 0x0406d46f, 0x605015ff, 0x1998fb24, 0xd6bde997, 0x894043cc, 0x67d99e77, 0xb0e842bd, 0x07898b88, 0xe7195b38, 0x79c8eedb, 0xa17c0a47, 0x7c420fe9, 0xf8841ec9, 0x00000000, 0x09808683, 0x322bed48, 0x1e1170ac, 0x6c5a724e, 0xfd0efffb, 0x0f853856, 0x3daed51e, 0x362d3927, 0x0a0fd964, 0x685ca621, 0x9b5b54d1, 0x24362e3a, 0x0c0a67b1, 0x9357e70f, 0xb4ee96d2, 0x1b9b919e, 0x80c0c54f, 0x61dc20a2, 0x5a774b69, 0x1c121a16, 0xe293ba0a, 0xc0a02ae5, 0x3c22e043, 0x121b171d, 0x0e090d0b, 0xf28bc7ad, 0x2db6a8b9, 0x141ea9c8, 0x57f11985, 0xaf75074c, 0xee99ddbb, 0xa37f60fd, 0xf701269f, 0x5c72f5bc, 0x44663bc5, 0x5bfb7e34, 0x8b432976, 0xcb23c6dc, 0xb6edfc68, 0xb8e4f163, 0xd731dcca, 0x42638510, 0x13972240, 0x84c61120, 0x854a247d, 0xd2bb3df8, 0xaef93211, 0xc729a16d, 0x1d9e2f4b, 0xdcb230f3, 0x0d8652ec, 0x77c1e3d0, 0x2bb3166c, 0xa970b999, 0x119448fa, 0x47e96422, 0xa8fc8cc4, 0xa0f03f1a, 0x567d2cd8, 0x223390ef, 0x87494ec7, 0xd938d1c1, 0x8ccaa2fe, 0x98d40b36, 0xa6f581cf, 0xa57ade28, 0xdab78e26, 0x3fadbfa4, 0x2c3a9de4, 0x5078920d, 0x6a5fcc9b, 0x547e4662, 0xf68d13c2, 0x90d8b8e8, 0x2e39f75e, 0x82c3aff5, 0x9f5d80be, 0x69d0937c, 0x6fd52da9, 0xcf2512b3, 0xc8ac993b, 0x10187da7, 0xe89c636e, 0xdb3bbb7b, 0xcd267809, 0x6e5918f4, 0xec9ab701, 0x834f9aa8, 0xe6956e65, 0xaaffe67e, 0x21bccf08, 0xef15e8e6, 0xbae79bd9, 0x4a6f36ce, 0xea9f09d4, 0x29b07cd6, 0x31a4b2af, 0x2a3f2331, 0xc6a59430, 0x35a266c0, 0x744ebc37, 0xfc82caa6, 0xe090d0b0, 0x33a7d815, 0xf104984a, 0x41ecdaf7, 0x7fcd500e, 0x1791f62f, 0x764dd68d, 0x43efb04d, 0xccaa4d54, 0xe49604df, 0x9ed1b5e3, 0x4c6a881b, 0xc12c1fb8, 0x4665517f, 0x9d5eea04, 0x018c355d, 0xfa877473, 0xfb0b412e, 0xb3671d5a, 0x92dbd252, 0xe9105633, 0x6dd64713, 0x9ad7618c, 0x37a10c7a, 0x59f8148e, 0xeb133c89, 0xcea927ee, 0xb761c935, 0xe11ce5ed, 0x7a47b13c, 0x9cd2df59, 0x55f2733f, 0x1814ce79, 0x73c737bf, 0x53f7cdea, 0x5ffdaa5b, 0xdf3d6f14, 0x7844db86, 0xcaaff381, 0xb968c43e, 0x3824342c, 0xc2a3405f, 0x161dc372, 0xbce2250c, 0x283c498b, 0xff0d9541, 0x39a80171, 0x080cb3de, 0xd8b4e49c, 0x6456c190, 0x7bcb8461, 0xd532b670, 0x486c5c74, 0xd0b85742];\nconst T6 = [0x5051f4a7, 0x537e4165, 0xc31a17a4, 0x963a275e, 0xcb3bab6b, 0xf11f9d45, 0xabacfa58, 0x934be303, 0x552030fa, 0xf6ad766d, 0x9188cc76, 0x25f5024c, 0xfc4fe5d7, 0xd7c52acb, 0x80263544, 0x8fb562a3, 0x49deb15a, 0x6725ba1b, 0x9845ea0e, 0xe15dfec0, 0x02c32f75, 0x12814cf0, 0xa38d4697, 0xc66bd3f9, 0xe7038f5f, 0x9515929c, 0xebbf6d7a, 0xda955259, 0x2dd4be83, 0xd3587421, 0x2949e069, 0x448ec9c8, 0x6a75c289, 0x78f48e79, 0x6b99583e, 0xdd27b971, 0xb6bee14f, 0x17f088ad, 0x66c920ac, 0xb47dce3a, 0x1863df4a, 0x82e51a31, 0x60975133, 0x4562537f, 0xe0b16477, 0x84bb6bae, 0x1cfe81a0, 0x94f9082b, 0x58704868, 0x198f45fd, 0x8794de6c, 0xb7527bf8, 0x23ab73d3, 0xe2724b02, 0x57e31f8f, 0x2a6655ab, 0x07b2eb28, 0x032fb5c2, 0x9a86c57b, 0xa5d33708, 0xf2302887, 0xb223bfa5, 0xba02036a, 0x5ced1682, 0x2b8acf1c, 0x92a779b4, 0xf0f307f2, 0xa14e69e2, 0xcd65daf4, 0xd50605be, 0x1fd13462, 0x8ac4a6fe, 0x9d342e53, 0xa0a2f355, 0x32058ae1, 0x75a4f6eb, 0x390b83ec, 0xaa4060ef, 0x065e719f, 0x51bd6e10, 0xf93e218a, 0x3d96dd06, 0xaedd3e05, 0x464de6bd, 0xb591548d, 0x0571c45d, 0x6f0406d4, 0xff605015, 0x241998fb, 0x97d6bde9, 0xcc894043, 0x7767d99e, 0xbdb0e842, 0x8807898b, 0x38e7195b, 0xdb79c8ee, 0x47a17c0a, 0xe97c420f, 0xc9f8841e, 0x00000000, 0x83098086, 0x48322bed, 0xac1e1170, 0x4e6c5a72, 0xfbfd0eff, 0x560f8538, 0x1e3daed5, 0x27362d39, 0x640a0fd9, 0x21685ca6, 0xd19b5b54, 0x3a24362e, 0xb10c0a67, 0x0f9357e7, 0xd2b4ee96, 0x9e1b9b91, 0x4f80c0c5, 0xa261dc20, 0x695a774b, 0x161c121a, 0x0ae293ba, 0xe5c0a02a, 0x433c22e0, 0x1d121b17, 0x0b0e090d, 0xadf28bc7, 0xb92db6a8, 0xc8141ea9, 0x8557f119, 0x4caf7507, 0xbbee99dd, 0xfda37f60, 0x9ff70126, 0xbc5c72f5, 0xc544663b, 0x345bfb7e, 0x768b4329, 0xdccb23c6, 0x68b6edfc, 0x63b8e4f1, 0xcad731dc, 0x10426385, 0x40139722, 0x2084c611, 0x7d854a24, 0xf8d2bb3d, 0x11aef932, 0x6dc729a1, 0x4b1d9e2f, 0xf3dcb230, 0xec0d8652, 0xd077c1e3, 0x6c2bb316, 0x99a970b9, 0xfa119448, 0x2247e964, 0xc4a8fc8c, 0x1aa0f03f, 0xd8567d2c, 0xef223390, 0xc787494e, 0xc1d938d1, 0xfe8ccaa2, 0x3698d40b, 0xcfa6f581, 0x28a57ade, 0x26dab78e, 0xa43fadbf, 0xe42c3a9d, 0x0d507892, 0x9b6a5fcc, 0x62547e46, 0xc2f68d13, 0xe890d8b8, 0x5e2e39f7, 0xf582c3af, 0xbe9f5d80, 0x7c69d093, 0xa96fd52d, 0xb3cf2512, 0x3bc8ac99, 0xa710187d, 0x6ee89c63, 0x7bdb3bbb, 0x09cd2678, 0xf46e5918, 0x01ec9ab7, 0xa8834f9a, 0x65e6956e, 0x7eaaffe6, 0x0821bccf, 0xe6ef15e8, 0xd9bae79b, 0xce4a6f36, 0xd4ea9f09, 0xd629b07c, 0xaf31a4b2, 0x312a3f23, 0x30c6a594, 0xc035a266, 0x37744ebc, 0xa6fc82ca, 0xb0e090d0, 0x1533a7d8, 0x4af10498, 0xf741ecda, 0x0e7fcd50, 0x2f1791f6, 0x8d764dd6, 0x4d43efb0, 0x54ccaa4d, 0xdfe49604, 0xe39ed1b5, 0x1b4c6a88, 0xb8c12c1f, 0x7f466551, 0x049d5eea, 0x5d018c35, 0x73fa8774, 0x2efb0b41, 0x5ab3671d, 0x5292dbd2, 0x33e91056, 0x136dd647, 0x8c9ad761, 0x7a37a10c, 0x8e59f814, 0x89eb133c, 0xeecea927, 0x35b761c9, 0xede11ce5, 0x3c7a47b1, 0x599cd2df, 0x3f55f273, 0x791814ce, 0xbf73c737, 0xea53f7cd, 0x5b5ffdaa, 0x14df3d6f, 0x867844db, 0x81caaff3, 0x3eb968c4, 0x2c382434, 0x5fc2a340, 0x72161dc3, 0x0cbce225, 0x8b283c49, 0x41ff0d95, 0x7139a801, 0xde080cb3, 0x9cd8b4e4, 0x906456c1, 0x617bcb84, 0x70d532b6, 0x74486c5c, 0x42d0b857];\nconst T7 = [0xa75051f4, 0x65537e41, 0xa4c31a17, 0x5e963a27, 0x6bcb3bab, 0x45f11f9d, 0x58abacfa, 0x03934be3, 0xfa552030, 0x6df6ad76, 0x769188cc, 0x4c25f502, 0xd7fc4fe5, 0xcbd7c52a, 0x44802635, 0xa38fb562, 0x5a49deb1, 0x1b6725ba, 0x0e9845ea, 0xc0e15dfe, 0x7502c32f, 0xf012814c, 0x97a38d46, 0xf9c66bd3, 0x5fe7038f, 0x9c951592, 0x7aebbf6d, 0x59da9552, 0x832dd4be, 0x21d35874, 0x692949e0, 0xc8448ec9, 0x896a75c2, 0x7978f48e, 0x3e6b9958, 0x71dd27b9, 0x4fb6bee1, 0xad17f088, 0xac66c920, 0x3ab47dce, 0x4a1863df, 0x3182e51a, 0x33609751, 0x7f456253, 0x77e0b164, 0xae84bb6b, 0xa01cfe81, 0x2b94f908, 0x68587048, 0xfd198f45, 0x6c8794de, 0xf8b7527b, 0xd323ab73, 0x02e2724b, 0x8f57e31f, 0xab2a6655, 0x2807b2eb, 0xc2032fb5, 0x7b9a86c5, 0x08a5d337, 0x87f23028, 0xa5b223bf, 0x6aba0203, 0x825ced16, 0x1c2b8acf, 0xb492a779, 0xf2f0f307, 0xe2a14e69, 0xf4cd65da, 0xbed50605, 0x621fd134, 0xfe8ac4a6, 0x539d342e, 0x55a0a2f3, 0xe132058a, 0xeb75a4f6, 0xec390b83, 0xefaa4060, 0x9f065e71, 0x1051bd6e, 0x8af93e21, 0x063d96dd, 0x05aedd3e, 0xbd464de6, 0x8db59154, 0x5d0571c4, 0xd46f0406, 0x15ff6050, 0xfb241998, 0xe997d6bd, 0x43cc8940, 0x9e7767d9, 0x42bdb0e8, 0x8b880789, 0x5b38e719, 0xeedb79c8, 0x0a47a17c, 0x0fe97c42, 0x1ec9f884, 0x00000000, 0x86830980, 0xed48322b, 0x70ac1e11, 0x724e6c5a, 0xfffbfd0e, 0x38560f85, 0xd51e3dae, 0x3927362d, 0xd9640a0f, 0xa621685c, 0x54d19b5b, 0x2e3a2436, 0x67b10c0a, 0xe70f9357, 0x96d2b4ee, 0x919e1b9b, 0xc54f80c0, 0x20a261dc, 0x4b695a77, 0x1a161c12, 0xba0ae293, 0x2ae5c0a0, 0xe0433c22, 0x171d121b, 0x0d0b0e09, 0xc7adf28b, 0xa8b92db6, 0xa9c8141e, 0x198557f1, 0x074caf75, 0xddbbee99, 0x60fda37f, 0x269ff701, 0xf5bc5c72, 0x3bc54466, 0x7e345bfb, 0x29768b43, 0xc6dccb23, 0xfc68b6ed, 0xf163b8e4, 0xdccad731, 0x85104263, 0x22401397, 0x112084c6, 0x247d854a, 0x3df8d2bb, 0x3211aef9, 0xa16dc729, 0x2f4b1d9e, 0x30f3dcb2, 0x52ec0d86, 0xe3d077c1, 0x166c2bb3, 0xb999a970, 0x48fa1194, 0x642247e9, 0x8cc4a8fc, 0x3f1aa0f0, 0x2cd8567d, 0x90ef2233, 0x4ec78749, 0xd1c1d938, 0xa2fe8cca, 0x0b3698d4, 0x81cfa6f5, 0xde28a57a, 0x8e26dab7, 0xbfa43fad, 0x9de42c3a, 0x920d5078, 0xcc9b6a5f, 0x4662547e, 0x13c2f68d, 0xb8e890d8, 0xf75e2e39, 0xaff582c3, 0x80be9f5d, 0x937c69d0, 0x2da96fd5, 0x12b3cf25, 0x993bc8ac, 0x7da71018, 0x636ee89c, 0xbb7bdb3b, 0x7809cd26, 0x18f46e59, 0xb701ec9a, 0x9aa8834f, 0x6e65e695, 0xe67eaaff, 0xcf0821bc, 0xe8e6ef15, 0x9bd9bae7, 0x36ce4a6f, 0x09d4ea9f, 0x7cd629b0, 0xb2af31a4, 0x23312a3f, 0x9430c6a5, 0x66c035a2, 0xbc37744e, 0xcaa6fc82, 0xd0b0e090, 0xd81533a7, 0x984af104, 0xdaf741ec, 0x500e7fcd, 0xf62f1791, 0xd68d764d, 0xb04d43ef, 0x4d54ccaa, 0x04dfe496, 0xb5e39ed1, 0x881b4c6a, 0x1fb8c12c, 0x517f4665, 0xea049d5e, 0x355d018c, 0x7473fa87, 0x412efb0b, 0x1d5ab367, 0xd25292db, 0x5633e910, 0x47136dd6, 0x618c9ad7, 0x0c7a37a1, 0x148e59f8, 0x3c89eb13, 0x27eecea9, 0xc935b761, 0xe5ede11c, 0xb13c7a47, 0xdf599cd2, 0x733f55f2, 0xce791814, 0x37bf73c7, 0xcdea53f7, 0xaa5b5ffd, 0x6f14df3d, 0xdb867844, 0xf381caaf, 0xc43eb968, 0x342c3824, 0x405fc2a3, 0xc372161d, 0x250cbce2, 0x498b283c, 0x9541ff0d, 0x017139a8, 0xb3de080c, 0xe49cd8b4, 0xc1906456, 0x84617bcb, 0xb670d532, 0x5c74486c, 0x5742d0b8];\nconst T8 = [0xf4a75051, 0x4165537e, 0x17a4c31a, 0x275e963a, 0xab6bcb3b, 0x9d45f11f, 0xfa58abac, 0xe303934b, 0x30fa5520, 0x766df6ad, 0xcc769188, 0x024c25f5, 0xe5d7fc4f, 0x2acbd7c5, 0x35448026, 0x62a38fb5, 0xb15a49de, 0xba1b6725, 0xea0e9845, 0xfec0e15d, 0x2f7502c3, 0x4cf01281, 0x4697a38d, 0xd3f9c66b, 0x8f5fe703, 0x929c9515, 0x6d7aebbf, 0x5259da95, 0xbe832dd4, 0x7421d358, 0xe0692949, 0xc9c8448e, 0xc2896a75, 0x8e7978f4, 0x583e6b99, 0xb971dd27, 0xe14fb6be, 0x88ad17f0, 0x20ac66c9, 0xce3ab47d, 0xdf4a1863, 0x1a3182e5, 0x51336097, 0x537f4562, 0x6477e0b1, 0x6bae84bb, 0x81a01cfe, 0x082b94f9, 0x48685870, 0x45fd198f, 0xde6c8794, 0x7bf8b752, 0x73d323ab, 0x4b02e272, 0x1f8f57e3, 0x55ab2a66, 0xeb2807b2, 0xb5c2032f, 0xc57b9a86, 0x3708a5d3, 0x2887f230, 0xbfa5b223, 0x036aba02, 0x16825ced, 0xcf1c2b8a, 0x79b492a7, 0x07f2f0f3, 0x69e2a14e, 0xdaf4cd65, 0x05bed506, 0x34621fd1, 0xa6fe8ac4, 0x2e539d34, 0xf355a0a2, 0x8ae13205, 0xf6eb75a4, 0x83ec390b, 0x60efaa40, 0x719f065e, 0x6e1051bd, 0x218af93e, 0xdd063d96, 0x3e05aedd, 0xe6bd464d, 0x548db591, 0xc45d0571, 0x06d46f04, 0x5015ff60, 0x98fb2419, 0xbde997d6, 0x4043cc89, 0xd99e7767, 0xe842bdb0, 0x898b8807, 0x195b38e7, 0xc8eedb79, 0x7c0a47a1, 0x420fe97c, 0x841ec9f8, 0x00000000, 0x80868309, 0x2bed4832, 0x1170ac1e, 0x5a724e6c, 0x0efffbfd, 0x8538560f, 0xaed51e3d, 0x2d392736, 0x0fd9640a, 0x5ca62168, 0x5b54d19b, 0x362e3a24, 0x0a67b10c, 0x57e70f93, 0xee96d2b4, 0x9b919e1b, 0xc0c54f80, 0xdc20a261, 0x774b695a, 0x121a161c, 0x93ba0ae2, 0xa02ae5c0, 0x22e0433c, 0x1b171d12, 0x090d0b0e, 0x8bc7adf2, 0xb6a8b92d, 0x1ea9c814, 0xf1198557, 0x75074caf, 0x99ddbbee, 0x7f60fda3, 0x01269ff7, 0x72f5bc5c, 0x663bc544, 0xfb7e345b, 0x4329768b, 0x23c6dccb, 0xedfc68b6, 0xe4f163b8, 0x31dccad7, 0x63851042, 0x97224013, 0xc6112084, 0x4a247d85, 0xbb3df8d2, 0xf93211ae, 0x29a16dc7, 0x9e2f4b1d, 0xb230f3dc, 0x8652ec0d, 0xc1e3d077, 0xb3166c2b, 0x70b999a9, 0x9448fa11, 0xe9642247, 0xfc8cc4a8, 0xf03f1aa0, 0x7d2cd856, 0x3390ef22, 0x494ec787, 0x38d1c1d9, 0xcaa2fe8c, 0xd40b3698, 0xf581cfa6, 0x7ade28a5, 0xb78e26da, 0xadbfa43f, 0x3a9de42c, 0x78920d50, 0x5fcc9b6a, 0x7e466254, 0x8d13c2f6, 0xd8b8e890, 0x39f75e2e, 0xc3aff582, 0x5d80be9f, 0xd0937c69, 0xd52da96f, 0x2512b3cf, 0xac993bc8, 0x187da710, 0x9c636ee8, 0x3bbb7bdb, 0x267809cd, 0x5918f46e, 0x9ab701ec, 0x4f9aa883, 0x956e65e6, 0xffe67eaa, 0xbccf0821, 0x15e8e6ef, 0xe79bd9ba, 0x6f36ce4a, 0x9f09d4ea, 0xb07cd629, 0xa4b2af31, 0x3f23312a, 0xa59430c6, 0xa266c035, 0x4ebc3774, 0x82caa6fc, 0x90d0b0e0, 0xa7d81533, 0x04984af1, 0xecdaf741, 0xcd500e7f, 0x91f62f17, 0x4dd68d76, 0xefb04d43, 0xaa4d54cc, 0x9604dfe4, 0xd1b5e39e, 0x6a881b4c, 0x2c1fb8c1, 0x65517f46, 0x5eea049d, 0x8c355d01, 0x877473fa, 0x0b412efb, 0x671d5ab3, 0xdbd25292, 0x105633e9, 0xd647136d, 0xd7618c9a, 0xa10c7a37, 0xf8148e59, 0x133c89eb, 0xa927eece, 0x61c935b7, 0x1ce5ede1, 0x47b13c7a, 0xd2df599c, 0xf2733f55, 0x14ce7918, 0xc737bf73, 0xf7cdea53, 0xfdaa5b5f, 0x3d6f14df, 0x44db8678, 0xaff381ca, 0x68c43eb9, 0x24342c38, 0xa3405fc2, 0x1dc37216, 0xe2250cbc, 0x3c498b28, 0x0d9541ff, 0xa8017139, 0x0cb3de08, 0xb4e49cd8, 0x56c19064, 0xcb84617b, 0x32b670d5, 0x6c5c7448, 0xb85742d0];\n\n// Transformations for decryption key expansion\nconst U1 = [0x00000000, 0x0e090d0b, 0x1c121a16, 0x121b171d, 0x3824342c, 0x362d3927, 0x24362e3a, 0x2a3f2331, 0x70486858, 0x7e416553, 0x6c5a724e, 0x62537f45, 0x486c5c74, 0x4665517f, 0x547e4662, 0x5a774b69, 0xe090d0b0, 0xee99ddbb, 0xfc82caa6, 0xf28bc7ad, 0xd8b4e49c, 0xd6bde997, 0xc4a6fe8a, 0xcaaff381, 0x90d8b8e8, 0x9ed1b5e3, 0x8ccaa2fe, 0x82c3aff5, 0xa8fc8cc4, 0xa6f581cf, 0xb4ee96d2, 0xbae79bd9, 0xdb3bbb7b, 0xd532b670, 0xc729a16d, 0xc920ac66, 0xe31f8f57, 0xed16825c, 0xff0d9541, 0xf104984a, 0xab73d323, 0xa57ade28, 0xb761c935, 0xb968c43e, 0x9357e70f, 0x9d5eea04, 0x8f45fd19, 0x814cf012, 0x3bab6bcb, 0x35a266c0, 0x27b971dd, 0x29b07cd6, 0x038f5fe7, 0x0d8652ec, 0x1f9d45f1, 0x119448fa, 0x4be30393, 0x45ea0e98, 0x57f11985, 0x59f8148e, 0x73c737bf, 0x7dce3ab4, 0x6fd52da9, 0x61dc20a2, 0xad766df6, 0xa37f60fd, 0xb16477e0, 0xbf6d7aeb, 0x955259da, 0x9b5b54d1, 0x894043cc, 0x87494ec7, 0xdd3e05ae, 0xd33708a5, 0xc12c1fb8, 0xcf2512b3, 0xe51a3182, 0xeb133c89, 0xf9082b94, 0xf701269f, 0x4de6bd46, 0x43efb04d, 0x51f4a750, 0x5ffdaa5b, 0x75c2896a, 0x7bcb8461, 0x69d0937c, 0x67d99e77, 0x3daed51e, 0x33a7d815, 0x21bccf08, 0x2fb5c203, 0x058ae132, 0x0b83ec39, 0x1998fb24, 0x1791f62f, 0x764dd68d, 0x7844db86, 0x6a5fcc9b, 0x6456c190, 0x4e69e2a1, 0x4060efaa, 0x527bf8b7, 0x5c72f5bc, 0x0605bed5, 0x080cb3de, 0x1a17a4c3, 0x141ea9c8, 0x3e218af9, 0x302887f2, 0x223390ef, 0x2c3a9de4, 0x96dd063d, 0x98d40b36, 0x8acf1c2b, 0x84c61120, 0xaef93211, 0xa0f03f1a, 0xb2eb2807, 0xbce2250c, 0xe6956e65, 0xe89c636e, 0xfa877473, 0xf48e7978, 0xdeb15a49, 0xd0b85742, 0xc2a3405f, 0xccaa4d54, 0x41ecdaf7, 0x4fe5d7fc, 0x5dfec0e1, 0x53f7cdea, 0x79c8eedb, 0x77c1e3d0, 0x65daf4cd, 0x6bd3f9c6, 0x31a4b2af, 0x3fadbfa4, 0x2db6a8b9, 0x23bfa5b2, 0x09808683, 0x07898b88, 0x15929c95, 0x1b9b919e, 0xa17c0a47, 0xaf75074c, 0xbd6e1051, 0xb3671d5a, 0x99583e6b, 0x97513360, 0x854a247d, 0x8b432976, 0xd134621f, 0xdf3d6f14, 0xcd267809, 0xc32f7502, 0xe9105633, 0xe7195b38, 0xf5024c25, 0xfb0b412e, 0x9ad7618c, 0x94de6c87, 0x86c57b9a, 0x88cc7691, 0xa2f355a0, 0xacfa58ab, 0xbee14fb6, 0xb0e842bd, 0xea9f09d4, 0xe49604df, 0xf68d13c2, 0xf8841ec9, 0xd2bb3df8, 0xdcb230f3, 0xcea927ee, 0xc0a02ae5, 0x7a47b13c, 0x744ebc37, 0x6655ab2a, 0x685ca621, 0x42638510, 0x4c6a881b, 0x5e719f06, 0x5078920d, 0x0a0fd964, 0x0406d46f, 0x161dc372, 0x1814ce79, 0x322bed48, 0x3c22e043, 0x2e39f75e, 0x2030fa55, 0xec9ab701, 0xe293ba0a, 0xf088ad17, 0xfe81a01c, 0xd4be832d, 0xdab78e26, 0xc8ac993b, 0xc6a59430, 0x9cd2df59, 0x92dbd252, 0x80c0c54f, 0x8ec9c844, 0xa4f6eb75, 0xaaffe67e, 0xb8e4f163, 0xb6edfc68, 0x0c0a67b1, 0x02036aba, 0x10187da7, 0x1e1170ac, 0x342e539d, 0x3a275e96, 0x283c498b, 0x26354480, 0x7c420fe9, 0x724b02e2, 0x605015ff, 0x6e5918f4, 0x44663bc5, 0x4a6f36ce, 0x587421d3, 0x567d2cd8, 0x37a10c7a, 0x39a80171, 0x2bb3166c, 0x25ba1b67, 0x0f853856, 0x018c355d, 0x13972240, 0x1d9e2f4b, 0x47e96422, 0x49e06929, 0x5bfb7e34, 0x55f2733f, 0x7fcd500e, 0x71c45d05, 0x63df4a18, 0x6dd64713, 0xd731dcca, 0xd938d1c1, 0xcb23c6dc, 0xc52acbd7, 0xef15e8e6, 0xe11ce5ed, 0xf307f2f0, 0xfd0efffb, 0xa779b492, 0xa970b999, 0xbb6bae84, 0xb562a38f, 0x9f5d80be, 0x91548db5, 0x834f9aa8, 0x8d4697a3];\nconst U2 = [0x00000000, 0x0b0e090d, 0x161c121a, 0x1d121b17, 0x2c382434, 0x27362d39, 0x3a24362e, 0x312a3f23, 0x58704868, 0x537e4165, 0x4e6c5a72, 0x4562537f, 0x74486c5c, 0x7f466551, 0x62547e46, 0x695a774b, 0xb0e090d0, 0xbbee99dd, 0xa6fc82ca, 0xadf28bc7, 0x9cd8b4e4, 0x97d6bde9, 0x8ac4a6fe, 0x81caaff3, 0xe890d8b8, 0xe39ed1b5, 0xfe8ccaa2, 0xf582c3af, 0xc4a8fc8c, 0xcfa6f581, 0xd2b4ee96, 0xd9bae79b, 0x7bdb3bbb, 0x70d532b6, 0x6dc729a1, 0x66c920ac, 0x57e31f8f, 0x5ced1682, 0x41ff0d95, 0x4af10498, 0x23ab73d3, 0x28a57ade, 0x35b761c9, 0x3eb968c4, 0x0f9357e7, 0x049d5eea, 0x198f45fd, 0x12814cf0, 0xcb3bab6b, 0xc035a266, 0xdd27b971, 0xd629b07c, 0xe7038f5f, 0xec0d8652, 0xf11f9d45, 0xfa119448, 0x934be303, 0x9845ea0e, 0x8557f119, 0x8e59f814, 0xbf73c737, 0xb47dce3a, 0xa96fd52d, 0xa261dc20, 0xf6ad766d, 0xfda37f60, 0xe0b16477, 0xebbf6d7a, 0xda955259, 0xd19b5b54, 0xcc894043, 0xc787494e, 0xaedd3e05, 0xa5d33708, 0xb8c12c1f, 0xb3cf2512, 0x82e51a31, 0x89eb133c, 0x94f9082b, 0x9ff70126, 0x464de6bd, 0x4d43efb0, 0x5051f4a7, 0x5b5ffdaa, 0x6a75c289, 0x617bcb84, 0x7c69d093, 0x7767d99e, 0x1e3daed5, 0x1533a7d8, 0x0821bccf, 0x032fb5c2, 0x32058ae1, 0x390b83ec, 0x241998fb, 0x2f1791f6, 0x8d764dd6, 0x867844db, 0x9b6a5fcc, 0x906456c1, 0xa14e69e2, 0xaa4060ef, 0xb7527bf8, 0xbc5c72f5, 0xd50605be, 0xde080cb3, 0xc31a17a4, 0xc8141ea9, 0xf93e218a, 0xf2302887, 0xef223390, 0xe42c3a9d, 0x3d96dd06, 0x3698d40b, 0x2b8acf1c, 0x2084c611, 0x11aef932, 0x1aa0f03f, 0x07b2eb28, 0x0cbce225, 0x65e6956e, 0x6ee89c63, 0x73fa8774, 0x78f48e79, 0x49deb15a, 0x42d0b857, 0x5fc2a340, 0x54ccaa4d, 0xf741ecda, 0xfc4fe5d7, 0xe15dfec0, 0xea53f7cd, 0xdb79c8ee, 0xd077c1e3, 0xcd65daf4, 0xc66bd3f9, 0xaf31a4b2, 0xa43fadbf, 0xb92db6a8, 0xb223bfa5, 0x83098086, 0x8807898b, 0x9515929c, 0x9e1b9b91, 0x47a17c0a, 0x4caf7507, 0x51bd6e10, 0x5ab3671d, 0x6b99583e, 0x60975133, 0x7d854a24, 0x768b4329, 0x1fd13462, 0x14df3d6f, 0x09cd2678, 0x02c32f75, 0x33e91056, 0x38e7195b, 0x25f5024c, 0x2efb0b41, 0x8c9ad761, 0x8794de6c, 0x9a86c57b, 0x9188cc76, 0xa0a2f355, 0xabacfa58, 0xb6bee14f, 0xbdb0e842, 0xd4ea9f09, 0xdfe49604, 0xc2f68d13, 0xc9f8841e, 0xf8d2bb3d, 0xf3dcb230, 0xeecea927, 0xe5c0a02a, 0x3c7a47b1, 0x37744ebc, 0x2a6655ab, 0x21685ca6, 0x10426385, 0x1b4c6a88, 0x065e719f, 0x0d507892, 0x640a0fd9, 0x6f0406d4, 0x72161dc3, 0x791814ce, 0x48322bed, 0x433c22e0, 0x5e2e39f7, 0x552030fa, 0x01ec9ab7, 0x0ae293ba, 0x17f088ad, 0x1cfe81a0, 0x2dd4be83, 0x26dab78e, 0x3bc8ac99, 0x30c6a594, 0x599cd2df, 0x5292dbd2, 0x4f80c0c5, 0x448ec9c8, 0x75a4f6eb, 0x7eaaffe6, 0x63b8e4f1, 0x68b6edfc, 0xb10c0a67, 0xba02036a, 0xa710187d, 0xac1e1170, 0x9d342e53, 0x963a275e, 0x8b283c49, 0x80263544, 0xe97c420f, 0xe2724b02, 0xff605015, 0xf46e5918, 0xc544663b, 0xce4a6f36, 0xd3587421, 0xd8567d2c, 0x7a37a10c, 0x7139a801, 0x6c2bb316, 0x6725ba1b, 0x560f8538, 0x5d018c35, 0x40139722, 0x4b1d9e2f, 0x2247e964, 0x2949e069, 0x345bfb7e, 0x3f55f273, 0x0e7fcd50, 0x0571c45d, 0x1863df4a, 0x136dd647, 0xcad731dc, 0xc1d938d1, 0xdccb23c6, 0xd7c52acb, 0xe6ef15e8, 0xede11ce5, 0xf0f307f2, 0xfbfd0eff, 0x92a779b4, 0x99a970b9, 0x84bb6bae, 0x8fb562a3, 0xbe9f5d80, 0xb591548d, 0xa8834f9a, 0xa38d4697];\nconst U3 = [0x00000000, 0x0d0b0e09, 0x1a161c12, 0x171d121b, 0x342c3824, 0x3927362d, 0x2e3a2436, 0x23312a3f, 0x68587048, 0x65537e41, 0x724e6c5a, 0x7f456253, 0x5c74486c, 0x517f4665, 0x4662547e, 0x4b695a77, 0xd0b0e090, 0xddbbee99, 0xcaa6fc82, 0xc7adf28b, 0xe49cd8b4, 0xe997d6bd, 0xfe8ac4a6, 0xf381caaf, 0xb8e890d8, 0xb5e39ed1, 0xa2fe8cca, 0xaff582c3, 0x8cc4a8fc, 0x81cfa6f5, 0x96d2b4ee, 0x9bd9bae7, 0xbb7bdb3b, 0xb670d532, 0xa16dc729, 0xac66c920, 0x8f57e31f, 0x825ced16, 0x9541ff0d, 0x984af104, 0xd323ab73, 0xde28a57a, 0xc935b761, 0xc43eb968, 0xe70f9357, 0xea049d5e, 0xfd198f45, 0xf012814c, 0x6bcb3bab, 0x66c035a2, 0x71dd27b9, 0x7cd629b0, 0x5fe7038f, 0x52ec0d86, 0x45f11f9d, 0x48fa1194, 0x03934be3, 0x0e9845ea, 0x198557f1, 0x148e59f8, 0x37bf73c7, 0x3ab47dce, 0x2da96fd5, 0x20a261dc, 0x6df6ad76, 0x60fda37f, 0x77e0b164, 0x7aebbf6d, 0x59da9552, 0x54d19b5b, 0x43cc8940, 0x4ec78749, 0x05aedd3e, 0x08a5d337, 0x1fb8c12c, 0x12b3cf25, 0x3182e51a, 0x3c89eb13, 0x2b94f908, 0x269ff701, 0xbd464de6, 0xb04d43ef, 0xa75051f4, 0xaa5b5ffd, 0x896a75c2, 0x84617bcb, 0x937c69d0, 0x9e7767d9, 0xd51e3dae, 0xd81533a7, 0xcf0821bc, 0xc2032fb5, 0xe132058a, 0xec390b83, 0xfb241998, 0xf62f1791, 0xd68d764d, 0xdb867844, 0xcc9b6a5f, 0xc1906456, 0xe2a14e69, 0xefaa4060, 0xf8b7527b, 0xf5bc5c72, 0xbed50605, 0xb3de080c, 0xa4c31a17, 0xa9c8141e, 0x8af93e21, 0x87f23028, 0x90ef2233, 0x9de42c3a, 0x063d96dd, 0x0b3698d4, 0x1c2b8acf, 0x112084c6, 0x3211aef9, 0x3f1aa0f0, 0x2807b2eb, 0x250cbce2, 0x6e65e695, 0x636ee89c, 0x7473fa87, 0x7978f48e, 0x5a49deb1, 0x5742d0b8, 0x405fc2a3, 0x4d54ccaa, 0xdaf741ec, 0xd7fc4fe5, 0xc0e15dfe, 0xcdea53f7, 0xeedb79c8, 0xe3d077c1, 0xf4cd65da, 0xf9c66bd3, 0xb2af31a4, 0xbfa43fad, 0xa8b92db6, 0xa5b223bf, 0x86830980, 0x8b880789, 0x9c951592, 0x919e1b9b, 0x0a47a17c, 0x074caf75, 0x1051bd6e, 0x1d5ab367, 0x3e6b9958, 0x33609751, 0x247d854a, 0x29768b43, 0x621fd134, 0x6f14df3d, 0x7809cd26, 0x7502c32f, 0x5633e910, 0x5b38e719, 0x4c25f502, 0x412efb0b, 0x618c9ad7, 0x6c8794de, 0x7b9a86c5, 0x769188cc, 0x55a0a2f3, 0x58abacfa, 0x4fb6bee1, 0x42bdb0e8, 0x09d4ea9f, 0x04dfe496, 0x13c2f68d, 0x1ec9f884, 0x3df8d2bb, 0x30f3dcb2, 0x27eecea9, 0x2ae5c0a0, 0xb13c7a47, 0xbc37744e, 0xab2a6655, 0xa621685c, 0x85104263, 0x881b4c6a, 0x9f065e71, 0x920d5078, 0xd9640a0f, 0xd46f0406, 0xc372161d, 0xce791814, 0xed48322b, 0xe0433c22, 0xf75e2e39, 0xfa552030, 0xb701ec9a, 0xba0ae293, 0xad17f088, 0xa01cfe81, 0x832dd4be, 0x8e26dab7, 0x993bc8ac, 0x9430c6a5, 0xdf599cd2, 0xd25292db, 0xc54f80c0, 0xc8448ec9, 0xeb75a4f6, 0xe67eaaff, 0xf163b8e4, 0xfc68b6ed, 0x67b10c0a, 0x6aba0203, 0x7da71018, 0x70ac1e11, 0x539d342e, 0x5e963a27, 0x498b283c, 0x44802635, 0x0fe97c42, 0x02e2724b, 0x15ff6050, 0x18f46e59, 0x3bc54466, 0x36ce4a6f, 0x21d35874, 0x2cd8567d, 0x0c7a37a1, 0x017139a8, 0x166c2bb3, 0x1b6725ba, 0x38560f85, 0x355d018c, 0x22401397, 0x2f4b1d9e, 0x642247e9, 0x692949e0, 0x7e345bfb, 0x733f55f2, 0x500e7fcd, 0x5d0571c4, 0x4a1863df, 0x47136dd6, 0xdccad731, 0xd1c1d938, 0xc6dccb23, 0xcbd7c52a, 0xe8e6ef15, 0xe5ede11c, 0xf2f0f307, 0xfffbfd0e, 0xb492a779, 0xb999a970, 0xae84bb6b, 0xa38fb562, 0x80be9f5d, 0x8db59154, 0x9aa8834f, 0x97a38d46];\nconst U4 = [0x00000000, 0x090d0b0e, 0x121a161c, 0x1b171d12, 0x24342c38, 0x2d392736, 0x362e3a24, 0x3f23312a, 0x48685870, 0x4165537e, 0x5a724e6c, 0x537f4562, 0x6c5c7448, 0x65517f46, 0x7e466254, 0x774b695a, 0x90d0b0e0, 0x99ddbbee, 0x82caa6fc, 0x8bc7adf2, 0xb4e49cd8, 0xbde997d6, 0xa6fe8ac4, 0xaff381ca, 0xd8b8e890, 0xd1b5e39e, 0xcaa2fe8c, 0xc3aff582, 0xfc8cc4a8, 0xf581cfa6, 0xee96d2b4, 0xe79bd9ba, 0x3bbb7bdb, 0x32b670d5, 0x29a16dc7, 0x20ac66c9, 0x1f8f57e3, 0x16825ced, 0x0d9541ff, 0x04984af1, 0x73d323ab, 0x7ade28a5, 0x61c935b7, 0x68c43eb9, 0x57e70f93, 0x5eea049d, 0x45fd198f, 0x4cf01281, 0xab6bcb3b, 0xa266c035, 0xb971dd27, 0xb07cd629, 0x8f5fe703, 0x8652ec0d, 0x9d45f11f, 0x9448fa11, 0xe303934b, 0xea0e9845, 0xf1198557, 0xf8148e59, 0xc737bf73, 0xce3ab47d, 0xd52da96f, 0xdc20a261, 0x766df6ad, 0x7f60fda3, 0x6477e0b1, 0x6d7aebbf, 0x5259da95, 0x5b54d19b, 0x4043cc89, 0x494ec787, 0x3e05aedd, 0x3708a5d3, 0x2c1fb8c1, 0x2512b3cf, 0x1a3182e5, 0x133c89eb, 0x082b94f9, 0x01269ff7, 0xe6bd464d, 0xefb04d43, 0xf4a75051, 0xfdaa5b5f, 0xc2896a75, 0xcb84617b, 0xd0937c69, 0xd99e7767, 0xaed51e3d, 0xa7d81533, 0xbccf0821, 0xb5c2032f, 0x8ae13205, 0x83ec390b, 0x98fb2419, 0x91f62f17, 0x4dd68d76, 0x44db8678, 0x5fcc9b6a, 0x56c19064, 0x69e2a14e, 0x60efaa40, 0x7bf8b752, 0x72f5bc5c, 0x05bed506, 0x0cb3de08, 0x17a4c31a, 0x1ea9c814, 0x218af93e, 0x2887f230, 0x3390ef22, 0x3a9de42c, 0xdd063d96, 0xd40b3698, 0xcf1c2b8a, 0xc6112084, 0xf93211ae, 0xf03f1aa0, 0xeb2807b2, 0xe2250cbc, 0x956e65e6, 0x9c636ee8, 0x877473fa, 0x8e7978f4, 0xb15a49de, 0xb85742d0, 0xa3405fc2, 0xaa4d54cc, 0xecdaf741, 0xe5d7fc4f, 0xfec0e15d, 0xf7cdea53, 0xc8eedb79, 0xc1e3d077, 0xdaf4cd65, 0xd3f9c66b, 0xa4b2af31, 0xadbfa43f, 0xb6a8b92d, 0xbfa5b223, 0x80868309, 0x898b8807, 0x929c9515, 0x9b919e1b, 0x7c0a47a1, 0x75074caf, 0x6e1051bd, 0x671d5ab3, 0x583e6b99, 0x51336097, 0x4a247d85, 0x4329768b, 0x34621fd1, 0x3d6f14df, 0x267809cd, 0x2f7502c3, 0x105633e9, 0x195b38e7, 0x024c25f5, 0x0b412efb, 0xd7618c9a, 0xde6c8794, 0xc57b9a86, 0xcc769188, 0xf355a0a2, 0xfa58abac, 0xe14fb6be, 0xe842bdb0, 0x9f09d4ea, 0x9604dfe4, 0x8d13c2f6, 0x841ec9f8, 0xbb3df8d2, 0xb230f3dc, 0xa927eece, 0xa02ae5c0, 0x47b13c7a, 0x4ebc3774, 0x55ab2a66, 0x5ca62168, 0x63851042, 0x6a881b4c, 0x719f065e, 0x78920d50, 0x0fd9640a, 0x06d46f04, 0x1dc37216, 0x14ce7918, 0x2bed4832, 0x22e0433c, 0x39f75e2e, 0x30fa5520, 0x9ab701ec, 0x93ba0ae2, 0x88ad17f0, 0x81a01cfe, 0xbe832dd4, 0xb78e26da, 0xac993bc8, 0xa59430c6, 0xd2df599c, 0xdbd25292, 0xc0c54f80, 0xc9c8448e, 0xf6eb75a4, 0xffe67eaa, 0xe4f163b8, 0xedfc68b6, 0x0a67b10c, 0x036aba02, 0x187da710, 0x1170ac1e, 0x2e539d34, 0x275e963a, 0x3c498b28, 0x35448026, 0x420fe97c, 0x4b02e272, 0x5015ff60, 0x5918f46e, 0x663bc544, 0x6f36ce4a, 0x7421d358, 0x7d2cd856, 0xa10c7a37, 0xa8017139, 0xb3166c2b, 0xba1b6725, 0x8538560f, 0x8c355d01, 0x97224013, 0x9e2f4b1d, 0xe9642247, 0xe0692949, 0xfb7e345b, 0xf2733f55, 0xcd500e7f, 0xc45d0571, 0xdf4a1863, 0xd647136d, 0x31dccad7, 0x38d1c1d9, 0x23c6dccb, 0x2acbd7c5, 0x15e8e6ef, 0x1ce5ede1, 0x07f2f0f3, 0x0efffbfd, 0x79b492a7, 0x70b999a9, 0x6bae84bb, 0x62a38fb5, 0x5d80be9f, 0x548db591, 0x4f9aa883, 0x4697a38d];\n\nfunction convertToInt32(bytes: Uint8Array): Array<number> {\n  const result = [ ];\n  for (let i = 0; i < bytes.length; i += 4) {\n    result.push((bytes[i] << 24) | (bytes[i + 1] << 16) | (bytes[i + 2] <<  8) | bytes[i + 3]);\n  }\n  return result;\n}\n\nexport class AES {\n  readonly #key: Uint8Array;\n  readonly #Kd: Array<Array<number>>;\n  readonly #Ke: Array<Array<number>>;\n\n  get key(): Uint8Array { return this.#key.slice(); }\n\n  constructor(key: Uint8Array) {\n    if (!(this instanceof AES)) {\n      throw Error('AES must be instanitated with `new`');\n    }\n\n    this.#key = new Uint8Array(key);\n\n    const rounds = numberOfRounds[this.key.length];\n    if (rounds == null) {\n      throw new TypeError('invalid key size (must be 16, 24 or 32 bytes)');\n    }\n\n    // encryption round keys\n    this.#Ke = [];\n\n    // decryption round keys\n    this.#Kd = [];\n\n    for (let i = 0; i <= rounds; i++) {\n      this.#Ke.push([0, 0, 0, 0]);\n      this.#Kd.push([0, 0, 0, 0]);\n    }\n\n    const roundKeyCount = (rounds + 1) * 4;\n    const KC = this.key.length / 4;\n\n    // convert the key into ints\n    const tk = convertToInt32(this.key);\n\n    // copy values into round key arrays\n    let index;\n    for (let i = 0; i < KC; i++) {\n      index = i >> 2;\n      this.#Ke[index][i % 4] = tk[i];\n      this.#Kd[rounds - index][i % 4] = tk[i];\n    }\n\n    // key expansion (fips-197 section 5.2)\n    let rconpointer = 0;\n    let t = KC, tt;\n    while (t < roundKeyCount) {\n      tt = tk[KC - 1];\n      tk[0] ^= ((S[(tt >> 16) & 0xFF] << 24) ^\n                (S[(tt >>  8) & 0xFF] << 16) ^\n                (S[ tt        & 0xFF] <<  8) ^\n                 S[(tt >> 24) & 0xFF]        ^\n                (rcon[rconpointer] << 24));\n      rconpointer += 1;\n\n      // key expansion (for non-256 bit)\n      if (KC != 8) {\n        for (let i = 1; i < KC; i++) {\n          tk[i] ^= tk[i - 1];\n        }\n\n      // key expansion for 256-bit keys is \"slightly different\" (fips-197)\n      } else {\n        for (let i = 1; i < (KC / 2); i++) {\n          tk[i] ^= tk[i - 1];\n        }\n        tt = tk[(KC / 2) - 1];\n\n        tk[KC / 2] ^= (S[ tt        & 0xFF]        ^\n                      (S[(tt >>  8) & 0xFF] <<  8) ^\n                      (S[(tt >> 16) & 0xFF] << 16) ^\n                      (S[(tt >> 24) & 0xFF] << 24));\n\n        for (let i = (KC / 2) + 1; i < KC; i++) {\n          tk[i] ^= tk[i - 1];\n        }\n      }\n\n      // copy values into round key arrays\n      let i = 0, r, c;\n      while (i < KC && t < roundKeyCount) {\n        r = t >> 2;\n        c = t % 4;\n        this.#Ke[r][c] = tk[i];\n        this.#Kd[rounds - r][c] = tk[i++];\n        t++;\n      }\n    }\n\n    // inverse-cipher-ify the decryption round key (fips-197 section 5.3)\n    for (let r = 1; r < rounds; r++) {\n      for (let c = 0; c < 4; c++) {\n        tt = this.#Kd[r][c];\n        this.#Kd[r][c] = (U1[(tt >> 24) & 0xFF] ^\n                          U2[(tt >> 16) & 0xFF] ^\n                          U3[(tt >>  8) & 0xFF] ^\n                          U4[ tt        & 0xFF]);\n      }\n    }\n  }\n\n  encrypt(plaintext: Uint8Array): Uint8Array {\n    if (plaintext.length != 16) {\n      throw new TypeError('invalid plaintext size (must be 16 bytes)');\n    }\n\n    const rounds = this.#Ke.length - 1;\n    const a = [0, 0, 0, 0];\n\n    // convert plaintext to (ints ^ key)\n    let t = convertToInt32(plaintext);\n    for (let i = 0; i < 4; i++) {\n      t[i] ^= this.#Ke[0][i];\n    }\n\n    // apply round transforms\n    for (let r = 1; r < rounds; r++) {\n      for (let i = 0; i < 4; i++) {\n        a[i] = (T1[(t[ i         ] >> 24) & 0xff] ^\n                T2[(t[(i + 1) % 4] >> 16) & 0xff] ^\n                T3[(t[(i + 2) % 4] >>  8) & 0xff] ^\n                T4[ t[(i + 3) % 4]        & 0xff] ^\n                this.#Ke[r][i]);\n      }\n      t = a.slice();\n    }\n\n    // the last round is special\n    const result = new Uint8Array(16);\n    let tt = 0;\n    for (let i = 0; i < 4; i++) {\n      tt = this.#Ke[rounds][i];\n      result[4 * i    ] = (S[(t[ i         ] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;\n      result[4 * i + 1] = (S[(t[(i + 1) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;\n      result[4 * i + 2] = (S[(t[(i + 2) % 4] >>  8) & 0xff] ^ (tt >>  8)) & 0xff;\n      result[4 * i + 3] = (S[ t[(i + 3) % 4]        & 0xff] ^  tt       ) & 0xff;\n    }\n\n    return result;\n  }\n\n  decrypt(ciphertext: Uint8Array): Uint8Array {\n    if (ciphertext.length != 16) {\n      throw new TypeError('invalid ciphertext size (must be 16 bytes)');\n    }\n\n    const rounds = this.#Kd.length - 1;\n    const a = [0, 0, 0, 0];\n\n    // convert plaintext to (ints ^ key)\n    let t = convertToInt32(ciphertext);\n    for (let i = 0; i < 4; i++) {\n      t[i] ^= this.#Kd[0][i];\n    }\n\n    // apply round transforms\n    for (let r = 1; r < rounds; r++) {\n      for (let i = 0; i < 4; i++) {\n        a[i] = (T5[(t[ i         ] >> 24) & 0xff] ^\n                T6[(t[(i + 3) % 4] >> 16) & 0xff] ^\n                T7[(t[(i + 2) % 4] >>  8) & 0xff] ^\n                T8[ t[(i + 1) % 4]        & 0xff] ^\n                this.#Kd[r][i]);\n      }\n      t = a.slice();\n    }\n\n    // the last round is special\n    const result = new Uint8Array(16);\n    let tt = 0;\n    for (let i = 0; i < 4; i++) {\n      tt = this.#Kd[rounds][i];\n      result[4 * i    ] = (Si[(t[ i         ] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;\n      result[4 * i + 1] = (Si[(t[(i + 3) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;\n      result[4 * i + 2] = (Si[(t[(i + 2) % 4] >>  8) & 0xff] ^ (tt >>  8)) & 0xff;\n      result[4 * i + 3] = (Si[ t[(i + 1) % 4]        & 0xff] ^  tt       ) & 0xff;\n    }\n\n    return result;\n  }\n}\n","\nimport { AES } from \"./aes.js\";\n\nexport abstract class ModeOfOperation {\n  readonly aes!: AES;\n  readonly name!: string;\n\n  constructor(name: string, key: Uint8Array, cls?: any) {\n    if (cls && !(this instanceof cls)) {\n      throw new Error(`${ name } must be instantiated with \"new\"`);\n    }\n\n    Object.defineProperties(this, {\n      aes: { enumerable: true, value: new AES(key) },\n      name: { enumerable: true, value: name }\n    });\n  }\n\n  abstract encrypt(plaintext: Uint8Array): Uint8Array;\n  abstract decrypt(ciphertext: Uint8Array): Uint8Array;\n}\n","// Cipher Block Chaining\n\nimport { ModeOfOperation } from \"./mode.js\";\n\nexport class CBC extends ModeOfOperation {\n  #iv: Uint8Array;\n  #lastBlock: Uint8Array;\n\n  constructor(key: Uint8Array, iv?: Uint8Array) {\n    super(\"ECC\", key, CBC);\n\n    if (iv) {\n      if (iv.length % 16) {\n        throw new TypeError(\"invalid iv size (must be 16 bytes)\");\n      }\n      this.#iv = new Uint8Array(iv);\n    } else {\n      this.#iv = new Uint8Array(16);\n    }\n\n    this.#lastBlock = this.iv;\n  }\n\n  get iv(): Uint8Array { return new Uint8Array(this.#iv); }\n\n  encrypt(plaintext: Uint8Array): Uint8Array {\n    if (plaintext.length % 16) {\n      throw new TypeError(\"invalid plaintext size (must be multiple of 16 bytes)\");\n    }\n\n    const ciphertext = new Uint8Array(plaintext.length);\n    for (let i = 0; i < plaintext.length; i += 16) {\n      for (let j = 0; j < 16; j++) {\n        this.#lastBlock[j] ^= plaintext[i + j];\n      }\n\n      this.#lastBlock = this.aes.encrypt(this.#lastBlock);\n      ciphertext.set(this.#lastBlock, i);\n    }\n\n    return ciphertext;\n  }\n\n  decrypt(ciphertext: Uint8Array): Uint8Array {\n    if (ciphertext.length % 16) {\n        throw new TypeError(\"invalid ciphertext size (must be multiple of 16 bytes)\");\n    }\n\n    const plaintext = new Uint8Array(ciphertext.length);\n    for (let i = 0; i < ciphertext.length; i += 16) {\n        const block = this.aes.decrypt(ciphertext.subarray(i, i + 16));\n\n        for (let j = 0; j < 16; j++) {\n          plaintext[i + j] = block[j] ^ this.#lastBlock[j];\n          this.#lastBlock[j] = ciphertext[i + j];\n        }\n    }\n\n    return plaintext;\n  }\n}\n","// Counter Mode\n\nimport { ModeOfOperation } from \"./mode.js\";\n\nexport class CTR extends ModeOfOperation {\n\n  // Remaining bytes for the one-time pad\n  #remaining: Uint8Array;\n  #remainingIndex: number;\n\n  // The current counter\n  #counter: Uint8Array;\n\n  constructor(key: Uint8Array, initialValue?: number | Uint8Array) {\n    super(\"CTR\", key, CTR);\n\n    this.#counter = new Uint8Array(16)\n    this.#counter.fill(0);\n\n    this.#remaining = this.#counter;  // This will be discarded immediately\n    this.#remainingIndex = 16;\n\n    if (initialValue == null) { initialValue = 1; }\n\n    if (typeof(initialValue) === \"number\") {\n      this.setCounterValue(initialValue);\n    } else {\n      this.setCounterBytes(initialValue);\n    }\n  }\n\n  get counter(): Uint8Array { return new Uint8Array(this.#counter); }\n\n  setCounterValue(value: number): void {\n    if (!Number.isInteger(value) || value < 0 || value > Number.MAX_SAFE_INTEGER) {\n      throw new TypeError(\"invalid counter initial integer value\");\n    }\n\n    for (let index = 15; index >= 0; --index) {\n      this.#counter[index] = value % 256;\n      value = Math.floor(value / 256);\n    }\n  }\n\n  setCounterBytes(value: Uint8Array): void {\n    if (value.length !== 16) {\n      throw new TypeError(\"invalid counter initial Uint8Array value length\");\n    }\n\n    this.#counter.set(value);\n  }\n\n  increment() {\n    for (let i = 15; i >= 0; i--) {\n      if (this.#counter[i] === 255) {\n        this.#counter[i] = 0;\n      } else {\n        this.#counter[i]++;\n        break;\n      }\n    }\n  }\n\n  encrypt(plaintext: Uint8Array): Uint8Array {\n    const crypttext = new Uint8Array(plaintext);\n\n    for (let i = 0; i < crypttext.length; i++) {\n      if (this.#remainingIndex === 16) {\n        this.#remaining = this.aes.encrypt(this.#counter);\n        this.#remainingIndex = 0;\n        this.increment();\n      }\n      crypttext[i] ^= this.#remaining[this.#remainingIndex++];\n    }\n\n    return crypttext;\n  }\n\n  decrypt(ciphertext: Uint8Array): Uint8Array {\n    return this.encrypt(ciphertext);\n  }\n}\n","/**\n *  @_ignore\n */\n\nimport {\n    getBytesCopy, assertArgument, toUtf8Bytes\n} from \"../utils/index.js\";\n\nexport function looseArrayify(hexString: string): Uint8Array {\n    if (typeof(hexString) === \"string\" && !hexString.startsWith(\"0x\")) {\n        hexString = \"0x\" + hexString;\n    }\n    return getBytesCopy(hexString);\n}\n\nexport function zpad(value: String | number, length: number): String {\n    value = String(value);\n    while (value.length < length) { value = '0' + value; }\n    return value;\n}\n\nexport function getPassword(password: string | Uint8Array): Uint8Array {\n    if (typeof(password) === 'string') {\n        return toUtf8Bytes(password, \"NFKC\");\n    }\n    return getBytesCopy(password);\n}\n\nexport function spelunk<T>(object: any, _path: string): T {\n\n    const match = _path.match(/^([a-z0-9$_.-]*)(:([a-z]+))?(!)?$/i);\n    assertArgument(match != null, \"invalid path\", \"path\", _path);\n\n    const path = match[1];\n    const type = match[3];\n    const reqd = (match[4] === \"!\");\n\n    let cur = object;\n    for (const comp of path.toLowerCase().split('.')) {\n\n        // Search for a child object with a case-insensitive matching key\n        if (Array.isArray(cur)) {\n            if (!comp.match(/^[0-9]+$/)) { break; }\n            cur = cur[parseInt(comp)];\n\n        } else if (typeof(cur) === \"object\") {\n            let found: any = null;\n            for (const key in cur) {\n                 if (key.toLowerCase() === comp) {\n                     found = cur[key];\n                     break;\n                 }\n            }\n            cur = found;\n\n        } else {\n            cur = null;\n        }\n\n        if (cur == null) { break; }\n    }\n\n    assertArgument(!reqd || cur != null, \"missing required value\", \"path\", path);\n\n    if (type && cur != null) {\n        if (type === \"int\") {\n            if (typeof(cur) === \"string\" && cur.match(/^-?[0-9]+$/)) {\n                return <T><unknown>parseInt(cur);\n            } else if (Number.isSafeInteger(cur)) {\n                return cur;\n            }\n        }\n\n        if (type === \"number\") {\n            if (typeof(cur) === \"string\" && cur.match(/^-?[0-9.]*$/)) {\n                return <T><unknown>parseFloat(cur);\n            }\n        }\n\n        if (type === \"data\") {\n            if (typeof(cur) === \"string\") { return <T><unknown>looseArrayify(cur); }\n        }\n\n        if (type === \"array\" && Array.isArray(cur)) { return <T><unknown>cur; }\n        if (type === typeof(cur)) { return cur; }\n\n        assertArgument(false, `wrong type found for ${ type } `, \"path\", path);\n    }\n\n    return cur;\n}\n/*\nexport function follow(object: any, path: string): null | string {\n    let currentChild = object;\n\n    for (const comp of path.toLowerCase().split('/')) {\n\n        // Search for a child object with a case-insensitive matching key\n        let matchingChild = null;\n        for (const key in currentChild) {\n             if (key.toLowerCase() === comp) {\n                 matchingChild = currentChild[key];\n                 break;\n             }\n        }\n\n        if (matchingChild === null) { return null; }\n\n        currentChild = matchingChild;\n    }\n\n    return currentChild;\n}\n\n// \"path/to/something:type!\"\nexport function followRequired(data: any, path: string): string {\n    const value = follow(data, path);\n    if (value != null) { return value; }\n    return logger.throwArgumentError(\"invalid value\", `data:${ path }`,\n    JSON.stringify(data));\n}\n*/\n// See: https://www.ietf.org/rfc/rfc4122.txt (Section 4.4)\n/*\nexport function uuidV4(randomBytes: BytesLike): string {\n    const bytes = getBytes(randomBytes, \"randomBytes\");\n\n    // Section: 4.1.3:\n    // - time_hi_and_version[12:16] = 0b0100\n    bytes[6] = (bytes[6] & 0x0f) | 0x40;\n\n    // Section 4.4\n    // - clock_seq_hi_and_reserved[6] = 0b0\n    // - clock_seq_hi_and_reserved[7] = 0b1\n    bytes[8] = (bytes[8] & 0x3f) | 0x80;\n\n    const value = hexlify(bytes);\n\n    return [\n       value.substring(2, 10),\n       value.substring(10, 14),\n       value.substring(14, 18),\n       value.substring(18, 22),\n       value.substring(22, 34),\n    ].join(\"-\");\n}\n*/\n","/**\n *  The JSON Wallet formats allow a simple way to store the private\n *  keys needed in Ethereum along with related information and allows\n *  for extensible forms of encryption.\n *\n *  These utilities facilitate decrypting and encrypting the most common\n *  JSON Wallet formats.\n *\n *  @_subsection: api/wallet:JSON Wallets  [json-wallets]\n */\n\nimport { CTR } from \"aes-js\";\n\nimport { getAddress } from \"../address/index.js\";\nimport { keccak256, pbkdf2, randomBytes, scrypt, scryptSync } from \"../crypto/index.js\";\nimport { computeAddress } from \"../transaction/index.js\";\nimport {\n    concat, getBytes, hexlify, uuidV4, assert, assertArgument\n} from \"../utils/index.js\";\n\nimport { getPassword, spelunk, zpad } from \"./utils.js\";\n\nimport type { ProgressCallback } from \"../crypto/index.js\";\nimport type { BytesLike } from \"../utils/index.js\";\n\nimport { version } from \"../_version.js\";\n\n\nconst defaultPath = \"m/44'/60'/0'/0/0\";\n\n/**\n *  The contents of a JSON Keystore Wallet.\n */\nexport type KeystoreAccount = {\n    address: string;\n    privateKey: string;\n    mnemonic?: {\n        path?: string;\n        locale?: string;\n        entropy: string;\n    }\n};\n\n/**\n *  The parameters to use when encrypting a JSON Keystore Wallet.\n */\nexport type EncryptOptions = {\n   progressCallback?: ProgressCallback;\n   iv?: BytesLike;\n   entropy?: BytesLike;\n   client?: string;\n   salt?: BytesLike;\n   uuid?: string;\n   scrypt?: {\n       N?: number;\n       r?: number;\n       p?: number;\n   }\n}\n\n/**\n *  Returns true if %%json%% is a valid JSON Keystore Wallet.\n */\nexport function isKeystoreJson(json: string): boolean {\n    try {\n        const data = JSON.parse(json);\n        const version = ((data.version != null) ? parseInt(data.version): 0);\n        if (version === 3) { return true; }\n    } catch (error) { }\n    return false;\n}\n\nfunction decrypt(data: any, key: Uint8Array, ciphertext: Uint8Array): string {\n    const cipher = spelunk<string>(data, \"crypto.cipher:string\");\n    if (cipher === \"aes-128-ctr\") {\n        const iv = spelunk<Uint8Array>(data, \"crypto.cipherparams.iv:data!\")\n        const aesCtr = new CTR(key, iv);\n        return hexlify(aesCtr.decrypt(ciphertext));\n    }\n\n    assert(false, \"unsupported cipher\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"decrypt\"\n    });\n}\n\nfunction getAccount(data: any, _key: string): KeystoreAccount {\n    const key = getBytes(_key);\n    const ciphertext = spelunk<Uint8Array>(data, \"crypto.ciphertext:data!\");\n\n    const computedMAC = hexlify(keccak256(concat([ key.slice(16, 32), ciphertext ]))).substring(2);\n    assertArgument(computedMAC === spelunk<string>(data, \"crypto.mac:string!\").toLowerCase(),\n        \"incorrect password\", \"password\", \"[ REDACTED ]\");\n\n    const privateKey = decrypt(data, key.slice(0, 16), ciphertext);\n\n    const address = computeAddress(privateKey);\n    if (data.address) {\n        let check = data.address.toLowerCase();\n        if (!check.startsWith(\"0x\")) { check = \"0x\" + check; }\n\n        assertArgument(getAddress(check) === address, \"keystore address/privateKey mismatch\", \"address\", data.address);\n    }\n\n    const account: KeystoreAccount = { address, privateKey };\n\n    // Version 0.1 x-ethers metadata must contain an encrypted mnemonic phrase\n    const version = spelunk(data, \"x-ethers.version:string\");\n    if (version === \"0.1\") {\n        const mnemonicKey = key.slice(32, 64);\n\n        const mnemonicCiphertext = spelunk<Uint8Array>(data, \"x-ethers.mnemonicCiphertext:data!\");\n        const mnemonicIv = spelunk<Uint8Array>(data, \"x-ethers.mnemonicCounter:data!\");\n\n        const mnemonicAesCtr = new CTR(mnemonicKey, mnemonicIv);\n\n        account.mnemonic = {\n            path: (spelunk<null | string>(data, \"x-ethers.path:string\") || defaultPath),\n            locale: (spelunk<null | string>(data, \"x-ethers.locale:string\") || \"en\"),\n            entropy: hexlify(getBytes(mnemonicAesCtr.decrypt(mnemonicCiphertext)))\n        };\n    }\n\n    return account;\n}\n\ntype ScryptParams = {\n    name: \"scrypt\";\n    salt: Uint8Array;\n    N: number;\n    r: number;\n    p: number;\n    dkLen: number;\n};\n\ntype KdfParams = ScryptParams | {\n    name: \"pbkdf2\";\n    salt: Uint8Array;\n    count: number;\n    dkLen: number;\n    algorithm: \"sha256\" | \"sha512\";\n};\n\nfunction getDecryptKdfParams<T>(data: any): KdfParams {\n    const kdf = spelunk(data, \"crypto.kdf:string\");\n    if (kdf && typeof(kdf) === \"string\") {\n        if (kdf.toLowerCase() === \"scrypt\") {\n            const salt = spelunk<Uint8Array>(data, \"crypto.kdfparams.salt:data!\");\n            const N = spelunk<number>(data, \"crypto.kdfparams.n:int!\");\n            const r = spelunk<number>(data, \"crypto.kdfparams.r:int!\");\n            const p = spelunk<number>(data, \"crypto.kdfparams.p:int!\");\n\n            // Make sure N is a power of 2\n            assertArgument(N > 0 && (N & (N - 1)) === 0, \"invalid kdf.N\", \"kdf.N\", N);\n            assertArgument(r > 0 && p > 0, \"invalid kdf\", \"kdf\", kdf);\n\n            const dkLen = spelunk<number>(data, \"crypto.kdfparams.dklen:int!\");\n            assertArgument(dkLen === 32, \"invalid kdf.dklen\", \"kdf.dflen\", dkLen);\n\n            return { name: \"scrypt\", salt, N, r, p, dkLen: 64 };\n\n        } else if (kdf.toLowerCase() === \"pbkdf2\") {\n\n            const salt = spelunk<Uint8Array>(data, \"crypto.kdfparams.salt:data!\");\n\n            const prf = spelunk<string>(data, \"crypto.kdfparams.prf:string!\");\n            const algorithm = prf.split(\"-\").pop();\n            assertArgument(algorithm === \"sha256\" || algorithm === \"sha512\", \"invalid kdf.pdf\", \"kdf.pdf\", prf);\n\n            const count = spelunk<number>(data, \"crypto.kdfparams.c:int!\");\n\n            const dkLen = spelunk<number>(data, \"crypto.kdfparams.dklen:int!\");\n            assertArgument(dkLen === 32, \"invalid kdf.dklen\", \"kdf.dklen\", dkLen);\n\n            return { name: \"pbkdf2\", salt, count, dkLen, algorithm };\n        }\n    }\n\n    assertArgument(false, \"unsupported key-derivation function\", \"kdf\", kdf);\n}\n\n\n/**\n *  Returns the account details for the JSON Keystore Wallet %%json%%\n *  using %%password%%.\n *\n *  It is preferred to use the [async version](decryptKeystoreJson)\n *  instead, which allows a [[ProgressCallback]] to keep the user informed\n *  as to the decryption status.\n *\n *  This method will block the event loop (freezing all UI) until decryption\n *  is complete, which can take quite some time, depending on the wallet\n *  paramters and platform.\n */\nexport function decryptKeystoreJsonSync(json: string, _password: string | Uint8Array): KeystoreAccount {\n    const data = JSON.parse(json);\n\n    const password = getPassword(_password);\n\n    const params = getDecryptKdfParams(data);\n    if (params.name === \"pbkdf2\") {\n        const { salt, count, dkLen, algorithm } = params;\n        const key = pbkdf2(password, salt, count, dkLen, algorithm);\n        return getAccount(data, key);\n    }\n\n    assert(params.name === \"scrypt\", \"cannot be reached\", \"UNKNOWN_ERROR\", { params })\n\n    const { salt, N, r, p, dkLen } = params;\n    const key = scryptSync(password, salt, N, r, p, dkLen);\n    return getAccount(data, key);\n}\n\nfunction stall(duration: number): Promise<void> {\n    return new Promise((resolve) => { setTimeout(() => { resolve(); }, duration); });\n}\n\n/**\n *  Resolves to the decrypted JSON Keystore Wallet %%json%% using the\n *  %%password%%.\n *\n *  If provided, %%progress%% will be called periodically during the\n *  decrpytion to provide feedback, and if the function returns\n *  ``false`` will halt decryption.\n *\n *  The %%progressCallback%% will **always** receive ``0`` before\n *  decryption begins and ``1`` when complete.\n */\nexport async function decryptKeystoreJson(json: string, _password: string | Uint8Array, progress?: ProgressCallback): Promise<KeystoreAccount> {\n    const data = JSON.parse(json);\n\n    const password = getPassword(_password);\n\n    const params = getDecryptKdfParams(data);\n    if (params.name === \"pbkdf2\") {\n        if (progress) {\n            progress(0);\n            await stall(0);\n        }\n        const { salt, count, dkLen, algorithm } = params;\n        const key = pbkdf2(password, salt, count, dkLen, algorithm);\n        if (progress) {\n            progress(1);\n            await stall(0);\n        }\n        return getAccount(data, key);\n    }\n\n    assert(params.name === \"scrypt\", \"cannot be reached\", \"UNKNOWN_ERROR\", { params })\n\n    const { salt, N, r, p, dkLen } = params;\n    const key = await scrypt(password, salt, N, r, p, dkLen, progress);\n    return getAccount(data, key);\n}\n\nfunction getEncryptKdfParams(options: EncryptOptions): ScryptParams {\n    // Check/generate the salt\n    const salt = (options.salt != null) ? getBytes(options.salt, \"options.salt\"): randomBytes(32);\n\n    // Override the scrypt password-based key derivation function parameters\n    let N = (1 << 17), r = 8, p = 1;\n    if (options.scrypt) {\n        if (options.scrypt.N) { N = options.scrypt.N; }\n        if (options.scrypt.r) { r = options.scrypt.r; }\n        if (options.scrypt.p) { p = options.scrypt.p; }\n    }\n    assertArgument(typeof(N) === \"number\" && N > 0 && Number.isSafeInteger(N) && (BigInt(N) & BigInt(N - 1)) === BigInt(0), \"invalid scrypt N parameter\", \"options.N\", N);\n    assertArgument(typeof(r) === \"number\" && r > 0 && Number.isSafeInteger(r), \"invalid scrypt r parameter\", \"options.r\", r);\n    assertArgument(typeof(p) === \"number\" && p > 0 && Number.isSafeInteger(p), \"invalid scrypt p parameter\", \"options.p\", p);\n\n    return { name: \"scrypt\", dkLen: 32, salt, N, r, p };\n}\n\nfunction _encryptKeystore(key: Uint8Array, kdf: ScryptParams, account: KeystoreAccount, options: EncryptOptions): any {\n\n    const privateKey = getBytes(account.privateKey, \"privateKey\");\n\n    // Override initialization vector\n    const iv = (options.iv != null) ? getBytes(options.iv, \"options.iv\"): randomBytes(16);\n    assertArgument(iv.length === 16, \"invalid options.iv length\", \"options.iv\", options.iv);\n\n    // Override the uuid\n    const uuidRandom = (options.uuid != null) ? getBytes(options.uuid, \"options.uuid\"): randomBytes(16);\n    assertArgument(uuidRandom.length === 16, \"invalid options.uuid length\", \"options.uuid\", options.iv);\n\n    // This will be used to encrypt the wallet (as per Web3 secret storage)\n    // - 32 bytes   As normal for the Web3 secret storage (derivedKey, macPrefix)\n    // - 32 bytes   AES key to encrypt mnemonic with (required here to be Ethers Wallet)\n    const derivedKey = key.slice(0, 16);\n    const macPrefix = key.slice(16, 32);\n\n    // Encrypt the private key\n    const aesCtr = new CTR(derivedKey, iv);\n    const ciphertext = getBytes(aesCtr.encrypt(privateKey));\n\n    // Compute the message authentication code, used to check the password\n    const mac = keccak256(concat([ macPrefix, ciphertext ]))\n\n    // See: https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition\n    const data: { [key: string]: any } = {\n        address: account.address.substring(2).toLowerCase(),\n        id: uuidV4(uuidRandom),\n        version: 3,\n        Crypto: {\n            cipher: \"aes-128-ctr\",\n            cipherparams: {\n                iv: hexlify(iv).substring(2),\n            },\n            ciphertext: hexlify(ciphertext).substring(2),\n            kdf: \"scrypt\",\n            kdfparams: {\n                salt: hexlify(kdf.salt).substring(2),\n                n: kdf.N,\n                dklen: 32,\n                p: kdf.p,\n                r: kdf.r\n            },\n            mac: mac.substring(2)\n        }\n    };\n\n    // If we have a mnemonic, encrypt it into the JSON wallet\n    if (account.mnemonic) {\n        const client = (options.client != null) ? options.client: `ethers/${ version }`;\n\n        const path = account.mnemonic.path || defaultPath;\n        const locale = account.mnemonic.locale || \"en\";\n\n        const mnemonicKey = key.slice(32, 64);\n\n        const entropy = getBytes(account.mnemonic.entropy, \"account.mnemonic.entropy\");\n        const mnemonicIv = randomBytes(16);\n        const mnemonicAesCtr = new CTR(mnemonicKey, mnemonicIv);\n        const mnemonicCiphertext = getBytes(mnemonicAesCtr.encrypt(entropy));\n\n        const now = new Date();\n        const timestamp = (now.getUTCFullYear() + \"-\" +\n                           zpad(now.getUTCMonth() + 1, 2) + \"-\" +\n                           zpad(now.getUTCDate(), 2) + \"T\" +\n                           zpad(now.getUTCHours(), 2) + \"-\" +\n                           zpad(now.getUTCMinutes(), 2) + \"-\" +\n                           zpad(now.getUTCSeconds(), 2) + \".0Z\");\n        const gethFilename = (\"UTC--\" + timestamp + \"--\" + data.address);\n\n        data[\"x-ethers\"] = {\n            client, gethFilename, path, locale,\n            mnemonicCounter: hexlify(mnemonicIv).substring(2),\n            mnemonicCiphertext: hexlify(mnemonicCiphertext).substring(2),\n            version: \"0.1\"\n        };\n    }\n\n    return JSON.stringify(data);\n}\n\n/**\n *  Return the JSON Keystore Wallet for %%account%% encrypted with\n *  %%password%%.\n *\n *  The %%options%% can be used to tune the password-based key\n *  derivation function parameters, explicitly set the random values\n *  used. Any provided [[ProgressCallback]] is ignord.\n */\nexport function encryptKeystoreJsonSync(account: KeystoreAccount, password: string | Uint8Array, options?: EncryptOptions): string {\n    if (options == null) { options = { }; }\n\n    const passwordBytes = getPassword(password);\n    const kdf = getEncryptKdfParams(options);\n    const key = scryptSync(passwordBytes, kdf.salt, kdf.N, kdf.r, kdf.p, 64);\n    return _encryptKeystore(getBytes(key), kdf, account, options);\n}\n\n/**\n *  Resolved to the JSON Keystore Wallet for %%account%% encrypted\n *  with %%password%%.\n *\n *  The %%options%% can be used to tune the password-based key\n *  derivation function parameters, explicitly set the random values\n *  used and provide a [[ProgressCallback]] to receive periodic updates\n *  on the completion status..\n */\nexport async function encryptKeystoreJson(account: KeystoreAccount, password: string | Uint8Array, options?: EncryptOptions): Promise<string> {\n    if (options == null) { options = { }; }\n\n    const passwordBytes = getPassword(password);\n    const kdf = getEncryptKdfParams(options);\n    const key = await scrypt(passwordBytes, kdf.salt, kdf.N, kdf.r, kdf.p, 64, options.progressCallback);\n    return _encryptKeystore(getBytes(key), kdf, account, options);\n}\n\n","/**\n *  Explain HD Wallets..\n *\n *  @_subsection: api/wallet:HD Wallets  [hd-wallets]\n */\nimport { computeHmac, randomBytes, ripemd160, SigningKey, sha256 } from \"../crypto/index.js\";\nimport { VoidSigner } from \"../providers/index.js\";\nimport { computeAddress } from \"../transaction/index.js\";\nimport {\n    concat, dataSlice, decodeBase58, defineProperties, encodeBase58,\n    getBytes, hexlify, isBytesLike,\n    getNumber, toBeArray, toBigInt, toBeHex,\n    assertPrivate, assert, assertArgument\n} from \"../utils/index.js\";\nimport { LangEn } from \"../wordlists/lang-en.js\";\n\nimport { BaseWallet } from \"./base-wallet.js\";\nimport { Mnemonic } from \"./mnemonic.js\";\nimport {\n    encryptKeystoreJson, encryptKeystoreJsonSync,\n} from \"./json-keystore.js\";\n\nimport type { ProgressCallback } from \"../crypto/index.js\";\nimport type { Provider } from \"../providers/index.js\";\nimport type { BytesLike, Numeric } from \"../utils/index.js\";\nimport type { Wordlist } from \"../wordlists/index.js\";\n\nimport type { KeystoreAccount } from \"./json-keystore.js\";\n\n/**\n *  The default derivation path for Ethereum HD Nodes. (i.e. ``\"m/44'/60'/0'/0/0\"``)\n */\nexport const defaultPath: string = \"m/44'/60'/0'/0/0\";\n\n\n// \"Bitcoin seed\"\nconst MasterSecret = new Uint8Array([ 66, 105, 116, 99, 111, 105, 110, 32, 115, 101, 101, 100 ]);\n\nconst HardenedBit = 0x80000000;\n\nconst N = BigInt(\"0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\");\n\nconst Nibbles = \"0123456789abcdef\";\nfunction zpad(value: number, length: number): string {\n    let result = \"\";\n    while (value) {\n        result = Nibbles[value % 16] + result;\n        value = Math.trunc(value / 16);\n    }\n    while (result.length < length * 2) { result = \"0\" + result; }\n    return \"0x\" + result;\n}\n\nfunction encodeBase58Check(_value: BytesLike): string {\n    const value = getBytes(_value);\n    const check = dataSlice(sha256(sha256(value)), 0, 4);\n    const bytes = concat([ value, check ]);\n    return encodeBase58(bytes);\n}\n\nconst _guard = { };\n\nfunction ser_I(index: number, chainCode: string, publicKey: string, privateKey: null | string): { IL: Uint8Array, IR: Uint8Array } {\n    const data = new Uint8Array(37);\n\n    if (index & HardenedBit) {\n        assert(privateKey != null, \"cannot derive child of neutered node\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"deriveChild\"\n        });\n\n        // Data = 0x00 || ser_256(k_par)\n        data.set(getBytes(privateKey), 1);\n\n    } else {\n        // Data = ser_p(point(k_par))\n        data.set(getBytes(publicKey));\n    }\n\n    // Data += ser_32(i)\n    for (let i = 24; i >= 0; i -= 8) { data[33 + (i >> 3)] = ((index >> (24 - i)) & 0xff); }\n    const I = getBytes(computeHmac(\"sha512\", chainCode, data));\n\n    return { IL: I.slice(0, 32), IR: I.slice(32) };\n}\n\ntype HDNodeLike<T> = { depth: number, deriveChild: (i: number) => T };\nfunction derivePath<T extends HDNodeLike<T>>(node: T, path: string): T {\n    const components = path.split(\"/\");\n\n    assertArgument(components.length > 0, \"invalid path\", \"path\", path);\n\n    if (components[0] === \"m\") {\n        assertArgument(node.depth === 0, `cannot derive root path (i.e. path starting with \"m/\") for a node at non-zero depth ${ node.depth }`, \"path\", path);\n        components.shift();\n    }\n\n    let result: T = node;\n    for (let i = 0; i < components.length; i++) {\n        const component = components[i];\n\n        if (component.match(/^[0-9]+'$/)) {\n            const index = parseInt(component.substring(0, component.length - 1));\n            assertArgument(index < HardenedBit, \"invalid path index\", `path[${ i }]`, component);\n            result = result.deriveChild(HardenedBit + index);\n\n        } else if (component.match(/^[0-9]+$/)) {\n            const index = parseInt(component);\n            assertArgument(index < HardenedBit, \"invalid path index\", `path[${ i }]`, component);\n            result = result.deriveChild(index);\n\n        } else {\n            assertArgument(false, \"invalid path component\", `path[${ i }]`, component);\n        }\n    }\n\n    return result;\n}\n\n/**\n *  An **HDNodeWallet** is a [[Signer]] backed by the private key derived\n *  from an HD Node using the [[link-bip-32]] stantard.\n *\n *  An HD Node forms a hierarchal structure with each HD Node having a\n *  private key and the ability to derive child HD Nodes, defined by\n *  a path indicating the index of each child.\n */\nexport class HDNodeWallet extends BaseWallet {\n    /**\n     *  The compressed public key.\n     */\n    readonly publicKey!: string;\n\n    /**\n     *  The fingerprint.\n     *\n     *  A fingerprint allows quick qay to detect parent and child nodes,\n     *  but developers should be prepared to deal with collisions as it\n     *  is only 4 bytes.\n     */\n    readonly fingerprint!: string;\n\n    /**\n     *  The parent fingerprint.\n     */\n    readonly parentFingerprint!: string;\n\n    /**\n     *  The mnemonic used to create this HD Node, if available.\n     *\n     *  Sources such as extended keys do not encode the mnemonic, in\n     *  which case this will be ``null``.\n     */\n    readonly mnemonic!: null | Mnemonic;\n\n    /**\n     *  The chaincode, which is effectively a public key used\n     *  to derive children.\n     */\n    readonly chainCode!: string;\n\n    /**\n     *  The derivation path of this wallet.\n     *\n     *  Since extended keys do not provide full path details, this\n     *  may be ``null``, if instantiated from a source that does not\n     *  encode it.\n     */\n    readonly path!: null | string;\n\n    /**\n     *  The child index of this wallet. Values over ``2 *\\* 31`` indicate\n     *  the node is hardened.\n     */\n    readonly index!: number;\n\n    /**\n     *  The depth of this wallet, which is the number of components\n     *  in its path.\n     */\n    readonly depth!: number;\n\n    /**\n     *  @private\n     */\n    constructor(guard: any, signingKey: SigningKey, parentFingerprint: string, chainCode: string, path: null | string, index: number, depth: number, mnemonic: null | Mnemonic, provider: null | Provider) {\n        super(signingKey, provider);\n        assertPrivate(guard, _guard, \"HDNodeWallet\");\n\n        defineProperties<HDNodeWallet>(this, { publicKey: signingKey.compressedPublicKey });\n\n        const fingerprint = dataSlice(ripemd160(sha256(this.publicKey)), 0, 4);\n        defineProperties<HDNodeWallet>(this, {\n            parentFingerprint, fingerprint,\n            chainCode, path, index, depth\n        });\n\n        defineProperties<HDNodeWallet>(this, { mnemonic });\n    }\n\n    connect(provider: null | Provider): HDNodeWallet {\n        return new HDNodeWallet(_guard, this.signingKey, this.parentFingerprint,\n            this.chainCode, this.path, this.index, this.depth, this.mnemonic, provider);\n    }\n\n    #account(): KeystoreAccount {\n        const account: KeystoreAccount = { address: this.address, privateKey: this.privateKey };\n        const m = this.mnemonic;\n        if (this.path && m && m.wordlist.locale === \"en\" && m.password === \"\") {\n            account.mnemonic = {\n                path: this.path,\n                locale: \"en\",\n                entropy: m.entropy\n            };\n        }\n\n        return account;\n    }\n\n    /**\n     *  Resolves to a [JSON Keystore Wallet](json-wallets) encrypted with\n     *  %%password%%.\n     *\n     *  If %%progressCallback%% is specified, it will receive periodic\n     *  updates as the encryption process progreses.\n     */\n    async encrypt(password: Uint8Array | string, progressCallback?: ProgressCallback): Promise<string> {\n        return await encryptKeystoreJson(this.#account(), password, { progressCallback });\n    }\n\n    /**\n     *  Returns a [JSON Keystore Wallet](json-wallets) encryped with\n     *  %%password%%.\n     *\n     *  It is preferred to use the [async version](encrypt) instead,\n     *  which allows a [[ProgressCallback]] to keep the user informed.\n     *\n     *  This method will block the event loop (freezing all UI) until\n     *  it is complete, which may be a non-trivial duration.\n     */\n    encryptSync(password: Uint8Array | string): string {\n        return encryptKeystoreJsonSync(this.#account(), password);\n    }\n\n    /**\n     *  The extended key.\n     *\n     *  This key will begin with the prefix ``xpriv`` and can be used to\n     *  reconstruct this HD Node to derive its children.\n     */\n    get extendedKey(): string {\n        // We only support the mainnet values for now, but if anyone needs\n        // testnet values, let me know. I believe current sentiment is that\n        // we should always use mainnet, and use BIP-44 to derive the network\n        //   - Mainnet: public=0x0488B21E, private=0x0488ADE4\n        //   - Testnet: public=0x043587CF, private=0x04358394\n\n        assert(this.depth < 256, \"Depth too deep\", \"UNSUPPORTED_OPERATION\", { operation: \"extendedKey\" });\n\n        return encodeBase58Check(concat([\n            \"0x0488ADE4\", zpad(this.depth, 1), this.parentFingerprint,\n            zpad(this.index, 4), this.chainCode,\n            concat([ \"0x00\", this.privateKey ])\n        ]));\n    }\n\n    /**\n     *  Returns true if this wallet has a path, providing a Type Guard\n     *  that the path is non-null.\n     */\n    hasPath(): this is { path: string } { return (this.path != null); }\n\n    /**\n     *  Returns a neutered HD Node, which removes the private details\n     *  of an HD Node.\n     *\n     *  A neutered node has no private key, but can be used to derive\n     *  child addresses and other public data about the HD Node.\n     */\n    neuter(): HDNodeVoidWallet {\n        return new HDNodeVoidWallet(_guard, this.address, this.publicKey,\n            this.parentFingerprint, this.chainCode, this.path, this.index,\n            this.depth, this.provider);\n    }\n\n    /**\n     *  Return the child for %%index%%.\n     */\n    deriveChild(_index: Numeric): HDNodeWallet {\n        const index = getNumber(_index, \"index\");\n        assertArgument(index <= 0xffffffff, \"invalid index\", \"index\", index);\n\n        // Base path\n        let path = this.path;\n        if (path) {\n            path += \"/\" + (index & ~HardenedBit);\n            if (index & HardenedBit) { path += \"'\"; }\n        }\n\n        const { IR, IL } = ser_I(index, this.chainCode, this.publicKey, this.privateKey);\n        const ki = new SigningKey(toBeHex((toBigInt(IL) + BigInt(this.privateKey)) % N, 32));\n\n        return new HDNodeWallet(_guard, ki, this.fingerprint, hexlify(IR),\n            path, index, this.depth + 1, this.mnemonic, this.provider);\n\n    }\n\n    /**\n     *  Return the HDNode for %%path%% from this node.\n     */\n    derivePath(path: string): HDNodeWallet {\n        return derivePath<HDNodeWallet>(this, path);\n    }\n\n    static #fromSeed(_seed: BytesLike, mnemonic: null | Mnemonic): HDNodeWallet {\n        assertArgument(isBytesLike(_seed), \"invalid seed\", \"seed\", \"[REDACTED]\");\n\n        const seed = getBytes(_seed, \"seed\");\n        assertArgument(seed.length >= 16 && seed.length <= 64 , \"invalid seed\", \"seed\", \"[REDACTED]\");\n\n        const I = getBytes(computeHmac(\"sha512\", MasterSecret, seed));\n        const signingKey = new SigningKey(hexlify(I.slice(0, 32)));\n\n        return new HDNodeWallet(_guard, signingKey, \"0x00000000\", hexlify(I.slice(32)),\n            \"m\", 0, 0, mnemonic, null);\n    }\n\n    /**\n     *  Creates a new HD Node from %%extendedKey%%.\n     *\n     *  If the %%extendedKey%% will either have a prefix or ``xpub`` or\n     *  ``xpriv``, returning a neutered HD Node ([[HDNodeVoidWallet]])\n     *  or full HD Node ([[HDNodeWallet) respectively.\n     */\n    static fromExtendedKey(extendedKey: string): HDNodeWallet | HDNodeVoidWallet {\n        const bytes = toBeArray(decodeBase58(extendedKey)); // @TODO: redact\n\n        assertArgument(bytes.length === 82 || encodeBase58Check(bytes.slice(0, 78)) === extendedKey,\n            \"invalid extended key\", \"extendedKey\", \"[ REDACTED ]\");\n\n        const depth = bytes[4];\n        const parentFingerprint = hexlify(bytes.slice(5, 9));\n        const index = parseInt(hexlify(bytes.slice(9, 13)).substring(2), 16);\n        const chainCode = hexlify(bytes.slice(13, 45));\n        const key = bytes.slice(45, 78);\n\n        switch (hexlify(bytes.slice(0, 4))) {\n            // Public Key\n            case \"0x0488b21e\": case \"0x043587cf\": {\n                const publicKey = hexlify(key);\n                return new HDNodeVoidWallet(_guard, computeAddress(publicKey), publicKey,\n                    parentFingerprint, chainCode, null, index, depth, null);\n            }\n\n            // Private Key\n            case \"0x0488ade4\": case \"0x04358394 \":\n                if (key[0] !== 0) { break; }\n                return new HDNodeWallet(_guard, new SigningKey(key.slice(1)),\n                    parentFingerprint, chainCode, null, index, depth, null, null);\n        }\n\n\n        assertArgument(false, \"invalid extended key prefix\", \"extendedKey\", \"[ REDACTED ]\");\n    }\n\n    /**\n     *  Creates a new random HDNode.\n     */\n    static createRandom(password?: string, path?: string, wordlist?: Wordlist): HDNodeWallet {\n        if (password == null) { password = \"\"; }\n        if (path == null) { path = defaultPath; }\n        if (wordlist == null) { wordlist = LangEn.wordlist(); }\n        const mnemonic = Mnemonic.fromEntropy(randomBytes(16), password, wordlist)\n        return HDNodeWallet.#fromSeed(mnemonic.computeSeed(), mnemonic).derivePath(path);\n    }\n\n    /**\n     *  Create an HD Node from %%mnemonic%%.\n     */\n    static fromMnemonic(mnemonic: Mnemonic, path?: string): HDNodeWallet {\n        if (!path) { path = defaultPath; }\n        return HDNodeWallet.#fromSeed(mnemonic.computeSeed(), mnemonic).derivePath(path);\n    }\n\n    /**\n     *  Creates an HD Node from a mnemonic %%phrase%%.\n     */\n    static fromPhrase(phrase: string, password?: string, path?: string, wordlist?: Wordlist): HDNodeWallet {\n        if (password == null) { password = \"\"; }\n        if (path == null) { path = defaultPath; }\n        if (wordlist == null) { wordlist = LangEn.wordlist(); }\n        const mnemonic = Mnemonic.fromPhrase(phrase, password, wordlist)\n        return HDNodeWallet.#fromSeed(mnemonic.computeSeed(), mnemonic).derivePath(path);\n    }\n\n    /**\n     *  Creates an HD Node from a %%seed%%.\n     */\n    static fromSeed(seed: BytesLike): HDNodeWallet {\n        return HDNodeWallet.#fromSeed(seed, null);\n    }\n}\n\n/**\n *  A **HDNodeVoidWallet** cannot sign, but provides access to\n *  the children nodes of a [[link-bip-32]] HD wallet addresses.\n *\n *  The can be created by using an extended ``xpub`` key to\n *  [[HDNodeWallet_fromExtendedKey]] or by \n *  [nuetering](HDNodeWallet-neuter) a [[HDNodeWallet]].\n */\nexport class HDNodeVoidWallet extends VoidSigner {\n    /**\n     *  The compressed public key.\n     */\n    readonly publicKey!: string;\n\n    /**\n     *  The fingerprint.\n     *\n     *  A fingerprint allows quick qay to detect parent and child nodes,\n     *  but developers should be prepared to deal with collisions as it\n     *  is only 4 bytes.\n     */\n    readonly fingerprint!: string;\n\n    /**\n     *  The parent node fingerprint.\n     */\n    readonly parentFingerprint!: string;\n\n    /**\n     *  The chaincode, which is effectively a public key used\n     *  to derive children.\n     */\n    readonly chainCode!: string;\n\n    /**\n     *  The derivation path of this wallet.\n     *\n     *  Since extended keys do not provider full path details, this\n     *  may be ``null``, if instantiated from a source that does not\n     *  enocde it.\n     */\n    readonly path!: null | string;\n\n    /**\n     *  The child index of this wallet. Values over ``2 *\\* 31`` indicate\n     *  the node is hardened.\n     */\n    readonly index!: number;\n\n    /**\n     *  The depth of this wallet, which is the number of components\n     *  in its path.\n     */\n    readonly depth!: number;\n\n    /**\n     *  @private\n     */\n    constructor(guard: any, address: string, publicKey: string, parentFingerprint: string, chainCode: string, path: null | string, index: number, depth: number, provider: null | Provider) {\n        super(address, provider);\n        assertPrivate(guard, _guard, \"HDNodeVoidWallet\");\n\n        defineProperties<HDNodeVoidWallet>(this, { publicKey });\n\n        const fingerprint = dataSlice(ripemd160(sha256(publicKey)), 0, 4);\n        defineProperties<HDNodeVoidWallet>(this, {\n            publicKey, fingerprint, parentFingerprint, chainCode, path, index, depth\n        });\n    }\n\n    connect(provider: null | Provider): HDNodeVoidWallet {\n        return new HDNodeVoidWallet(_guard, this.address, this.publicKey,\n            this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, provider);\n    }\n\n    /**\n     *  The extended key.\n     *\n     *  This key will begin with the prefix ``xpub`` and can be used to\n     *  reconstruct this neutered key to derive its children addresses.\n     */\n    get extendedKey(): string {\n        // We only support the mainnet values for now, but if anyone needs\n        // testnet values, let me know. I believe current sentiment is that\n        // we should always use mainnet, and use BIP-44 to derive the network\n        //   - Mainnet: public=0x0488B21E, private=0x0488ADE4\n        //   - Testnet: public=0x043587CF, private=0x04358394\n\n        assert(this.depth < 256, \"Depth too deep\", \"UNSUPPORTED_OPERATION\", { operation: \"extendedKey\" });\n\n        return encodeBase58Check(concat([\n            \"0x0488B21E\",\n            zpad(this.depth, 1),\n            this.parentFingerprint,\n            zpad(this.index, 4),\n            this.chainCode,\n            this.publicKey,\n        ]));\n    }\n\n    /**\n     *  Returns true if this wallet has a path, providing a Type Guard\n     *  that the path is non-null.\n     */\n    hasPath(): this is { path: string } { return (this.path != null); }\n\n    /**\n     *  Return the child for %%index%%.\n     */\n    deriveChild(_index: Numeric): HDNodeVoidWallet {\n        const index = getNumber(_index, \"index\");\n        assertArgument(index <= 0xffffffff, \"invalid index\", \"index\", index);\n\n        // Base path\n        let path = this.path;\n        if (path) {\n            path += \"/\" + (index & ~HardenedBit);\n            if (index & HardenedBit) { path += \"'\"; }\n        }\n\n        const { IR, IL } = ser_I(index, this.chainCode, this.publicKey, null);\n        const Ki = SigningKey.addPoints(IL, this.publicKey, true);\n\n        const address = computeAddress(Ki);\n\n        return new HDNodeVoidWallet(_guard, address, Ki, this.fingerprint, hexlify(IR),\n            path, index, this.depth + 1, this.provider);\n\n    }\n\n    /**\n     *  Return the signer for %%path%% from this node.\n     */\n    derivePath(path: string): HDNodeVoidWallet {\n        return derivePath<HDNodeVoidWallet>(this, path);\n    }\n}\n\n/*\nexport class HDNodeWalletManager {\n    #root: HDNodeWallet;\n\n    constructor(phrase: string, password?: null | string, path?: null | string, locale?: null | Wordlist) {\n        if (password == null) { password = \"\"; }\n        if (path == null) { path = \"m/44'/60'/0'/0\"; }\n        if (locale == null) { locale = LangEn.wordlist(); }\n        this.#root = HDNodeWallet.fromPhrase(phrase, password, path, locale);\n    }\n\n    getSigner(index?: number): HDNodeWallet {\n        return this.#root.deriveChild((index == null) ? 0: index);\n    }\n}\n*/\n\n/**\n *  Returns the [[link-bip-32]] path for the account at %%index%%.\n *\n *  This is the pattern used by wallets like Ledger.\n *\n *  There is also an [alternate pattern](getIndexedAccountPath) used by\n *  some software.\n */\nexport function getAccountPath(_index: Numeric): string {\n    const index = getNumber(_index, \"index\");\n    assertArgument(index >= 0 && index < HardenedBit, \"invalid account index\", \"index\", index);\n    return `m/44'/60'/${ index }'/0/0`;\n}\n\n/**\n *  Returns the path using an alternative pattern for deriving accounts,\n *  at %%index%%.\n *\n *  This derivation path uses the //index// component rather than the\n *  //account// component to derive sequential accounts.\n *\n *  This is the pattern used by wallets like MetaMask.\n */\nexport function getIndexedAccountPath(_index: Numeric): string {\n    const index = getNumber(_index, \"index\");\n    assertArgument(index >= 0 && index < HardenedBit, \"invalid account index\", \"index\", index);\n    return `m/44'/60'/0'/0/${ index}`;\n}\n\n","/**\n *  @_subsection: api/wallet:JSON Wallets  [json-wallets]\n */\n\nimport { CBC, pkcs7Strip } from \"aes-js\";\n\nimport { getAddress } from \"../address/index.js\";\nimport { pbkdf2 } from \"../crypto/index.js\";\nimport { id } from \"../hash/index.js\";\nimport { getBytes, assertArgument } from \"../utils/index.js\";\n\nimport { getPassword, looseArrayify, spelunk } from \"./utils.js\";\n\n\n/**\n *  The data stored within a JSON Crowdsale wallet is fairly\n *  minimal.\n */\nexport type CrowdsaleAccount = {\n    privateKey: string;\n    address: string;\n}\n\n/**\n *  Returns true if %%json%% is a valid JSON Crowdsale wallet.\n */\nexport function isCrowdsaleJson(json: string): boolean {\n    try {\n        const data = JSON.parse(json);\n        if (data.encseed) { return true; }\n    } catch (error) { }\n    return false;\n}\n\n// See: https://github.com/ethereum/pyethsaletool\n\n/**\n *  Before Ethereum launched, it was necessary to create a wallet\n *  format for backers to use, which would be used to receive ether\n *  as a reward for contributing to the project.\n *\n *  The [[link-crowdsale]] format is now obsolete, but it is still\n *  useful to support and the additional code is fairly trivial as\n *  all the primitives required are used through core portions of\n *  the library.\n */\nexport function decryptCrowdsaleJson(json: string, _password: string | Uint8Array): CrowdsaleAccount {\n    const data = JSON.parse(json);\n    const password = getPassword(_password);\n\n    // Ethereum Address\n    const address = getAddress(spelunk(data, \"ethaddr:string!\"));\n\n    // Encrypted Seed\n    const encseed = looseArrayify(spelunk(data, \"encseed:string!\"));\n    assertArgument(encseed && (encseed.length % 16) === 0, \"invalid encseed\", \"json\", json);\n\n    const key = getBytes(pbkdf2(password, password, 2000, 32, \"sha256\")).slice(0, 16);\n\n    const iv = encseed.slice(0, 16);\n    const encryptedSeed = encseed.slice(16);\n\n    // Decrypt the seed\n    const aesCbc = new CBC(key, iv);\n    const seed = pkcs7Strip(getBytes(aesCbc.decrypt(encryptedSeed)));\n\n    // This wallet format is weird... Convert the binary encoded hex to a string.\n    let seedHex = \"\";\n    for (let i = 0; i < seed.length; i++) {\n        seedHex += String.fromCharCode(seed[i]);\n    }\n\n    return { address, privateKey: id(seedHex) };\n}\n","\nexport function pkcs7Pad(data: Uint8Array): Uint8Array {\n    const padder = 16 - (data.length % 16);\n\n    const result = new Uint8Array(data.length + padder);\n    result.set(data);\n\n    for (let i = data.length; i < result.length; i++) {\n        result[i] = padder;\n    }\n\n    return result;\n}\n\nexport function pkcs7Strip(data: Uint8Array): Uint8Array {\n    if (data.length < 16) { throw new TypeError('PKCS#7 invalid length'); }\n\n    const padder = data[data.length - 1];\n    if (padder > 16) { throw new TypeError('PKCS#7 padding byte out of range'); }\n\n    const length = data.length - padder;\n    for (let i = 0; i < padder; i++) {\n        if (data[length + i] !== padder) {\n            throw new TypeError('PKCS#7 invalid padding byte');\n        }\n    }\n\n    return new Uint8Array(data.subarray(0, length));\n}\n","import { SigningKey } from \"../crypto/index.js\";\nimport { assertArgument } from \"../utils/index.js\";\n\nimport { BaseWallet } from \"./base-wallet.js\";\nimport { HDNodeWallet } from \"./hdwallet.js\";\nimport { decryptCrowdsaleJson, isCrowdsaleJson  } from \"./json-crowdsale.js\";\nimport {\n    decryptKeystoreJson, decryptKeystoreJsonSync,\n    encryptKeystoreJson, encryptKeystoreJsonSync,\n    isKeystoreJson\n} from \"./json-keystore.js\";\nimport { Mnemonic } from \"./mnemonic.js\";\n\nimport type { ProgressCallback } from \"../crypto/index.js\";\nimport type { Provider } from \"../providers/index.js\";\n\nimport type { CrowdsaleAccount } from \"./json-crowdsale.js\";\nimport type { KeystoreAccount } from \"./json-keystore.js\";\n\n\nfunction stall(duration: number): Promise<void> {\n    return new Promise((resolve) => { setTimeout(() => { resolve(); }, duration); });\n}\n\n/**\n *  A **Wallet** manages a single private key which is used to sign\n *  transactions, messages and other common payloads.\n *\n *  This class is generally the main entry point for developers\n *  that wish to use a private key directly, as it can create\n *  instances from a large variety of common sources, including\n *  raw private key, [[link-bip-39]] mnemonics and encrypte JSON\n *  wallets.\n */\nexport class Wallet extends BaseWallet {\n\n    /**\n     *  Create a new wallet for the private %%key%%, optionally connected\n     *  to %%provider%%.\n     */\n    constructor(key: string | SigningKey, provider?: null | Provider) {\n        if (typeof(key) === \"string\" && !key.startsWith(\"0x\")) {\n            key = \"0x\" + key;\n        }\n\n        let signingKey = (typeof(key) === \"string\") ? new SigningKey(key): key;\n        super(signingKey, provider);\n    }\n\n    connect(provider: null | Provider): Wallet {\n        return new Wallet(this.signingKey, provider);\n    }\n\n    /**\n     *  Resolves to a [JSON Keystore Wallet](json-wallets) encrypted with\n     *  %%password%%.\n     *\n     *  If %%progressCallback%% is specified, it will receive periodic\n     *  updates as the encryption process progreses.\n     */\n    async encrypt(password: Uint8Array | string, progressCallback?: ProgressCallback): Promise<string> {\n        const account = { address: this.address, privateKey: this.privateKey };\n        return await encryptKeystoreJson(account, password, { progressCallback });\n    }\n\n    /**\n     *  Returns a [JSON Keystore Wallet](json-wallets) encryped with\n     *  %%password%%.\n     *\n     *  It is preferred to use the [async version](encrypt) instead,\n     *  which allows a [[ProgressCallback]] to keep the user informed.\n     *\n     *  This method will block the event loop (freezing all UI) until\n     *  it is complete, which may be a non-trivial duration.\n     */\n    encryptSync(password: Uint8Array | string): string {\n        const account = { address: this.address, privateKey: this.privateKey };\n        return encryptKeystoreJsonSync(account, password);\n    }\n\n    static #fromAccount(account: null | CrowdsaleAccount | KeystoreAccount): HDNodeWallet | Wallet {\n        assertArgument(account, \"invalid JSON wallet\", \"json\", \"[ REDACTED ]\");\n\n        if (\"mnemonic\" in account && account.mnemonic && account.mnemonic.locale === \"en\") {\n            const mnemonic = Mnemonic.fromEntropy(account.mnemonic.entropy);\n            const wallet = HDNodeWallet.fromMnemonic(mnemonic, account.mnemonic.path);\n            if (wallet.address === account.address && wallet.privateKey === account.privateKey) {\n                return wallet;\n            }\n            console.log(\"WARNING: JSON mismatch address/privateKey != mnemonic; fallback onto private key\");\n        }\n\n        const wallet = new Wallet(account.privateKey);\n\n        assertArgument(wallet.address === account.address,\n            \"address/privateKey mismatch\", \"json\", \"[ REDACTED ]\");\n\n        return wallet;\n    }\n\n    /**\n     *  Creates (asynchronously) a **Wallet** by decrypting the %%json%%\n     *  with %%password%%.\n     *\n     *  If %%progress%% is provided, it is called periodically during\n     *  decryption so that any UI can be updated.\n     */\n    static async fromEncryptedJson(json: string, password: Uint8Array | string, progress?: ProgressCallback): Promise<HDNodeWallet | Wallet> {\n        let account: null | CrowdsaleAccount | KeystoreAccount = null;\n        if (isKeystoreJson(json)) {\n            account = await decryptKeystoreJson(json, password, progress);\n\n        } else if (isCrowdsaleJson(json)) {\n            if (progress) { progress(0); await stall(0); }\n            account = decryptCrowdsaleJson(json, password);\n            if (progress) { progress(1); await stall(0); }\n\n        }\n\n        return Wallet.#fromAccount(account);\n    }\n\n    /**\n     *  Creates a **Wallet** by decrypting the %%json%% with %%password%%.\n     *\n     *  The [[fromEncryptedJson]] method is preferred, as this method\n     *  will lock up and freeze the UI during decryption, which may take\n     *  some time.\n     */\n    static fromEncryptedJsonSync(json: string, password: Uint8Array | string): HDNodeWallet | Wallet {\n        let account: null | CrowdsaleAccount | KeystoreAccount = null;\n        if (isKeystoreJson(json)) {\n            account = decryptKeystoreJsonSync(json, password);\n        } else if (isCrowdsaleJson(json)) {\n            account = decryptCrowdsaleJson(json, password);\n        } else {\n            assertArgument(false, \"invalid JSON wallet\", \"json\", \"[ REDACTED ]\");\n        }\n\n        return Wallet.#fromAccount(account);\n    }\n\n    /**\n     *  Creates a new random [[HDNodeWallet]] using the available\n     *  [cryptographic random source](randomBytes).\n     *\n     *  If there is no crytographic random source, this will throw.\n     */\n    static createRandom(provider?: null | Provider): HDNodeWallet {\n        const wallet = HDNodeWallet.createRandom();\n        if (provider) { return wallet.connect(provider); }\n        return wallet;\n    }\n\n    /**\n     *  Creates a [[HDNodeWallet]] for %%phrase%%.\n     */\n    static fromPhrase(phrase: string, provider?: Provider): HDNodeWallet {\n        const wallet = HDNodeWallet.fromPhrase(phrase);\n        if (provider) { return wallet.connect(provider); }\n        return wallet;\n    }\n}\n","\nimport { WordlistOwl } from \"./wordlist-owl.js\";\nimport { decodeOwlA } from \"./decode-owla.js\";\n\n/**\n *  An OWL-A format Wordlist extends the OWL format to add an\n *  overlay onto an OWL format Wordlist to support diacritic\n *  marks.\n *\n *  This class is generally not useful to most developers as\n *  it is used mainly internally to keep Wordlists for languages\n *  based on latin-1 small.\n *\n *  If necessary, there are tools within the ``generation/`` folder\n *  to create the necessary data.\n */\nexport class WordlistOwlA extends WordlistOwl {\n    #accent: string;\n\n\n    /**\n     *  Creates a new Wordlist for %%locale%% using the OWLA %%data%%\n     *  and %%accent%% data and validated against the %%checksum%%.\n     */\n    constructor(locale: string, data: string, accent: string, checksum: string) {\n        super(locale, data, checksum);\n        this.#accent = accent;\n    }\n\n    /**\n     *  The OWLA-encoded accent data.\n     */\n    get _accent(): string { return this.#accent; }\n\n    /**\n     *  Decode all the words for the wordlist.\n     */\n    _decodeWords(): Array<string> {\n        return decodeOwlA(this._data, this._accent);\n    }\n}\n","import { assertArgument } from \"../utils/index.js\";\n\nimport { decodeBits } from \"./bit-reader.js\";\nimport { decodeOwl } from \"./decode-owl.js\";\n\n/**\n *  @_ignore\n */\nexport function decodeOwlA(data: string, accents: string): Array<string> {\n    let words = decodeOwl(data).join(\",\");\n\n    // Inject the accents\n    accents.split(/,/g).forEach((accent) => {\n\n        const match = accent.match(/^([a-z]*)([0-9]+)([0-9])(.*)$/);\n        assertArgument(match !== null, \"internal error parsing accents\", \"accents\", accents);\n\n        let posOffset = 0;\n        const positions = decodeBits(parseInt(match[3]), match[4]);\n        const charCode = parseInt(match[2]);\n        const regex = new RegExp(`([${ match[1] }])`, \"g\");\n        words = words.replace(regex, (all, letter) => {\n            const rem = --positions[posOffset];\n            if (rem === 0) {\n                letter = String.fromCharCode(letter.charCodeAt(0), charCode);\n                posOffset++;\n            }\n            return letter;\n        });\n    });\n\n    return words.split(\",\");\n}\n","const Base64 = \")!@#$%^&*(ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_\";\n\n/**\n *  @_ignore\n */\nexport function decodeBits(width: number, data: string): Array<number> {\n    const maxValue = (1 << width) - 1;\n    const result: Array<number> = [ ];\n    let accum = 0, bits = 0, flood = 0;\n    for (let i = 0; i < data.length; i++) {\n\n        // Accumulate 6 bits of data\n        accum = ((accum << 6) | Base64.indexOf(data[i]));\n        bits += 6;\n\n        // While we have enough for a word...\n        while (bits >= width) {\n            // ...read the word\n            const value = (accum >> (bits - width));\n            accum &= (1 << (bits - width)) - 1;\n            bits -= width;\n\n            // A value of 0 indicates we exceeded maxValue, it\n            // floods over into the next value\n            if (value === 0) {\n                flood += maxValue;\n            } else {\n                result.push(value + flood);\n                flood = 0;\n            }\n        }\n    }\n\n    return result;\n}\n","\nimport { LangEn } from \"./lang-en.js\";\n\nimport type { Wordlist } from \"./wordlist.js\";\n\nexport const wordlists: Record<string, Wordlist> = {\n  en: LangEn.wordlist(),\n};\n"],"names":["encodeBytes32String","text","bytes","toUtf8Bytes","length","Error","zeroPadBytes","decodeBytes32String","_bytes","data","getBytes","toUtf8String","slice","N","BigInt","WeiPerEther","MaxUint256","MinInt256","MaxInt256","EtherSymbol","MessagePrefix","ContractFactory","interface","bytecode","runner","constructor","abi","iface","Interface","from","Uint8Array","object","startsWith","hexlify","defineProperties","this","attach","target","BaseContract","getDeployTransaction","overrides","fragment","deploy","_len","arguments","args","Array","_key","inputs","copyOverrides","pop","resolvedArgs","resolveArgs","concat","encodeDeploy","Object","assign","tx","assert","sendTransaction","operation","sentTx","address","getCreateAddress","connect","fromSolidity","output","assertArgument","JSON","parse","evm","locked","_computeHmac","algorithm","key","createHmac","update","digest","__computeHmac","computeHmac","_data","_","lock","register","func","freeze","Rho","Id","i","idxL","idxR","map","j","push","k","shifts","shiftsL","idx","shiftsR","Kl","Uint32Array","Kr","rotl","word","shift","f","group","x","y","z","BUF","RIPEMD160","SHA2","super","h0","h1","h2","h3","h4","get","set","process","view","offset","getUint32","al","ar","bl","br","cl","cr","dl","dr","el","er","rGroup","hbl","hbr","rl","rr","sl","sr","tl","tr","roundClean","fill","destroy","destroyed","buffer","ripemd160","wrapConstructor","_ripemd160","noble_ripemd160","__ripemd160","TypeError","_pbkdf2","password","salt","iterations","keylen","algo","pbkdf2Sync","__pbkdf2","pbkdf2","_password","_salt","_randomBytes","crypto_random","__randomBytes","randomBytes","a","b","XorAndSalsa","prev","pi","input","ii","out","oi","y00","y01","y02","y03","y04","y05","y06","y07","y08","y09","y10","y11","y12","y13","y14","y15","x00","x01","x02","x03","x04","x05","x06","x07","x08","x09","x10","x11","x12","x13","x14","x15","BlockMix","r","head","tail","scryptInit","_opts","opts","checkOpts","dkLen","asyncTick","maxmem","p","onProgress","assertNumber","undefined","blockSize","blockSize32","memUsed","B","sha256","c","B32","u32","V","tmp","blockMixCb","totalBlockMix","callbackPer","Math","max","floor","blockMixCnt","scryptOutput","res","lockedSync","lockedAsync","_scryptAsync","async","passwd","Pi","pos","asyncLoop","_nobleAsync","_scryptSync","_nobleSync","__scryptAsync","__scryptSync","scrypt","_passwd","progress","H","scryptSync","keccak256","sha512","hashAuthorization","auth","encodeRlp","chainId","toBeArray","getAddress","nonce","verifyAuthorization","sig","recoverAddress","hashMessage","message","String","verifyMessage","regexBytes","RegExp","regexNumber","regexArray","_pack","type","value","isArray","zeroPadValue","match","signed","size","parseInt","toTwos","dataLength","baseType","count","result","forEach","solidityPacked","types","values","tight","index","solidityPackedKeccak256","_keccak256","solidityPackedSha256","_sha256","shown","Set","showThrottleMessage","service","has","add","console","log","defaultApiKey","AnkrProvider","JsonRpcProvider","apiKey","_network","network","Network","options","polling","staticNetwork","getRequest","_getProvider","error","request","FetchRequest","name","getHost","allowGzip","retryFunc","response","attempt","getRpcError","payload","method","isCommunityResource","AlchemyProvider","_perform","req","trace","resolveProperties","send","hash","getTransaction","action","reason","transaction","invocation","revert","getApiKey","ChainstackProvider","CloudflareProvider","EtherscanPluginId","EtherscanPlugin","NetworkPlugin","baseUrl","clone","skipKeys","nextId","EtherscanProvider","AbstractProvider","_apiKey","getPlugin","getBaseUrl","getUrl","module","params","query","keys","reduce","accum","getPostUrl","getPostData","apikey","chainid","detectNetwork","fetch","post","id","url","emit","setThrottleParams","slotInterval","resp","Promise","resolve","processFunc","hasBody","body","throttle","toLowerCase","indexOf","status","throwThrottleError","setHeader","join","assertOk","jsonrpc","info","_getTransactionPostData","gasLimit","gasPrice","maxFeePerGs","maxPriorityFeePerGas","toQuantity","accessListify","storageKeys","_checkError","isError","e","AbiCoder","getBuiltinCallException","Transaction","signedTransaction","_detectNetwork","tag","blockTag","position","hex","catch","boolean","includeTransactions","txhash","postData","getNetwork","getEtherPrice","parseFloat","ethusd","getContract","_address","_getAddress","then","Contract","_WebSocket","self","window","global","getGlobal","WebSocket","SocketSubscriber","filter","provider","stringify","start","filterId","_register","stop","pause","dropWhilePaused","resume","_handleMessage","emitPromise","_emit","SocketBlockSubscriber","number","SocketPendingSubscriber","SocketEventSubscriber","logFilter","_wrapLog","SocketProvider","JsonRpcApiProvider","_options","batchMaxCount","Map","_getSubscriber","sub","UnmanagedSubscriber","orphan","subscriber","pending","delete","_send","promise","reject","_waitUntilReady","_write","_processMessage","callback","makeError","reasonCode","subscription","WebSocketProvider","websocket","onopen","_start","onmessage","close","defaultProjectId","InfuraWebSocketProvider","projectId","projectSecret","InfuraProvider","_getConnection","credentials","replace","getWebSocketProvider","setCredentials","defaultToken","QuickNodeProvider","token","BN_1","BN_2","getTime","Date","toString","defaultConfig","stallTimeout","priority","weight","defaultState","blockNumber","requests","lateResponses","errorResponses","outOfSync","unsupportedEvents","rollingDuration","score","_updateNumber","_totalTime","_lastFatalError","_lastFatalErrorTimestamp","_normalize","toJSON","sort","normalizeResult","shortMessage","checkQuorum","quorum","results","tally","t","best","getMedian","resultWeight","errorMap","bestError","mid","getAnyResult","FallbackProvider","eventQuorum","eventWorkers","providers","ceil","config","providerConfigs","getBigInt","_translatePerform","broadcastTransaction","call","estimateGas","getBalance","block","blockHash","getBlock","getBlockNumber","getCode","getFeeData","getLogs","getStorage","getTransactionCount","getTransactionReceipt","getTransactionResult","running","configs","allConfigs","array","random","shuffle","didBump","perform","staller","now","dt","duration","setTimeout","initialSync","promises","waitForSync","all","getNumber","mode","bestResult","bestWeight","getFuzzyMode","interesting","newRunners","race","broadcasts","_ref","done","waiting","inflightQuorum","Testnets","split","getDefaultProvider","allowService","exclusive","alchemy","ankr","chainstack","etherscan","infura","quicknode","NonceManager","AbstractSigner","signer","getNonce","delta","increment","reset","noncePromise","populateTransaction","signTransaction","signMessage","signTypedData","domain","BlockscoutProvider","getRpcRequest","_error","code","isHexString","panicCodes","panicCode","defaultApplicationId","PocketProvider","applicationId","applicationSecret","IpcSocketProvider","uuidV4","substring","subsChrs","Word","unfold","words","sep","initial","fromCharCode","decodeOwl","subs","clumps","leftover","item","semi","decode","Wordlist","locale","phrase","WordlistOwl","checksum","_decodeWords","getWord","getWordIndex","wordlist","LangEn","getUpperMask","bits","getLowerMask","mnemonicToEntropy","mnemonic","assertNormalize","entropy","normalize","bit","entropyBits","checksumMask","entropyToMnemonic","indices","remainingBits","checksumBits","_guard","Mnemonic","guard","assertPrivate","computeSeed","fromPhrase","fromEntropy","_entropy","entropyToPhrase","phraseToEntropy","isValidMnemonic","BaseWallet","privateKey","sign","computeAddress","signingKey","publicKey","copyRequest","to","resolveAddress","btx","signature","unsignedHash","serialized","signMessageSync","authorizeSync","authorize","populateAuthorization","populated","TypedDataEncoder","resolveNames","resolveName","numberOfRounds","rcon","S","Si","T1","T2","T3","T4","T5","T6","T7","T8","U1","U2","U3","U4","convertToInt32","AES","__classPrivateFieldGet","_AES_key","_AES_Kd","_AES_Ke","__classPrivateFieldSet","rounds","roundKeyCount","KC","tk","tt","rconpointer","encrypt","plaintext","decrypt","ciphertext","ModeOfOperation","cls","aes","enumerable","CBC","iv","_CBC_iv","_CBC_lastBlock","subarray","CTR","initialValue","_CTR_remaining","_CTR_remainingIndex","_CTR_counter","setCounterValue","setCounterBytes","counter","Number","isInteger","MAX_SAFE_INTEGER","crypttext","_b","_a","looseArrayify","hexString","getBytesCopy","zpad","getPassword","spelunk","_path","path","reqd","cur","comp","found","isSafeInteger","defaultPath","isKeystoreJson","json","version","getAccount","computedMAC","aesCtr","check","account","mnemonicKey","mnemonicCiphertext","mnemonicIv","mnemonicAesCtr","getDecryptKdfParams","kdf","prf","decryptKeystoreJsonSync","stall","decryptKeystoreJson","getEncryptKdfParams","_encryptKeystore","uuidRandom","uuid","derivedKey","macPrefix","mac","Crypto","cipher","cipherparams","kdfparams","n","dklen","client","gethFilename","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","mnemonicCounter","encryptKeystoreJsonSync","passwordBytes","encryptKeystoreJson","progressCallback","MasterSecret","HardenedBit","trunc","encodeBase58Check","_value","dataSlice","encodeBase58","ser_I","chainCode","I","IL","IR","derivePath","node","components","depth","component","deriveChild","HDNodeWallet","fingerprint","parentFingerprint","compressedPublicKey","m","encryptSync","extendedKey","hasPath","neuter","HDNodeVoidWallet","_index","ki","SigningKey","toBeHex","toBigInt","_seed","isBytesLike","seed","fromExtendedKey","decodeBase58","createRandom","fromMnemonic","fromSeed","VoidSigner","Ki","addPoints","getAccountPath","getIndexedAccountPath","isCrowdsaleJson","encseed","decryptCrowdsaleJson","encryptedSeed","aesCbc","padder","pkcs7Strip","seedHex","Wallet","wallet","fromEncryptedJson","fromEncryptedJsonSync","WordlistOwlA","accent","_accent","accents","posOffset","positions","width","maxValue","flood","decodeBits","charCode","regex","letter","charCodeAt","decodeOwlA","wordlists","en"],"sourceRoot":""}